***Raw Terminals***
import
using
namespace
extern
var
class
void
bool
int
float
string
null
,
;
new
delete
while
for
if
else
break
return
this
(
)
[
]
{
}
=
+=
-=
*=
/=
%=
--
++
==
!=
<=
>=
>
<
+
-
*
/
%
||
&&
!
:
?
.
LITBOOL
LITINT
LITFLOAT
LITSTRING
ID
***Raw Nonterminals***
S
importations
importation
namespaceusings
namespaceusing
statements
namespaceblock
statementblock
declstatements
stmt
declstmt
elifclauselist
elifclause
elseclause
stmtexpr
assign
call
indexaccess
newobj
newarr
incdec
type
stype
arrtype
primitive
expr
nexpr
bexpr
aexpr
term
factor
primary
lit
cast
lvalue
memberaccess
params
args
stypeBracket
idBracket
primitiveBracket
optidx
inherit
***Raw Productions***
S -> importations namespaceusings statements
importations -> importations importation
importations -> importation
importations -> ε
importation -> import < LITSTRING >
namespaceusings -> namespaceusings namespaceusing
namespaceusings -> namespaceusing
namespaceusings -> ε
namespaceusing -> using ID ;
statements -> statements stmt
statements -> stmt
statements -> ε
namespaceblock -> namespace ID { statements }
statementblock -> { statements }
declstatements -> declstatements declstmt
declstatements -> declstmt
declstatements -> ε
stmt -> namespaceblock
stmt -> statementblock
stmt -> declstmt
stmt -> stmtexpr ;
stmt -> break ;
stmt -> return expr ;
stmt -> return ;
stmt -> delete expr ;
stmt -> while ( expr ) stmt
stmt -> for ( stmt bexpr ; stmtexpr ) stmt
stmt -> if ( expr ) stmt elifclauselist elseclause
declstmt -> type ID = expr ;
declstmt -> type ID ( params ) { statements }
declstmt -> extern type ID ( params ) ;
declstmt -> class ID inherit { declstatements }
elifclauselist -> ε
elifclauselist -> elifclauselist elifclause
elifclause -> else if ( expr ) stmt
elseclause -> ε
elseclause -> else stmt
assign -> lvalue = expr
assign -> lvalue += expr
assign -> lvalue -= expr
assign -> lvalue *= expr
assign -> lvalue /= expr
assign -> lvalue %= expr
lvalue -> ID
lvalue -> memberaccess
lvalue -> indexaccess
type -> arrtype
type -> stype
arrtype -> stypeBracket
stype -> primitive
stype -> ID
primitive -> void
primitive -> bool
primitive -> int
primitive -> float
primitive -> string
expr -> assign
expr -> nexpr
stmtexpr -> assign
stmtexpr -> call
stmtexpr -> incdec
stmtexpr -> newobj
nexpr -> bexpr
nexpr -> aexpr
bexpr -> bexpr && bexpr
bexpr -> bexpr || bexpr
bexpr -> aexpr > aexpr
bexpr -> aexpr < aexpr
bexpr -> aexpr >= aexpr
bexpr -> aexpr <= aexpr
bexpr -> aexpr == aexpr
bexpr -> aexpr != aexpr
bexpr -> factor
aexpr -> aexpr + term
aexpr -> aexpr - term
aexpr -> term
term -> term * factor
term -> term / factor
term -> factor
factor -> incdec
factor -> ! factor
factor -> - factor
factor -> cast
factor -> primary
primary -> ( expr )
primary -> ID
primary -> this
primary -> memberaccess
primary -> indexaccess
primary -> call
primary -> newobj
primary -> newarr
primary -> lit
incdec -> ++ ID
incdec -> -- ID
incdec -> ID ++
incdec -> ID --
call -> ID ( args )
call -> memberaccess ( args )
indexaccess -> idBracket
indexaccess -> memberaccess [ aexpr ]
newobj -> new ID ( )
newarr -> new stypeBracket
cast -> ( type ) factor
memberaccess -> primary . ID
lit -> LITINT
lit -> LITFLOAT
lit -> LITSTRING
lit -> LITBOOL
lit -> null
params -> ε
params -> type ID
params -> params , type ID
args -> ε
args -> expr
args -> args , expr
stypeBracket -> idBracket
stypeBracket -> primitiveBracket
idBracket -> ID [ optidx ]
primitiveBracket -> primitive [ optidx ]
optidx -> aexpr
optidx -> ε
inherit -> : ID
inherit -> ε



***Data***
***Terminals***
import
using
namespace
extern
var
class
void
bool
int
float
string
null
,
;
new
delete
while
for
if
else
break
return
this
(
)
[
]
{
}
=
+=
-=
*=
/=
%=
--
++
==
!=
<=
>=
>
<
+
-
*
/
%
||
&&
!
:
?
.
LITBOOL
LITINT
LITFLOAT
LITSTRING
ID
$
***Nonterminals***
S
importations
importation
namespaceusings
namespaceusing
statements
namespaceblock
statementblock
declstatements
stmt
declstmt
elifclauselist
elifclause
elseclause
stmtexpr
assign
call
indexaccess
newobj
newarr
incdec
type
stype
arrtype
primitive
expr
nexpr
bexpr
aexpr
term
factor
primary
lit
cast
lvalue
memberaccess
params
args
stypeBracket
idBracket
primitiveBracket
optidx
inherit
S'
***Productions***
S -> importations namespaceusings statements
importations -> importations importation
importations -> importation
importations -> ε
importation -> import < LITSTRING >
namespaceusings -> namespaceusings namespaceusing
namespaceusings -> namespaceusing
namespaceusings -> ε
namespaceusing -> using ID ;
statements -> statements stmt
statements -> stmt
statements -> ε
namespaceblock -> namespace ID { statements }
statementblock -> { statements }
declstatements -> declstatements declstmt
declstatements -> declstmt
declstatements -> ε
stmt -> namespaceblock
stmt -> statementblock
stmt -> declstmt
stmt -> stmtexpr ;
stmt -> break ;
stmt -> return expr ;
stmt -> return ;
stmt -> delete expr ;
stmt -> while ( expr ) stmt
stmt -> for ( stmt bexpr ; stmtexpr ) stmt
stmt -> if ( expr ) stmt elifclauselist elseclause
declstmt -> type ID = expr ;
declstmt -> type ID ( params ) { statements }
declstmt -> extern type ID ( params ) ;
declstmt -> class ID inherit { declstatements }
elifclauselist -> ε
elifclauselist -> elifclauselist elifclause
elifclause -> else if ( expr ) stmt
elseclause -> ε
elseclause -> else stmt
assign -> lvalue = expr
assign -> lvalue += expr
assign -> lvalue -= expr
assign -> lvalue *= expr
assign -> lvalue /= expr
assign -> lvalue %= expr
lvalue -> ID
lvalue -> memberaccess
lvalue -> indexaccess
type -> arrtype
type -> stype
arrtype -> stypeBracket
stype -> primitive
stype -> ID
primitive -> void
primitive -> bool
primitive -> int
primitive -> float
primitive -> string
expr -> assign
expr -> nexpr
stmtexpr -> assign
stmtexpr -> call
stmtexpr -> incdec
stmtexpr -> newobj
nexpr -> bexpr
nexpr -> aexpr
bexpr -> bexpr && bexpr
bexpr -> bexpr || bexpr
bexpr -> aexpr > aexpr
bexpr -> aexpr < aexpr
bexpr -> aexpr >= aexpr
bexpr -> aexpr <= aexpr
bexpr -> aexpr == aexpr
bexpr -> aexpr != aexpr
bexpr -> factor
aexpr -> aexpr + term
aexpr -> aexpr - term
aexpr -> term
term -> term * factor
term -> term / factor
term -> factor
factor -> incdec
factor -> ! factor
factor -> - factor
factor -> cast
factor -> primary
primary -> ( expr )
primary -> ID
primary -> this
primary -> memberaccess
primary -> indexaccess
primary -> call
primary -> newobj
primary -> newarr
primary -> lit
incdec -> ++ ID
incdec -> -- ID
incdec -> ID ++
incdec -> ID --
call -> ID ( args )
call -> memberaccess ( args )
indexaccess -> idBracket
indexaccess -> memberaccess [ aexpr ]
newobj -> new ID ( )
newarr -> new stypeBracket
cast -> ( type ) factor
memberaccess -> primary . ID
lit -> LITINT
lit -> LITFLOAT
lit -> LITSTRING
lit -> LITBOOL
lit -> null
params -> ε
params -> type ID
params -> params , type ID
args -> ε
args -> expr
args -> args , expr
stypeBracket -> idBracket
stypeBracket -> primitiveBracket
idBracket -> ID [ optidx ]
primitiveBracket -> primitive [ optidx ]
optidx -> aexpr
optidx -> ε
inherit -> : ID
inherit -> ε
S' -> S
***States***
***State***
0
I_0
***Set***
S' -> · S, $
S -> · importations namespaceusings statements, $
importations -> · importations importation, using
importations -> · importations importation, namespace
importations -> · importations importation, {
importations -> · importations importation, ID
importations -> · importations importation, void
importations -> · importations importation, bool
importations -> · importations importation, int
importations -> · importations importation, float
importations -> · importations importation, string
importations -> · importations importation, extern
importations -> · importations importation, class
importations -> · importations importation, (
importations -> · importations importation, this
importations -> · importations importation, new
importations -> · importations importation, LITINT
importations -> · importations importation, LITFLOAT
importations -> · importations importation, LITSTRING
importations -> · importations importation, LITBOOL
importations -> · importations importation, null
importations -> · importations importation, ++
importations -> · importations importation, --
importations -> · importations importation, break
importations -> · importations importation, return
importations -> · importations importation, delete
importations -> · importations importation, while
importations -> · importations importation, for
importations -> · importations importation, if
importations -> · importations importation, $
importations -> · importation, using
importations -> · importation, namespace
importations -> · importation, {
importations -> · importation, ID
importations -> · importation, void
importations -> · importation, bool
importations -> · importation, int
importations -> · importation, float
importations -> · importation, string
importations -> · importation, extern
importations -> · importation, class
importations -> · importation, (
importations -> · importation, this
importations -> · importation, new
importations -> · importation, LITINT
importations -> · importation, LITFLOAT
importations -> · importation, LITSTRING
importations -> · importation, LITBOOL
importations -> · importation, null
importations -> · importation, ++
importations -> · importation, --
importations -> · importation, break
importations -> · importation, return
importations -> · importation, delete
importations -> · importation, while
importations -> · importation, for
importations -> · importation, if
importations -> · importation, $
importations -> ·, using
importations -> ·, namespace
importations -> ·, {
importations -> ·, ID
importations -> ·, void
importations -> ·, bool
importations -> ·, int
importations -> ·, float
importations -> ·, string
importations -> ·, extern
importations -> ·, class
importations -> ·, (
importations -> ·, this
importations -> ·, new
importations -> ·, LITINT
importations -> ·, LITFLOAT
importations -> ·, LITSTRING
importations -> ·, LITBOOL
importations -> ·, null
importations -> ·, ++
importations -> ·, --
importations -> ·, break
importations -> ·, return
importations -> ·, delete
importations -> ·, while
importations -> ·, for
importations -> ·, if
importations -> ·, $
importations -> · importations importation, import
importations -> · importation, import
importations -> ·, import
importation -> · import < LITSTRING >, using
importation -> · import < LITSTRING >, namespace
importation -> · import < LITSTRING >, {
importation -> · import < LITSTRING >, ID
importation -> · import < LITSTRING >, void
importation -> · import < LITSTRING >, bool
importation -> · import < LITSTRING >, int
importation -> · import < LITSTRING >, float
importation -> · import < LITSTRING >, string
importation -> · import < LITSTRING >, extern
importation -> · import < LITSTRING >, class
importation -> · import < LITSTRING >, (
importation -> · import < LITSTRING >, this
importation -> · import < LITSTRING >, new
importation -> · import < LITSTRING >, LITINT
importation -> · import < LITSTRING >, LITFLOAT
importation -> · import < LITSTRING >, LITSTRING
importation -> · import < LITSTRING >, LITBOOL
importation -> · import < LITSTRING >, null
importation -> · import < LITSTRING >, ++
importation -> · import < LITSTRING >, --
importation -> · import < LITSTRING >, break
importation -> · import < LITSTRING >, return
importation -> · import < LITSTRING >, delete
importation -> · import < LITSTRING >, while
importation -> · import < LITSTRING >, for
importation -> · import < LITSTRING >, if
importation -> · import < LITSTRING >, $
importation -> · import < LITSTRING >, import
***EndSet***
***EndState***
***State***
1
I_1
***Set***
importation -> import · < LITSTRING >, using
importation -> import · < LITSTRING >, namespace
importation -> import · < LITSTRING >, {
importation -> import · < LITSTRING >, ID
importation -> import · < LITSTRING >, void
importation -> import · < LITSTRING >, bool
importation -> import · < LITSTRING >, int
importation -> import · < LITSTRING >, float
importation -> import · < LITSTRING >, string
importation -> import · < LITSTRING >, extern
importation -> import · < LITSTRING >, class
importation -> import · < LITSTRING >, (
importation -> import · < LITSTRING >, this
importation -> import · < LITSTRING >, new
importation -> import · < LITSTRING >, LITINT
importation -> import · < LITSTRING >, LITFLOAT
importation -> import · < LITSTRING >, LITSTRING
importation -> import · < LITSTRING >, LITBOOL
importation -> import · < LITSTRING >, null
importation -> import · < LITSTRING >, ++
importation -> import · < LITSTRING >, --
importation -> import · < LITSTRING >, break
importation -> import · < LITSTRING >, return
importation -> import · < LITSTRING >, delete
importation -> import · < LITSTRING >, while
importation -> import · < LITSTRING >, for
importation -> import · < LITSTRING >, if
importation -> import · < LITSTRING >, $
importation -> import · < LITSTRING >, import
***EndSet***
***EndState***
***State***
2
I_2
***Set***
S' -> S ·, $
***EndSet***
***EndState***
***State***
3
I_3
***Set***
S -> importations · namespaceusings statements, $
importations -> importations · importation, using
importations -> importations · importation, namespace
importations -> importations · importation, {
importations -> importations · importation, ID
importations -> importations · importation, void
importations -> importations · importation, bool
importations -> importations · importation, int
importations -> importations · importation, float
importations -> importations · importation, string
importations -> importations · importation, extern
importations -> importations · importation, class
importations -> importations · importation, (
importations -> importations · importation, this
importations -> importations · importation, new
importations -> importations · importation, LITINT
importations -> importations · importation, LITFLOAT
importations -> importations · importation, LITSTRING
importations -> importations · importation, LITBOOL
importations -> importations · importation, null
importations -> importations · importation, ++
importations -> importations · importation, --
importations -> importations · importation, break
importations -> importations · importation, return
importations -> importations · importation, delete
importations -> importations · importation, while
importations -> importations · importation, for
importations -> importations · importation, if
importations -> importations · importation, $
importations -> importations · importation, import
namespaceusings -> · namespaceusings namespaceusing, namespace
namespaceusings -> · namespaceusings namespaceusing, {
namespaceusings -> · namespaceusings namespaceusing, ID
namespaceusings -> · namespaceusings namespaceusing, void
namespaceusings -> · namespaceusings namespaceusing, bool
namespaceusings -> · namespaceusings namespaceusing, int
namespaceusings -> · namespaceusings namespaceusing, float
namespaceusings -> · namespaceusings namespaceusing, string
namespaceusings -> · namespaceusings namespaceusing, extern
namespaceusings -> · namespaceusings namespaceusing, class
namespaceusings -> · namespaceusings namespaceusing, (
namespaceusings -> · namespaceusings namespaceusing, this
namespaceusings -> · namespaceusings namespaceusing, new
namespaceusings -> · namespaceusings namespaceusing, LITINT
namespaceusings -> · namespaceusings namespaceusing, LITFLOAT
namespaceusings -> · namespaceusings namespaceusing, LITSTRING
namespaceusings -> · namespaceusings namespaceusing, LITBOOL
namespaceusings -> · namespaceusings namespaceusing, null
namespaceusings -> · namespaceusings namespaceusing, ++
namespaceusings -> · namespaceusings namespaceusing, --
namespaceusings -> · namespaceusings namespaceusing, break
namespaceusings -> · namespaceusings namespaceusing, return
namespaceusings -> · namespaceusings namespaceusing, delete
namespaceusings -> · namespaceusings namespaceusing, while
namespaceusings -> · namespaceusings namespaceusing, for
namespaceusings -> · namespaceusings namespaceusing, if
namespaceusings -> · namespaceusings namespaceusing, $
namespaceusings -> · namespaceusing, namespace
namespaceusings -> · namespaceusing, {
namespaceusings -> · namespaceusing, ID
namespaceusings -> · namespaceusing, void
namespaceusings -> · namespaceusing, bool
namespaceusings -> · namespaceusing, int
namespaceusings -> · namespaceusing, float
namespaceusings -> · namespaceusing, string
namespaceusings -> · namespaceusing, extern
namespaceusings -> · namespaceusing, class
namespaceusings -> · namespaceusing, (
namespaceusings -> · namespaceusing, this
namespaceusings -> · namespaceusing, new
namespaceusings -> · namespaceusing, LITINT
namespaceusings -> · namespaceusing, LITFLOAT
namespaceusings -> · namespaceusing, LITSTRING
namespaceusings -> · namespaceusing, LITBOOL
namespaceusings -> · namespaceusing, null
namespaceusings -> · namespaceusing, ++
namespaceusings -> · namespaceusing, --
namespaceusings -> · namespaceusing, break
namespaceusings -> · namespaceusing, return
namespaceusings -> · namespaceusing, delete
namespaceusings -> · namespaceusing, while
namespaceusings -> · namespaceusing, for
namespaceusings -> · namespaceusing, if
namespaceusings -> · namespaceusing, $
namespaceusings -> ·, namespace
namespaceusings -> ·, {
namespaceusings -> ·, ID
namespaceusings -> ·, void
namespaceusings -> ·, bool
namespaceusings -> ·, int
namespaceusings -> ·, float
namespaceusings -> ·, string
namespaceusings -> ·, extern
namespaceusings -> ·, class
namespaceusings -> ·, (
namespaceusings -> ·, this
namespaceusings -> ·, new
namespaceusings -> ·, LITINT
namespaceusings -> ·, LITFLOAT
namespaceusings -> ·, LITSTRING
namespaceusings -> ·, LITBOOL
namespaceusings -> ·, null
namespaceusings -> ·, ++
namespaceusings -> ·, --
namespaceusings -> ·, break
namespaceusings -> ·, return
namespaceusings -> ·, delete
namespaceusings -> ·, while
namespaceusings -> ·, for
namespaceusings -> ·, if
namespaceusings -> ·, $
importation -> · import < LITSTRING >, using
importation -> · import < LITSTRING >, namespace
importation -> · import < LITSTRING >, {
importation -> · import < LITSTRING >, ID
importation -> · import < LITSTRING >, void
importation -> · import < LITSTRING >, bool
importation -> · import < LITSTRING >, int
importation -> · import < LITSTRING >, float
importation -> · import < LITSTRING >, string
importation -> · import < LITSTRING >, extern
importation -> · import < LITSTRING >, class
importation -> · import < LITSTRING >, (
importation -> · import < LITSTRING >, this
importation -> · import < LITSTRING >, new
importation -> · import < LITSTRING >, LITINT
importation -> · import < LITSTRING >, LITFLOAT
importation -> · import < LITSTRING >, LITSTRING
importation -> · import < LITSTRING >, LITBOOL
importation -> · import < LITSTRING >, null
importation -> · import < LITSTRING >, ++
importation -> · import < LITSTRING >, --
importation -> · import < LITSTRING >, break
importation -> · import < LITSTRING >, return
importation -> · import < LITSTRING >, delete
importation -> · import < LITSTRING >, while
importation -> · import < LITSTRING >, for
importation -> · import < LITSTRING >, if
importation -> · import < LITSTRING >, $
importation -> · import < LITSTRING >, import
namespaceusings -> · namespaceusings namespaceusing, using
namespaceusings -> · namespaceusing, using
namespaceusings -> ·, using
namespaceusing -> · using ID ;, namespace
namespaceusing -> · using ID ;, {
namespaceusing -> · using ID ;, ID
namespaceusing -> · using ID ;, void
namespaceusing -> · using ID ;, bool
namespaceusing -> · using ID ;, int
namespaceusing -> · using ID ;, float
namespaceusing -> · using ID ;, string
namespaceusing -> · using ID ;, extern
namespaceusing -> · using ID ;, class
namespaceusing -> · using ID ;, (
namespaceusing -> · using ID ;, this
namespaceusing -> · using ID ;, new
namespaceusing -> · using ID ;, LITINT
namespaceusing -> · using ID ;, LITFLOAT
namespaceusing -> · using ID ;, LITSTRING
namespaceusing -> · using ID ;, LITBOOL
namespaceusing -> · using ID ;, null
namespaceusing -> · using ID ;, ++
namespaceusing -> · using ID ;, --
namespaceusing -> · using ID ;, break
namespaceusing -> · using ID ;, return
namespaceusing -> · using ID ;, delete
namespaceusing -> · using ID ;, while
namespaceusing -> · using ID ;, for
namespaceusing -> · using ID ;, if
namespaceusing -> · using ID ;, $
namespaceusing -> · using ID ;, using
***EndSet***
***EndState***
***State***
4
I_4
***Set***
importations -> importation ·, using
importations -> importation ·, namespace
importations -> importation ·, {
importations -> importation ·, ID
importations -> importation ·, void
importations -> importation ·, bool
importations -> importation ·, int
importations -> importation ·, float
importations -> importation ·, string
importations -> importation ·, extern
importations -> importation ·, class
importations -> importation ·, (
importations -> importation ·, this
importations -> importation ·, new
importations -> importation ·, LITINT
importations -> importation ·, LITFLOAT
importations -> importation ·, LITSTRING
importations -> importation ·, LITBOOL
importations -> importation ·, null
importations -> importation ·, ++
importations -> importation ·, --
importations -> importation ·, break
importations -> importation ·, return
importations -> importation ·, delete
importations -> importation ·, while
importations -> importation ·, for
importations -> importation ·, if
importations -> importation ·, $
importations -> importation ·, import
***EndSet***
***EndState***
***State***
5
I_5
***Set***
importation -> import < · LITSTRING >, using
importation -> import < · LITSTRING >, namespace
importation -> import < · LITSTRING >, {
importation -> import < · LITSTRING >, ID
importation -> import < · LITSTRING >, void
importation -> import < · LITSTRING >, bool
importation -> import < · LITSTRING >, int
importation -> import < · LITSTRING >, float
importation -> import < · LITSTRING >, string
importation -> import < · LITSTRING >, extern
importation -> import < · LITSTRING >, class
importation -> import < · LITSTRING >, (
importation -> import < · LITSTRING >, this
importation -> import < · LITSTRING >, new
importation -> import < · LITSTRING >, LITINT
importation -> import < · LITSTRING >, LITFLOAT
importation -> import < · LITSTRING >, LITSTRING
importation -> import < · LITSTRING >, LITBOOL
importation -> import < · LITSTRING >, null
importation -> import < · LITSTRING >, ++
importation -> import < · LITSTRING >, --
importation -> import < · LITSTRING >, break
importation -> import < · LITSTRING >, return
importation -> import < · LITSTRING >, delete
importation -> import < · LITSTRING >, while
importation -> import < · LITSTRING >, for
importation -> import < · LITSTRING >, if
importation -> import < · LITSTRING >, $
importation -> import < · LITSTRING >, import
***EndSet***
***EndState***
***State***
6
I_6
***Set***
namespaceusing -> using · ID ;, namespace
namespaceusing -> using · ID ;, {
namespaceusing -> using · ID ;, ID
namespaceusing -> using · ID ;, void
namespaceusing -> using · ID ;, bool
namespaceusing -> using · ID ;, int
namespaceusing -> using · ID ;, float
namespaceusing -> using · ID ;, string
namespaceusing -> using · ID ;, extern
namespaceusing -> using · ID ;, class
namespaceusing -> using · ID ;, (
namespaceusing -> using · ID ;, this
namespaceusing -> using · ID ;, new
namespaceusing -> using · ID ;, LITINT
namespaceusing -> using · ID ;, LITFLOAT
namespaceusing -> using · ID ;, LITSTRING
namespaceusing -> using · ID ;, LITBOOL
namespaceusing -> using · ID ;, null
namespaceusing -> using · ID ;, ++
namespaceusing -> using · ID ;, --
namespaceusing -> using · ID ;, break
namespaceusing -> using · ID ;, return
namespaceusing -> using · ID ;, delete
namespaceusing -> using · ID ;, while
namespaceusing -> using · ID ;, for
namespaceusing -> using · ID ;, if
namespaceusing -> using · ID ;, $
namespaceusing -> using · ID ;, using
***EndSet***
***EndState***
***State***
7
I_7
***Set***
importations -> importations importation ·, using
importations -> importations importation ·, namespace
importations -> importations importation ·, {
importations -> importations importation ·, ID
importations -> importations importation ·, void
importations -> importations importation ·, bool
importations -> importations importation ·, int
importations -> importations importation ·, float
importations -> importations importation ·, string
importations -> importations importation ·, extern
importations -> importations importation ·, class
importations -> importations importation ·, (
importations -> importations importation ·, this
importations -> importations importation ·, new
importations -> importations importation ·, LITINT
importations -> importations importation ·, LITFLOAT
importations -> importations importation ·, LITSTRING
importations -> importations importation ·, LITBOOL
importations -> importations importation ·, null
importations -> importations importation ·, ++
importations -> importations importation ·, --
importations -> importations importation ·, break
importations -> importations importation ·, return
importations -> importations importation ·, delete
importations -> importations importation ·, while
importations -> importations importation ·, for
importations -> importations importation ·, if
importations -> importations importation ·, $
importations -> importations importation ·, import
***EndSet***
***EndState***
***State***
8
I_8
***Set***
S -> importations namespaceusings · statements, $
namespaceusings -> namespaceusings · namespaceusing, namespace
namespaceusings -> namespaceusings · namespaceusing, {
namespaceusings -> namespaceusings · namespaceusing, ID
namespaceusings -> namespaceusings · namespaceusing, void
namespaceusings -> namespaceusings · namespaceusing, bool
namespaceusings -> namespaceusings · namespaceusing, int
namespaceusings -> namespaceusings · namespaceusing, float
namespaceusings -> namespaceusings · namespaceusing, string
namespaceusings -> namespaceusings · namespaceusing, extern
namespaceusings -> namespaceusings · namespaceusing, class
namespaceusings -> namespaceusings · namespaceusing, (
namespaceusings -> namespaceusings · namespaceusing, this
namespaceusings -> namespaceusings · namespaceusing, new
namespaceusings -> namespaceusings · namespaceusing, LITINT
namespaceusings -> namespaceusings · namespaceusing, LITFLOAT
namespaceusings -> namespaceusings · namespaceusing, LITSTRING
namespaceusings -> namespaceusings · namespaceusing, LITBOOL
namespaceusings -> namespaceusings · namespaceusing, null
namespaceusings -> namespaceusings · namespaceusing, ++
namespaceusings -> namespaceusings · namespaceusing, --
namespaceusings -> namespaceusings · namespaceusing, break
namespaceusings -> namespaceusings · namespaceusing, return
namespaceusings -> namespaceusings · namespaceusing, delete
namespaceusings -> namespaceusings · namespaceusing, while
namespaceusings -> namespaceusings · namespaceusing, for
namespaceusings -> namespaceusings · namespaceusing, if
namespaceusings -> namespaceusings · namespaceusing, $
namespaceusings -> namespaceusings · namespaceusing, using
statements -> · statements stmt, $
statements -> · stmt, $
statements -> ·, $
namespaceusing -> · using ID ;, namespace
namespaceusing -> · using ID ;, {
namespaceusing -> · using ID ;, ID
namespaceusing -> · using ID ;, void
namespaceusing -> · using ID ;, bool
namespaceusing -> · using ID ;, int
namespaceusing -> · using ID ;, float
namespaceusing -> · using ID ;, string
namespaceusing -> · using ID ;, extern
namespaceusing -> · using ID ;, class
namespaceusing -> · using ID ;, (
namespaceusing -> · using ID ;, this
namespaceusing -> · using ID ;, new
namespaceusing -> · using ID ;, LITINT
namespaceusing -> · using ID ;, LITFLOAT
namespaceusing -> · using ID ;, LITSTRING
namespaceusing -> · using ID ;, LITBOOL
namespaceusing -> · using ID ;, null
namespaceusing -> · using ID ;, ++
namespaceusing -> · using ID ;, --
namespaceusing -> · using ID ;, break
namespaceusing -> · using ID ;, return
namespaceusing -> · using ID ;, delete
namespaceusing -> · using ID ;, while
namespaceusing -> · using ID ;, for
namespaceusing -> · using ID ;, if
namespaceusing -> · using ID ;, $
namespaceusing -> · using ID ;, using
statements -> · statements stmt, namespace
statements -> · statements stmt, {
statements -> · statements stmt, ID
statements -> · statements stmt, void
statements -> · statements stmt, bool
statements -> · statements stmt, int
statements -> · statements stmt, float
statements -> · statements stmt, string
statements -> · statements stmt, extern
statements -> · statements stmt, class
statements -> · statements stmt, (
statements -> · statements stmt, this
statements -> · statements stmt, new
statements -> · statements stmt, LITINT
statements -> · statements stmt, LITFLOAT
statements -> · statements stmt, LITSTRING
statements -> · statements stmt, LITBOOL
statements -> · statements stmt, null
statements -> · statements stmt, ++
statements -> · statements stmt, --
statements -> · statements stmt, break
statements -> · statements stmt, return
statements -> · statements stmt, delete
statements -> · statements stmt, while
statements -> · statements stmt, for
statements -> · statements stmt, if
statements -> · stmt, namespace
statements -> · stmt, {
statements -> · stmt, ID
statements -> · stmt, void
statements -> · stmt, bool
statements -> · stmt, int
statements -> · stmt, float
statements -> · stmt, string
statements -> · stmt, extern
statements -> · stmt, class
statements -> · stmt, (
statements -> · stmt, this
statements -> · stmt, new
statements -> · stmt, LITINT
statements -> · stmt, LITFLOAT
statements -> · stmt, LITSTRING
statements -> · stmt, LITBOOL
statements -> · stmt, null
statements -> · stmt, ++
statements -> · stmt, --
statements -> · stmt, break
statements -> · stmt, return
statements -> · stmt, delete
statements -> · stmt, while
statements -> · stmt, for
statements -> · stmt, if
statements -> ·, namespace
statements -> ·, {
statements -> ·, ID
statements -> ·, void
statements -> ·, bool
statements -> ·, int
statements -> ·, float
statements -> ·, string
statements -> ·, extern
statements -> ·, class
statements -> ·, (
statements -> ·, this
statements -> ·, new
statements -> ·, LITINT
statements -> ·, LITFLOAT
statements -> ·, LITSTRING
statements -> ·, LITBOOL
statements -> ·, null
statements -> ·, ++
statements -> ·, --
statements -> ·, break
statements -> ·, return
statements -> ·, delete
statements -> ·, while
statements -> ·, for
statements -> ·, if
stmt -> · namespaceblock, $
stmt -> · statementblock, $
stmt -> · declstmt, $
stmt -> · stmtexpr ;, $
stmt -> · break ;, $
stmt -> · return expr ;, $
stmt -> · return ;, $
stmt -> · delete expr ;, $
stmt -> · while ( expr ) stmt, $
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, $
stmt -> · if ( expr ) stmt elifclauselist elseclause, $
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, $
statementblock -> · { statements }, $
declstmt -> · type ID = expr ;, $
declstmt -> · type ID ( params ) { statements }, $
declstmt -> · extern type ID ( params ) ;, $
declstmt -> · class ID inherit { declstatements }, $
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · string, ID
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
***EndSet***
***EndState***
***State***
9
I_9
***Set***
namespaceusings -> namespaceusing ·, namespace
namespaceusings -> namespaceusing ·, {
namespaceusings -> namespaceusing ·, ID
namespaceusings -> namespaceusing ·, void
namespaceusings -> namespaceusing ·, bool
namespaceusings -> namespaceusing ·, int
namespaceusings -> namespaceusing ·, float
namespaceusings -> namespaceusing ·, string
namespaceusings -> namespaceusing ·, extern
namespaceusings -> namespaceusing ·, class
namespaceusings -> namespaceusing ·, (
namespaceusings -> namespaceusing ·, this
namespaceusings -> namespaceusing ·, new
namespaceusings -> namespaceusing ·, LITINT
namespaceusings -> namespaceusing ·, LITFLOAT
namespaceusings -> namespaceusing ·, LITSTRING
namespaceusings -> namespaceusing ·, LITBOOL
namespaceusings -> namespaceusing ·, null
namespaceusings -> namespaceusing ·, ++
namespaceusings -> namespaceusing ·, --
namespaceusings -> namespaceusing ·, break
namespaceusings -> namespaceusing ·, return
namespaceusings -> namespaceusing ·, delete
namespaceusings -> namespaceusing ·, while
namespaceusings -> namespaceusing ·, for
namespaceusings -> namespaceusing ·, if
namespaceusings -> namespaceusing ·, $
namespaceusings -> namespaceusing ·, using
***EndSet***
***EndState***
***State***
10
I_10
***Set***
importation -> import < LITSTRING · >, using
importation -> import < LITSTRING · >, namespace
importation -> import < LITSTRING · >, {
importation -> import < LITSTRING · >, ID
importation -> import < LITSTRING · >, void
importation -> import < LITSTRING · >, bool
importation -> import < LITSTRING · >, int
importation -> import < LITSTRING · >, float
importation -> import < LITSTRING · >, string
importation -> import < LITSTRING · >, extern
importation -> import < LITSTRING · >, class
importation -> import < LITSTRING · >, (
importation -> import < LITSTRING · >, this
importation -> import < LITSTRING · >, new
importation -> import < LITSTRING · >, LITINT
importation -> import < LITSTRING · >, LITFLOAT
importation -> import < LITSTRING · >, LITSTRING
importation -> import < LITSTRING · >, LITBOOL
importation -> import < LITSTRING · >, null
importation -> import < LITSTRING · >, ++
importation -> import < LITSTRING · >, --
importation -> import < LITSTRING · >, break
importation -> import < LITSTRING · >, return
importation -> import < LITSTRING · >, delete
importation -> import < LITSTRING · >, while
importation -> import < LITSTRING · >, for
importation -> import < LITSTRING · >, if
importation -> import < LITSTRING · >, $
importation -> import < LITSTRING · >, import
***EndSet***
***EndState***
***State***
11
I_11
***Set***
namespaceusing -> using ID · ;, namespace
namespaceusing -> using ID · ;, {
namespaceusing -> using ID · ;, ID
namespaceusing -> using ID · ;, void
namespaceusing -> using ID · ;, bool
namespaceusing -> using ID · ;, int
namespaceusing -> using ID · ;, float
namespaceusing -> using ID · ;, string
namespaceusing -> using ID · ;, extern
namespaceusing -> using ID · ;, class
namespaceusing -> using ID · ;, (
namespaceusing -> using ID · ;, this
namespaceusing -> using ID · ;, new
namespaceusing -> using ID · ;, LITINT
namespaceusing -> using ID · ;, LITFLOAT
namespaceusing -> using ID · ;, LITSTRING
namespaceusing -> using ID · ;, LITBOOL
namespaceusing -> using ID · ;, null
namespaceusing -> using ID · ;, ++
namespaceusing -> using ID · ;, --
namespaceusing -> using ID · ;, break
namespaceusing -> using ID · ;, return
namespaceusing -> using ID · ;, delete
namespaceusing -> using ID · ;, while
namespaceusing -> using ID · ;, for
namespaceusing -> using ID · ;, if
namespaceusing -> using ID · ;, $
namespaceusing -> using ID · ;, using
***EndSet***
***EndState***
***State***
12
I_12_146_239_728_1024_1143
***Set***
namespaceblock -> namespace · ID { statements }, $
namespaceblock -> namespace · ID { statements }, namespace
namespaceblock -> namespace · ID { statements }, {
namespaceblock -> namespace · ID { statements }, ID
namespaceblock -> namespace · ID { statements }, void
namespaceblock -> namespace · ID { statements }, bool
namespaceblock -> namespace · ID { statements }, int
namespaceblock -> namespace · ID { statements }, float
namespaceblock -> namespace · ID { statements }, string
namespaceblock -> namespace · ID { statements }, extern
namespaceblock -> namespace · ID { statements }, class
namespaceblock -> namespace · ID { statements }, (
namespaceblock -> namespace · ID { statements }, this
namespaceblock -> namespace · ID { statements }, new
namespaceblock -> namespace · ID { statements }, LITINT
namespaceblock -> namespace · ID { statements }, LITFLOAT
namespaceblock -> namespace · ID { statements }, LITSTRING
namespaceblock -> namespace · ID { statements }, LITBOOL
namespaceblock -> namespace · ID { statements }, null
namespaceblock -> namespace · ID { statements }, ++
namespaceblock -> namespace · ID { statements }, --
namespaceblock -> namespace · ID { statements }, break
namespaceblock -> namespace · ID { statements }, return
namespaceblock -> namespace · ID { statements }, delete
namespaceblock -> namespace · ID { statements }, while
namespaceblock -> namespace · ID { statements }, for
namespaceblock -> namespace · ID { statements }, if
namespaceblock -> namespace · ID { statements }, }
namespaceblock -> namespace · ID { statements }, &&
namespaceblock -> namespace · ID { statements }, ||
namespaceblock -> namespace · ID { statements }, +
namespaceblock -> namespace · ID { statements }, -
namespaceblock -> namespace · ID { statements }, *
namespaceblock -> namespace · ID { statements }, /
namespaceblock -> namespace · ID { statements }, !
namespaceblock -> namespace · ID { statements }, else
***EndSet***
***EndState***
***State***
13
I_13_147_240_653_729_1025_1144
***Set***
declstmt -> extern · type ID ( params ) ;, $
declstmt -> extern · type ID ( params ) ;, namespace
declstmt -> extern · type ID ( params ) ;, {
declstmt -> extern · type ID ( params ) ;, ID
declstmt -> extern · type ID ( params ) ;, void
declstmt -> extern · type ID ( params ) ;, bool
declstmt -> extern · type ID ( params ) ;, int
declstmt -> extern · type ID ( params ) ;, float
declstmt -> extern · type ID ( params ) ;, string
declstmt -> extern · type ID ( params ) ;, extern
declstmt -> extern · type ID ( params ) ;, class
declstmt -> extern · type ID ( params ) ;, (
declstmt -> extern · type ID ( params ) ;, this
declstmt -> extern · type ID ( params ) ;, new
declstmt -> extern · type ID ( params ) ;, LITINT
declstmt -> extern · type ID ( params ) ;, LITFLOAT
declstmt -> extern · type ID ( params ) ;, LITSTRING
declstmt -> extern · type ID ( params ) ;, LITBOOL
declstmt -> extern · type ID ( params ) ;, null
declstmt -> extern · type ID ( params ) ;, ++
declstmt -> extern · type ID ( params ) ;, --
declstmt -> extern · type ID ( params ) ;, break
declstmt -> extern · type ID ( params ) ;, return
declstmt -> extern · type ID ( params ) ;, delete
declstmt -> extern · type ID ( params ) ;, while
declstmt -> extern · type ID ( params ) ;, for
declstmt -> extern · type ID ( params ) ;, if
type -> · arrtype, ID
type -> · stype, ID
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · string, ID
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · string, [
declstmt -> extern · type ID ( params ) ;, }
declstmt -> extern · type ID ( params ) ;, &&
declstmt -> extern · type ID ( params ) ;, ||
declstmt -> extern · type ID ( params ) ;, +
declstmt -> extern · type ID ( params ) ;, -
declstmt -> extern · type ID ( params ) ;, *
declstmt -> extern · type ID ( params ) ;, /
declstmt -> extern · type ID ( params ) ;, !
declstmt -> extern · type ID ( params ) ;, else
***EndSet***
***EndState***
***State***
14
I_14_148_241_654_730_1026_1145
***Set***
declstmt -> class · ID inherit { declstatements }, $
declstmt -> class · ID inherit { declstatements }, namespace
declstmt -> class · ID inherit { declstatements }, {
declstmt -> class · ID inherit { declstatements }, ID
declstmt -> class · ID inherit { declstatements }, void
declstmt -> class · ID inherit { declstatements }, bool
declstmt -> class · ID inherit { declstatements }, int
declstmt -> class · ID inherit { declstatements }, float
declstmt -> class · ID inherit { declstatements }, string
declstmt -> class · ID inherit { declstatements }, extern
declstmt -> class · ID inherit { declstatements }, class
declstmt -> class · ID inherit { declstatements }, (
declstmt -> class · ID inherit { declstatements }, this
declstmt -> class · ID inherit { declstatements }, new
declstmt -> class · ID inherit { declstatements }, LITINT
declstmt -> class · ID inherit { declstatements }, LITFLOAT
declstmt -> class · ID inherit { declstatements }, LITSTRING
declstmt -> class · ID inherit { declstatements }, LITBOOL
declstmt -> class · ID inherit { declstatements }, null
declstmt -> class · ID inherit { declstatements }, ++
declstmt -> class · ID inherit { declstatements }, --
declstmt -> class · ID inherit { declstatements }, break
declstmt -> class · ID inherit { declstatements }, return
declstmt -> class · ID inherit { declstatements }, delete
declstmt -> class · ID inherit { declstatements }, while
declstmt -> class · ID inherit { declstatements }, for
declstmt -> class · ID inherit { declstatements }, if
declstmt -> class · ID inherit { declstatements }, }
declstmt -> class · ID inherit { declstatements }, &&
declstmt -> class · ID inherit { declstatements }, ||
declstmt -> class · ID inherit { declstatements }, +
declstmt -> class · ID inherit { declstatements }, -
declstmt -> class · ID inherit { declstatements }, *
declstmt -> class · ID inherit { declstatements }, /
declstmt -> class · ID inherit { declstatements }, !
declstmt -> class · ID inherit { declstatements }, else
***EndSet***
***EndState***
***State***
15
I_15_69_195
***Set***
primitive -> void ·, ID
primitive -> void ·, [
primitive -> void ·, )
***EndSet***
***EndState***
***State***
16
I_16_70_196
***Set***
primitive -> bool ·, ID
primitive -> bool ·, [
primitive -> bool ·, )
***EndSet***
***EndState***
***State***
17
I_17_71_197
***Set***
primitive -> int ·, ID
primitive -> int ·, [
primitive -> int ·, )
***EndSet***
***EndState***
***State***
18
I_18_72_198
***Set***
primitive -> float ·, ID
primitive -> float ·, [
primitive -> float ·, )
***EndSet***
***EndState***
***State***
19
I_19_73_199
***Set***
primitive -> string ·, ID
primitive -> string ·, [
primitive -> string ·, )
***EndSet***
***EndState***
***State***
20
I_20_79_115_314_346_408_439_499_530_815_846_911
***Set***
lit -> null ·, .
lit -> null ·, ;
lit -> null ·, &&
lit -> null ·, ||
lit -> null ·, >
lit -> null ·, <
lit -> null ·, >=
lit -> null ·, <=
lit -> null ·, ==
lit -> null ·, !=
lit -> null ·, +
lit -> null ·, -
lit -> null ·, *
lit -> null ·, /
lit -> null ·, )
lit -> null ·, ,
lit -> null ·, ]
***EndSet***
***EndState***
***State***
21
I_21_80_116_315_347_409_440_500_531_816_847_912_967
***Set***
newobj -> new · ID ( ), ;
newobj -> new · ID ( ), .
newarr -> new · stypeBracket, .
stypeBracket -> · idBracket, .
stypeBracket -> · primitiveBracket, .
idBracket -> · ID [ optidx ], .
primitiveBracket -> · primitive [ optidx ], .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · string, [
newarr -> new · stypeBracket, ;
newobj -> new · ID ( ), &&
newarr -> new · stypeBracket, &&
newobj -> new · ID ( ), ||
newarr -> new · stypeBracket, ||
newobj -> new · ID ( ), >
newarr -> new · stypeBracket, >
newobj -> new · ID ( ), <
newarr -> new · stypeBracket, <
newobj -> new · ID ( ), >=
newarr -> new · stypeBracket, >=
newobj -> new · ID ( ), <=
newarr -> new · stypeBracket, <=
newobj -> new · ID ( ), ==
newarr -> new · stypeBracket, ==
newobj -> new · ID ( ), !=
newarr -> new · stypeBracket, !=
newobj -> new · ID ( ), +
newarr -> new · stypeBracket, +
newobj -> new · ID ( ), -
newarr -> new · stypeBracket, -
newobj -> new · ID ( ), *
newarr -> new · stypeBracket, *
newobj -> new · ID ( ), /
newarr -> new · stypeBracket, /
stypeBracket -> · idBracket, ;
stypeBracket -> · primitiveBracket, ;
stypeBracket -> · idBracket, &&
stypeBracket -> · primitiveBracket, &&
stypeBracket -> · idBracket, ||
stypeBracket -> · primitiveBracket, ||
stypeBracket -> · idBracket, >
stypeBracket -> · primitiveBracket, >
stypeBracket -> · idBracket, <
stypeBracket -> · primitiveBracket, <
stypeBracket -> · idBracket, >=
stypeBracket -> · primitiveBracket, >=
stypeBracket -> · idBracket, <=
stypeBracket -> · primitiveBracket, <=
stypeBracket -> · idBracket, ==
stypeBracket -> · primitiveBracket, ==
stypeBracket -> · idBracket, !=
stypeBracket -> · primitiveBracket, !=
stypeBracket -> · idBracket, +
stypeBracket -> · primitiveBracket, +
stypeBracket -> · idBracket, -
stypeBracket -> · primitiveBracket, -
stypeBracket -> · idBracket, *
stypeBracket -> · primitiveBracket, *
stypeBracket -> · idBracket, /
stypeBracket -> · primitiveBracket, /
idBracket -> · ID [ optidx ], ;
primitiveBracket -> · primitive [ optidx ], ;
idBracket -> · ID [ optidx ], &&
primitiveBracket -> · primitive [ optidx ], &&
idBracket -> · ID [ optidx ], ||
primitiveBracket -> · primitive [ optidx ], ||
idBracket -> · ID [ optidx ], >
primitiveBracket -> · primitive [ optidx ], >
idBracket -> · ID [ optidx ], <
primitiveBracket -> · primitive [ optidx ], <
idBracket -> · ID [ optidx ], >=
primitiveBracket -> · primitive [ optidx ], >=
idBracket -> · ID [ optidx ], <=
primitiveBracket -> · primitive [ optidx ], <=
idBracket -> · ID [ optidx ], ==
primitiveBracket -> · primitive [ optidx ], ==
idBracket -> · ID [ optidx ], !=
primitiveBracket -> · primitive [ optidx ], !=
idBracket -> · ID [ optidx ], +
primitiveBracket -> · primitive [ optidx ], +
idBracket -> · ID [ optidx ], -
primitiveBracket -> · primitive [ optidx ], -
idBracket -> · ID [ optidx ], *
primitiveBracket -> · primitive [ optidx ], *
idBracket -> · ID [ optidx ], /
primitiveBracket -> · primitive [ optidx ], /
newobj -> new · ID ( ), )
newarr -> new · stypeBracket, )
stypeBracket -> · idBracket, )
stypeBracket -> · primitiveBracket, )
idBracket -> · ID [ optidx ], )
primitiveBracket -> · primitive [ optidx ], )
newobj -> new · ID ( ), ,
newarr -> new · stypeBracket, ,
stypeBracket -> · idBracket, ,
stypeBracket -> · primitiveBracket, ,
idBracket -> · ID [ optidx ], ,
primitiveBracket -> · primitive [ optidx ], ,
newobj -> new · ID ( ), ]
newarr -> new · stypeBracket, ]
stypeBracket -> · idBracket, ]
stypeBracket -> · primitiveBracket, ]
idBracket -> · ID [ optidx ], ]
primitiveBracket -> · primitive [ optidx ], ]
***EndSet***
***EndState***
***State***
22
I_22_149_242_731_1027_1146
***Set***
stmt -> delete · expr ;, $
stmt -> delete · expr ;, namespace
stmt -> delete · expr ;, {
stmt -> delete · expr ;, ID
stmt -> delete · expr ;, void
stmt -> delete · expr ;, bool
stmt -> delete · expr ;, int
stmt -> delete · expr ;, float
stmt -> delete · expr ;, string
stmt -> delete · expr ;, extern
stmt -> delete · expr ;, class
stmt -> delete · expr ;, (
stmt -> delete · expr ;, this
stmt -> delete · expr ;, new
stmt -> delete · expr ;, LITINT
stmt -> delete · expr ;, LITFLOAT
stmt -> delete · expr ;, LITSTRING
stmt -> delete · expr ;, LITBOOL
stmt -> delete · expr ;, null
stmt -> delete · expr ;, ++
stmt -> delete · expr ;, --
stmt -> delete · expr ;, break
stmt -> delete · expr ;, return
stmt -> delete · expr ;, delete
stmt -> delete · expr ;, while
stmt -> delete · expr ;, for
stmt -> delete · expr ;, if
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITSTRING, ;
lit -> · LITBOOL, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITSTRING, &&
lit -> · LITBOOL, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITSTRING, ||
lit -> · LITBOOL, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITSTRING, >
lit -> · LITBOOL, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITSTRING, <
lit -> · LITBOOL, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITSTRING, >=
lit -> · LITBOOL, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITSTRING, <=
lit -> · LITBOOL, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITSTRING, ==
lit -> · LITBOOL, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITSTRING, !=
lit -> · LITBOOL, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITSTRING, +
lit -> · LITBOOL, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITSTRING, -
lit -> · LITBOOL, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITSTRING, *
lit -> · LITBOOL, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITSTRING, /
lit -> · LITBOOL, /
lit -> · null, /
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
stmt -> delete · expr ;, }
stmt -> delete · expr ;, &&
stmt -> delete · expr ;, ||
stmt -> delete · expr ;, +
stmt -> delete · expr ;, -
stmt -> delete · expr ;, *
stmt -> delete · expr ;, /
stmt -> delete · expr ;, !
stmt -> delete · expr ;, else
***EndSet***
***EndState***
***State***
23
I_23_150_243_732_1028_1147
***Set***
stmt -> while · ( expr ) stmt, $
stmt -> while · ( expr ) stmt, namespace
stmt -> while · ( expr ) stmt, {
stmt -> while · ( expr ) stmt, ID
stmt -> while · ( expr ) stmt, void
stmt -> while · ( expr ) stmt, bool
stmt -> while · ( expr ) stmt, int
stmt -> while · ( expr ) stmt, float
stmt -> while · ( expr ) stmt, string
stmt -> while · ( expr ) stmt, extern
stmt -> while · ( expr ) stmt, class
stmt -> while · ( expr ) stmt, (
stmt -> while · ( expr ) stmt, this
stmt -> while · ( expr ) stmt, new
stmt -> while · ( expr ) stmt, LITINT
stmt -> while · ( expr ) stmt, LITFLOAT
stmt -> while · ( expr ) stmt, LITSTRING
stmt -> while · ( expr ) stmt, LITBOOL
stmt -> while · ( expr ) stmt, null
stmt -> while · ( expr ) stmt, ++
stmt -> while · ( expr ) stmt, --
stmt -> while · ( expr ) stmt, break
stmt -> while · ( expr ) stmt, return
stmt -> while · ( expr ) stmt, delete
stmt -> while · ( expr ) stmt, while
stmt -> while · ( expr ) stmt, for
stmt -> while · ( expr ) stmt, if
stmt -> while · ( expr ) stmt, }
stmt -> while · ( expr ) stmt, &&
stmt -> while · ( expr ) stmt, ||
stmt -> while · ( expr ) stmt, +
stmt -> while · ( expr ) stmt, -
stmt -> while · ( expr ) stmt, *
stmt -> while · ( expr ) stmt, /
stmt -> while · ( expr ) stmt, !
stmt -> while · ( expr ) stmt, else
***EndSet***
***EndState***
***State***
24
I_24_151_244_733_1029_1148
***Set***
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, $
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, &&
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, ||
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, +
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, -
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, *
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, /
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, !
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, else
***EndSet***
***EndState***
***State***
25
I_25_152_245_734_1030_1149
***Set***
stmt -> if · ( expr ) stmt elifclauselist elseclause, $
stmt -> if · ( expr ) stmt elifclauselist elseclause, namespace
stmt -> if · ( expr ) stmt elifclauselist elseclause, {
stmt -> if · ( expr ) stmt elifclauselist elseclause, ID
stmt -> if · ( expr ) stmt elifclauselist elseclause, void
stmt -> if · ( expr ) stmt elifclauselist elseclause, bool
stmt -> if · ( expr ) stmt elifclauselist elseclause, int
stmt -> if · ( expr ) stmt elifclauselist elseclause, float
stmt -> if · ( expr ) stmt elifclauselist elseclause, string
stmt -> if · ( expr ) stmt elifclauselist elseclause, extern
stmt -> if · ( expr ) stmt elifclauselist elseclause, class
stmt -> if · ( expr ) stmt elifclauselist elseclause, (
stmt -> if · ( expr ) stmt elifclauselist elseclause, this
stmt -> if · ( expr ) stmt elifclauselist elseclause, new
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> if · ( expr ) stmt elifclauselist elseclause, null
stmt -> if · ( expr ) stmt elifclauselist elseclause, ++
stmt -> if · ( expr ) stmt elifclauselist elseclause, --
stmt -> if · ( expr ) stmt elifclauselist elseclause, break
stmt -> if · ( expr ) stmt elifclauselist elseclause, return
stmt -> if · ( expr ) stmt elifclauselist elseclause, delete
stmt -> if · ( expr ) stmt elifclauselist elseclause, while
stmt -> if · ( expr ) stmt elifclauselist elseclause, for
stmt -> if · ( expr ) stmt elifclauselist elseclause, if
stmt -> if · ( expr ) stmt elifclauselist elseclause, }
stmt -> if · ( expr ) stmt elifclauselist elseclause, &&
stmt -> if · ( expr ) stmt elifclauselist elseclause, ||
stmt -> if · ( expr ) stmt elifclauselist elseclause, +
stmt -> if · ( expr ) stmt elifclauselist elseclause, -
stmt -> if · ( expr ) stmt elifclauselist elseclause, *
stmt -> if · ( expr ) stmt elifclauselist elseclause, /
stmt -> if · ( expr ) stmt elifclauselist elseclause, !
stmt -> if · ( expr ) stmt elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
26
I_26_153_246_735_1031_1150
***Set***
stmt -> break · ;, $
stmt -> break · ;, namespace
stmt -> break · ;, {
stmt -> break · ;, ID
stmt -> break · ;, void
stmt -> break · ;, bool
stmt -> break · ;, int
stmt -> break · ;, float
stmt -> break · ;, string
stmt -> break · ;, extern
stmt -> break · ;, class
stmt -> break · ;, (
stmt -> break · ;, this
stmt -> break · ;, new
stmt -> break · ;, LITINT
stmt -> break · ;, LITFLOAT
stmt -> break · ;, LITSTRING
stmt -> break · ;, LITBOOL
stmt -> break · ;, null
stmt -> break · ;, ++
stmt -> break · ;, --
stmt -> break · ;, break
stmt -> break · ;, return
stmt -> break · ;, delete
stmt -> break · ;, while
stmt -> break · ;, for
stmt -> break · ;, if
stmt -> break · ;, }
stmt -> break · ;, &&
stmt -> break · ;, ||
stmt -> break · ;, +
stmt -> break · ;, -
stmt -> break · ;, *
stmt -> break · ;, /
stmt -> break · ;, !
stmt -> break · ;, else
***EndSet***
***EndState***
***State***
27
I_27_154_247_736_1032_1151
***Set***
stmt -> return · expr ;, $
stmt -> return · ;, $
stmt -> return · expr ;, namespace
stmt -> return · ;, namespace
stmt -> return · expr ;, {
stmt -> return · ;, {
stmt -> return · expr ;, ID
stmt -> return · ;, ID
stmt -> return · expr ;, void
stmt -> return · ;, void
stmt -> return · expr ;, bool
stmt -> return · ;, bool
stmt -> return · expr ;, int
stmt -> return · ;, int
stmt -> return · expr ;, float
stmt -> return · ;, float
stmt -> return · expr ;, string
stmt -> return · ;, string
stmt -> return · expr ;, extern
stmt -> return · ;, extern
stmt -> return · expr ;, class
stmt -> return · ;, class
stmt -> return · expr ;, (
stmt -> return · ;, (
stmt -> return · expr ;, this
stmt -> return · ;, this
stmt -> return · expr ;, new
stmt -> return · ;, new
stmt -> return · expr ;, LITINT
stmt -> return · ;, LITINT
stmt -> return · expr ;, LITFLOAT
stmt -> return · ;, LITFLOAT
stmt -> return · expr ;, LITSTRING
stmt -> return · ;, LITSTRING
stmt -> return · expr ;, LITBOOL
stmt -> return · ;, LITBOOL
stmt -> return · expr ;, null
stmt -> return · ;, null
stmt -> return · expr ;, ++
stmt -> return · ;, ++
stmt -> return · expr ;, --
stmt -> return · ;, --
stmt -> return · expr ;, break
stmt -> return · ;, break
stmt -> return · expr ;, return
stmt -> return · ;, return
stmt -> return · expr ;, delete
stmt -> return · ;, delete
stmt -> return · expr ;, while
stmt -> return · ;, while
stmt -> return · expr ;, for
stmt -> return · ;, for
stmt -> return · expr ;, if
stmt -> return · ;, if
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITSTRING, ;
lit -> · LITBOOL, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITSTRING, &&
lit -> · LITBOOL, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITSTRING, ||
lit -> · LITBOOL, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITSTRING, >
lit -> · LITBOOL, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITSTRING, <
lit -> · LITBOOL, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITSTRING, >=
lit -> · LITBOOL, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITSTRING, <=
lit -> · LITBOOL, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITSTRING, ==
lit -> · LITBOOL, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITSTRING, !=
lit -> · LITBOOL, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITSTRING, +
lit -> · LITBOOL, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITSTRING, -
lit -> · LITBOOL, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITSTRING, *
lit -> · LITBOOL, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITSTRING, /
lit -> · LITBOOL, /
lit -> · null, /
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
stmt -> return · expr ;, }
stmt -> return · ;, }
stmt -> return · expr ;, &&
stmt -> return · expr ;, ||
stmt -> return · expr ;, +
stmt -> return · expr ;, -
stmt -> return · expr ;, *
stmt -> return · expr ;, /
stmt -> return · expr ;, !
stmt -> return · ;, &&
stmt -> return · ;, ||
stmt -> return · ;, +
stmt -> return · ;, -
stmt -> return · ;, *
stmt -> return · ;, /
stmt -> return · ;, !
stmt -> return · expr ;, else
stmt -> return · ;, else
***EndSet***
***EndState***
***State***
28
I_28_81_117_316_348_410_441_501_532_817_848_913
***Set***
primary -> this ·, .
primary -> this ·, ;
primary -> this ·, &&
primary -> this ·, ||
primary -> this ·, >
primary -> this ·, <
primary -> this ·, >=
primary -> this ·, <=
primary -> this ·, ==
primary -> this ·, !=
primary -> this ·, +
primary -> this ·, -
primary -> this ·, *
primary -> this ·, /
primary -> this ·, )
primary -> this ·, ,
primary -> this ·, ]
***EndSet***
***EndState***
***State***
29
I_29
***Set***
primary -> ( · expr ), .
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITSTRING, )
lit -> · LITBOOL, )
lit -> · null, )
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITSTRING, &&
lit -> · LITBOOL, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITSTRING, ||
lit -> · LITBOOL, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], )
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITSTRING, >
lit -> · LITBOOL, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITSTRING, <
lit -> · LITBOOL, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITSTRING, >=
lit -> · LITBOOL, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITSTRING, <=
lit -> · LITBOOL, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITSTRING, ==
lit -> · LITBOOL, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITSTRING, !=
lit -> · LITBOOL, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITSTRING, +
lit -> · LITBOOL, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITSTRING, -
lit -> · LITBOOL, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITSTRING, *
lit -> · LITBOOL, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITSTRING, /
lit -> · LITBOOL, /
lit -> · null, /
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
***EndSet***
***EndState***
***State***
30
I_30_155_248_737_1033_1152
***Set***
statementblock -> { · statements }, $
statementblock -> { · statements }, namespace
statementblock -> { · statements }, {
statementblock -> { · statements }, ID
statementblock -> { · statements }, void
statementblock -> { · statements }, bool
statementblock -> { · statements }, int
statementblock -> { · statements }, float
statementblock -> { · statements }, string
statementblock -> { · statements }, extern
statementblock -> { · statements }, class
statementblock -> { · statements }, (
statementblock -> { · statements }, this
statementblock -> { · statements }, new
statementblock -> { · statements }, LITINT
statementblock -> { · statements }, LITFLOAT
statementblock -> { · statements }, LITSTRING
statementblock -> { · statements }, LITBOOL
statementblock -> { · statements }, null
statementblock -> { · statements }, ++
statementblock -> { · statements }, --
statementblock -> { · statements }, break
statementblock -> { · statements }, return
statementblock -> { · statements }, delete
statementblock -> { · statements }, while
statementblock -> { · statements }, for
statementblock -> { · statements }, if
statements -> · statements stmt, }
statements -> · stmt, }
statements -> ·, }
statements -> · statements stmt, namespace
statements -> · statements stmt, {
statements -> · statements stmt, ID
statements -> · statements stmt, void
statements -> · statements stmt, bool
statements -> · statements stmt, int
statements -> · statements stmt, float
statements -> · statements stmt, string
statements -> · statements stmt, extern
statements -> · statements stmt, class
statements -> · statements stmt, (
statements -> · statements stmt, this
statements -> · statements stmt, new
statements -> · statements stmt, LITINT
statements -> · statements stmt, LITFLOAT
statements -> · statements stmt, LITSTRING
statements -> · statements stmt, LITBOOL
statements -> · statements stmt, null
statements -> · statements stmt, ++
statements -> · statements stmt, --
statements -> · statements stmt, break
statements -> · statements stmt, return
statements -> · statements stmt, delete
statements -> · statements stmt, while
statements -> · statements stmt, for
statements -> · statements stmt, if
statements -> · stmt, namespace
statements -> · stmt, {
statements -> · stmt, ID
statements -> · stmt, void
statements -> · stmt, bool
statements -> · stmt, int
statements -> · stmt, float
statements -> · stmt, string
statements -> · stmt, extern
statements -> · stmt, class
statements -> · stmt, (
statements -> · stmt, this
statements -> · stmt, new
statements -> · stmt, LITINT
statements -> · stmt, LITFLOAT
statements -> · stmt, LITSTRING
statements -> · stmt, LITBOOL
statements -> · stmt, null
statements -> · stmt, ++
statements -> · stmt, --
statements -> · stmt, break
statements -> · stmt, return
statements -> · stmt, delete
statements -> · stmt, while
statements -> · stmt, for
statements -> · stmt, if
statements -> ·, namespace
statements -> ·, {
statements -> ·, ID
statements -> ·, void
statements -> ·, bool
statements -> ·, int
statements -> ·, float
statements -> ·, string
statements -> ·, extern
statements -> ·, class
statements -> ·, (
statements -> ·, this
statements -> ·, new
statements -> ·, LITINT
statements -> ·, LITFLOAT
statements -> ·, LITSTRING
statements -> ·, LITBOOL
statements -> ·, null
statements -> ·, ++
statements -> ·, --
statements -> ·, break
statements -> ·, return
statements -> ·, delete
statements -> ·, while
statements -> ·, for
statements -> ·, if
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · string, ID
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
statementblock -> { · statements }, }
statementblock -> { · statements }, &&
statementblock -> { · statements }, ||
statementblock -> { · statements }, +
statementblock -> { · statements }, -
statementblock -> { · statements }, *
statementblock -> { · statements }, /
statementblock -> { · statements }, !
statementblock -> { · statements }, else
***EndSet***
***EndState***
***State***
31
I_31_83_119_318_350_412_443_503_534_819_850_915_968
***Set***
incdec -> -- · ID, ;
incdec -> -- · ID, &&
incdec -> -- · ID, ||
incdec -> -- · ID, >
incdec -> -- · ID, <
incdec -> -- · ID, >=
incdec -> -- · ID, <=
incdec -> -- · ID, ==
incdec -> -- · ID, !=
incdec -> -- · ID, +
incdec -> -- · ID, -
incdec -> -- · ID, *
incdec -> -- · ID, /
incdec -> -- · ID, )
incdec -> -- · ID, ,
incdec -> -- · ID, ]
***EndSet***
***EndState***
***State***
32
I_32_84_120_319_351_413_444_504_535_820_851_916_969
***Set***
incdec -> ++ · ID, ;
incdec -> ++ · ID, &&
incdec -> ++ · ID, ||
incdec -> ++ · ID, >
incdec -> ++ · ID, <
incdec -> ++ · ID, >=
incdec -> ++ · ID, <=
incdec -> ++ · ID, ==
incdec -> ++ · ID, !=
incdec -> ++ · ID, +
incdec -> ++ · ID, -
incdec -> ++ · ID, *
incdec -> ++ · ID, /
incdec -> ++ · ID, )
incdec -> ++ · ID, ,
incdec -> ++ · ID, ]
***EndSet***
***EndState***
***State***
33
I_33_87_123_322_354_416_447_507_538_823_854_919
***Set***
lit -> LITBOOL ·, .
lit -> LITBOOL ·, ;
lit -> LITBOOL ·, &&
lit -> LITBOOL ·, ||
lit -> LITBOOL ·, >
lit -> LITBOOL ·, <
lit -> LITBOOL ·, >=
lit -> LITBOOL ·, <=
lit -> LITBOOL ·, ==
lit -> LITBOOL ·, !=
lit -> LITBOOL ·, +
lit -> LITBOOL ·, -
lit -> LITBOOL ·, *
lit -> LITBOOL ·, /
lit -> LITBOOL ·, )
lit -> LITBOOL ·, ,
lit -> LITBOOL ·, ]
***EndSet***
***EndState***
***State***
34
I_34_88_124_323_355_417_448_508_539_824_855_920
***Set***
lit -> LITINT ·, .
lit -> LITINT ·, ;
lit -> LITINT ·, &&
lit -> LITINT ·, ||
lit -> LITINT ·, >
lit -> LITINT ·, <
lit -> LITINT ·, >=
lit -> LITINT ·, <=
lit -> LITINT ·, ==
lit -> LITINT ·, !=
lit -> LITINT ·, +
lit -> LITINT ·, -
lit -> LITINT ·, *
lit -> LITINT ·, /
lit -> LITINT ·, )
lit -> LITINT ·, ,
lit -> LITINT ·, ]
***EndSet***
***EndState***
***State***
35
I_35_89_125_324_356_418_449_509_540_825_856_921
***Set***
lit -> LITFLOAT ·, .
lit -> LITFLOAT ·, ;
lit -> LITFLOAT ·, &&
lit -> LITFLOAT ·, ||
lit -> LITFLOAT ·, >
lit -> LITFLOAT ·, <
lit -> LITFLOAT ·, >=
lit -> LITFLOAT ·, <=
lit -> LITFLOAT ·, ==
lit -> LITFLOAT ·, !=
lit -> LITFLOAT ·, +
lit -> LITFLOAT ·, -
lit -> LITFLOAT ·, *
lit -> LITFLOAT ·, /
lit -> LITFLOAT ·, )
lit -> LITFLOAT ·, ,
lit -> LITFLOAT ·, ]
***EndSet***
***EndState***
***State***
36
I_36_90_126_325_357_419_450_510_541_826_857_922
***Set***
lit -> LITSTRING ·, .
lit -> LITSTRING ·, ;
lit -> LITSTRING ·, &&
lit -> LITSTRING ·, ||
lit -> LITSTRING ·, >
lit -> LITSTRING ·, <
lit -> LITSTRING ·, >=
lit -> LITSTRING ·, <=
lit -> LITSTRING ·, ==
lit -> LITSTRING ·, !=
lit -> LITSTRING ·, +
lit -> LITSTRING ·, -
lit -> LITSTRING ·, *
lit -> LITSTRING ·, /
lit -> LITSTRING ·, )
lit -> LITSTRING ·, ,
lit -> LITSTRING ·, ]
***EndSet***
***EndState***
***State***
37
I_37_200
***Set***
call -> ID · ( args ), ;
incdec -> ID · ++, ;
incdec -> ID · --, ;
stype -> ID ·, ID
lvalue -> ID ·, =
lvalue -> ID ·, +=
lvalue -> ID ·, -=
lvalue -> ID ·, *=
lvalue -> ID ·, /=
lvalue -> ID ·, %=
primary -> ID ·, .
idBracket -> ID · [ optidx ], ID
idBracket -> ID · [ optidx ], =
idBracket -> ID · [ optidx ], +=
idBracket -> ID · [ optidx ], -=
idBracket -> ID · [ optidx ], *=
idBracket -> ID · [ optidx ], /=
idBracket -> ID · [ optidx ], %=
call -> ID · ( args ), .
idBracket -> ID · [ optidx ], .
stype -> ID ·, )
idBracket -> ID · [ optidx ], )
incdec -> ID · ++, )
incdec -> ID · --, )
primary -> ID ·, )
incdec -> ID · ++, &&
incdec -> ID · --, &&
primary -> ID ·, &&
incdec -> ID · ++, ||
incdec -> ID · --, ||
primary -> ID ·, ||
call -> ID · ( args ), )
call -> ID · ( args ), &&
call -> ID · ( args ), ||
incdec -> ID · ++, >
incdec -> ID · --, >
primary -> ID ·, >
incdec -> ID · ++, <
incdec -> ID · --, <
primary -> ID ·, <
incdec -> ID · ++, >=
incdec -> ID · --, >=
primary -> ID ·, >=
incdec -> ID · ++, <=
incdec -> ID · --, <=
primary -> ID ·, <=
incdec -> ID · ++, ==
incdec -> ID · --, ==
primary -> ID ·, ==
incdec -> ID · ++, !=
incdec -> ID · --, !=
primary -> ID ·, !=
incdec -> ID · ++, +
incdec -> ID · --, +
primary -> ID ·, +
incdec -> ID · ++, -
incdec -> ID · --, -
primary -> ID ·, -
incdec -> ID · ++, *
incdec -> ID · --, *
primary -> ID ·, *
incdec -> ID · ++, /
incdec -> ID · --, /
primary -> ID ·, /
idBracket -> ID · [ optidx ], &&
idBracket -> ID · [ optidx ], ||
call -> ID · ( args ), >
call -> ID · ( args ), <
call -> ID · ( args ), >=
call -> ID · ( args ), <=
call -> ID · ( args ), ==
call -> ID · ( args ), !=
call -> ID · ( args ), +
call -> ID · ( args ), -
call -> ID · ( args ), *
call -> ID · ( args ), /
idBracket -> ID · [ optidx ], >
idBracket -> ID · [ optidx ], <
idBracket -> ID · [ optidx ], >=
idBracket -> ID · [ optidx ], <=
idBracket -> ID · [ optidx ], ==
idBracket -> ID · [ optidx ], !=
idBracket -> ID · [ optidx ], +
idBracket -> ID · [ optidx ], -
idBracket -> ID · [ optidx ], *
idBracket -> ID · [ optidx ], /
***EndSet***
***EndState***
***State***
38
I_38
***Set***
namespaceusings -> namespaceusings namespaceusing ·, namespace
namespaceusings -> namespaceusings namespaceusing ·, {
namespaceusings -> namespaceusings namespaceusing ·, ID
namespaceusings -> namespaceusings namespaceusing ·, void
namespaceusings -> namespaceusings namespaceusing ·, bool
namespaceusings -> namespaceusings namespaceusing ·, int
namespaceusings -> namespaceusings namespaceusing ·, float
namespaceusings -> namespaceusings namespaceusing ·, string
namespaceusings -> namespaceusings namespaceusing ·, extern
namespaceusings -> namespaceusings namespaceusing ·, class
namespaceusings -> namespaceusings namespaceusing ·, (
namespaceusings -> namespaceusings namespaceusing ·, this
namespaceusings -> namespaceusings namespaceusing ·, new
namespaceusings -> namespaceusings namespaceusing ·, LITINT
namespaceusings -> namespaceusings namespaceusing ·, LITFLOAT
namespaceusings -> namespaceusings namespaceusing ·, LITSTRING
namespaceusings -> namespaceusings namespaceusing ·, LITBOOL
namespaceusings -> namespaceusings namespaceusing ·, null
namespaceusings -> namespaceusings namespaceusing ·, ++
namespaceusings -> namespaceusings namespaceusing ·, --
namespaceusings -> namespaceusings namespaceusing ·, break
namespaceusings -> namespaceusings namespaceusing ·, return
namespaceusings -> namespaceusings namespaceusing ·, delete
namespaceusings -> namespaceusings namespaceusing ·, while
namespaceusings -> namespaceusings namespaceusing ·, for
namespaceusings -> namespaceusings namespaceusing ·, if
namespaceusings -> namespaceusings namespaceusing ·, $
namespaceusings -> namespaceusings namespaceusing ·, using
***EndSet***
***EndState***
***State***
39
I_39
***Set***
S -> importations namespaceusings statements ·, $
statements -> statements · stmt, $
statements -> statements · stmt, namespace
statements -> statements · stmt, {
statements -> statements · stmt, ID
statements -> statements · stmt, void
statements -> statements · stmt, bool
statements -> statements · stmt, int
statements -> statements · stmt, float
statements -> statements · stmt, string
statements -> statements · stmt, extern
statements -> statements · stmt, class
statements -> statements · stmt, (
statements -> statements · stmt, this
statements -> statements · stmt, new
statements -> statements · stmt, LITINT
statements -> statements · stmt, LITFLOAT
statements -> statements · stmt, LITSTRING
statements -> statements · stmt, LITBOOL
statements -> statements · stmt, null
statements -> statements · stmt, ++
statements -> statements · stmt, --
statements -> statements · stmt, break
statements -> statements · stmt, return
statements -> statements · stmt, delete
statements -> statements · stmt, while
statements -> statements · stmt, for
statements -> statements · stmt, if
stmt -> · namespaceblock, $
stmt -> · statementblock, $
stmt -> · declstmt, $
stmt -> · stmtexpr ;, $
stmt -> · break ;, $
stmt -> · return expr ;, $
stmt -> · return ;, $
stmt -> · delete expr ;, $
stmt -> · while ( expr ) stmt, $
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, $
stmt -> · if ( expr ) stmt elifclauselist elseclause, $
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, $
statementblock -> · { statements }, $
declstmt -> · type ID = expr ;, $
declstmt -> · type ID ( params ) { statements }, $
declstmt -> · extern type ID ( params ) ;, $
declstmt -> · class ID inherit { declstatements }, $
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · string, ID
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
***EndSet***
***EndState***
***State***
40
I_40_157_249_738_1034_1153
***Set***
stmt -> namespaceblock ·, $
stmt -> namespaceblock ·, namespace
stmt -> namespaceblock ·, {
stmt -> namespaceblock ·, ID
stmt -> namespaceblock ·, void
stmt -> namespaceblock ·, bool
stmt -> namespaceblock ·, int
stmt -> namespaceblock ·, float
stmt -> namespaceblock ·, string
stmt -> namespaceblock ·, extern
stmt -> namespaceblock ·, class
stmt -> namespaceblock ·, (
stmt -> namespaceblock ·, this
stmt -> namespaceblock ·, new
stmt -> namespaceblock ·, LITINT
stmt -> namespaceblock ·, LITFLOAT
stmt -> namespaceblock ·, LITSTRING
stmt -> namespaceblock ·, LITBOOL
stmt -> namespaceblock ·, null
stmt -> namespaceblock ·, ++
stmt -> namespaceblock ·, --
stmt -> namespaceblock ·, break
stmt -> namespaceblock ·, return
stmt -> namespaceblock ·, delete
stmt -> namespaceblock ·, while
stmt -> namespaceblock ·, for
stmt -> namespaceblock ·, if
stmt -> namespaceblock ·, }
stmt -> namespaceblock ·, &&
stmt -> namespaceblock ·, ||
stmt -> namespaceblock ·, +
stmt -> namespaceblock ·, -
stmt -> namespaceblock ·, *
stmt -> namespaceblock ·, /
stmt -> namespaceblock ·, !
stmt -> namespaceblock ·, else
***EndSet***
***EndState***
***State***
41
I_41_158_250_739_1035_1154
***Set***
stmt -> statementblock ·, $
stmt -> statementblock ·, namespace
stmt -> statementblock ·, {
stmt -> statementblock ·, ID
stmt -> statementblock ·, void
stmt -> statementblock ·, bool
stmt -> statementblock ·, int
stmt -> statementblock ·, float
stmt -> statementblock ·, string
stmt -> statementblock ·, extern
stmt -> statementblock ·, class
stmt -> statementblock ·, (
stmt -> statementblock ·, this
stmt -> statementblock ·, new
stmt -> statementblock ·, LITINT
stmt -> statementblock ·, LITFLOAT
stmt -> statementblock ·, LITSTRING
stmt -> statementblock ·, LITBOOL
stmt -> statementblock ·, null
stmt -> statementblock ·, ++
stmt -> statementblock ·, --
stmt -> statementblock ·, break
stmt -> statementblock ·, return
stmt -> statementblock ·, delete
stmt -> statementblock ·, while
stmt -> statementblock ·, for
stmt -> statementblock ·, if
stmt -> statementblock ·, }
stmt -> statementblock ·, &&
stmt -> statementblock ·, ||
stmt -> statementblock ·, +
stmt -> statementblock ·, -
stmt -> statementblock ·, *
stmt -> statementblock ·, /
stmt -> statementblock ·, !
stmt -> statementblock ·, else
***EndSet***
***EndState***
***State***
42
I_42_159
***Set***
statements -> stmt ·, $
statements -> stmt ·, namespace
statements -> stmt ·, {
statements -> stmt ·, ID
statements -> stmt ·, void
statements -> stmt ·, bool
statements -> stmt ·, int
statements -> stmt ·, float
statements -> stmt ·, string
statements -> stmt ·, extern
statements -> stmt ·, class
statements -> stmt ·, (
statements -> stmt ·, this
statements -> stmt ·, new
statements -> stmt ·, LITINT
statements -> stmt ·, LITFLOAT
statements -> stmt ·, LITSTRING
statements -> stmt ·, LITBOOL
statements -> stmt ·, null
statements -> stmt ·, ++
statements -> stmt ·, --
statements -> stmt ·, break
statements -> stmt ·, return
statements -> stmt ·, delete
statements -> stmt ·, while
statements -> stmt ·, for
statements -> stmt ·, if
statements -> stmt ·, }
***EndSet***
***EndState***
***State***
43
I_43_160_252_741_1037_1156
***Set***
stmt -> declstmt ·, $
stmt -> declstmt ·, namespace
stmt -> declstmt ·, {
stmt -> declstmt ·, ID
stmt -> declstmt ·, void
stmt -> declstmt ·, bool
stmt -> declstmt ·, int
stmt -> declstmt ·, float
stmt -> declstmt ·, string
stmt -> declstmt ·, extern
stmt -> declstmt ·, class
stmt -> declstmt ·, (
stmt -> declstmt ·, this
stmt -> declstmt ·, new
stmt -> declstmt ·, LITINT
stmt -> declstmt ·, LITFLOAT
stmt -> declstmt ·, LITSTRING
stmt -> declstmt ·, LITBOOL
stmt -> declstmt ·, null
stmt -> declstmt ·, ++
stmt -> declstmt ·, --
stmt -> declstmt ·, break
stmt -> declstmt ·, return
stmt -> declstmt ·, delete
stmt -> declstmt ·, while
stmt -> declstmt ·, for
stmt -> declstmt ·, if
stmt -> declstmt ·, }
stmt -> declstmt ·, &&
stmt -> declstmt ·, ||
stmt -> declstmt ·, +
stmt -> declstmt ·, -
stmt -> declstmt ·, *
stmt -> declstmt ·, /
stmt -> declstmt ·, !
stmt -> declstmt ·, else
***EndSet***
***EndState***
***State***
44
I_44_161_253_742_1038_1157
***Set***
stmt -> stmtexpr · ;, $
stmt -> stmtexpr · ;, namespace
stmt -> stmtexpr · ;, {
stmt -> stmtexpr · ;, ID
stmt -> stmtexpr · ;, void
stmt -> stmtexpr · ;, bool
stmt -> stmtexpr · ;, int
stmt -> stmtexpr · ;, float
stmt -> stmtexpr · ;, string
stmt -> stmtexpr · ;, extern
stmt -> stmtexpr · ;, class
stmt -> stmtexpr · ;, (
stmt -> stmtexpr · ;, this
stmt -> stmtexpr · ;, new
stmt -> stmtexpr · ;, LITINT
stmt -> stmtexpr · ;, LITFLOAT
stmt -> stmtexpr · ;, LITSTRING
stmt -> stmtexpr · ;, LITBOOL
stmt -> stmtexpr · ;, null
stmt -> stmtexpr · ;, ++
stmt -> stmtexpr · ;, --
stmt -> stmtexpr · ;, break
stmt -> stmtexpr · ;, return
stmt -> stmtexpr · ;, delete
stmt -> stmtexpr · ;, while
stmt -> stmtexpr · ;, for
stmt -> stmtexpr · ;, if
stmt -> stmtexpr · ;, }
stmt -> stmtexpr · ;, &&
stmt -> stmtexpr · ;, ||
stmt -> stmtexpr · ;, +
stmt -> stmtexpr · ;, -
stmt -> stmtexpr · ;, *
stmt -> stmtexpr · ;, /
stmt -> stmtexpr · ;, !
stmt -> stmtexpr · ;, else
***EndSet***
***EndState***
***State***
45
I_45_972
***Set***
stmtexpr -> assign ·, ;
stmtexpr -> assign ·, )
***EndSet***
***EndState***
***State***
46
I_46_973
***Set***
stmtexpr -> call ·, ;
primary -> call ·, .
stmtexpr -> call ·, )
***EndSet***
***EndState***
***State***
47
I_47_94_130_329
***Set***
lvalue -> indexaccess ·, =
lvalue -> indexaccess ·, +=
lvalue -> indexaccess ·, -=
lvalue -> indexaccess ·, *=
lvalue -> indexaccess ·, /=
lvalue -> indexaccess ·, %=
primary -> indexaccess ·, .
primary -> indexaccess ·, ;
primary -> indexaccess ·, &&
primary -> indexaccess ·, ||
primary -> indexaccess ·, >
primary -> indexaccess ·, <
primary -> indexaccess ·, >=
primary -> indexaccess ·, <=
primary -> indexaccess ·, ==
primary -> indexaccess ·, !=
primary -> indexaccess ·, +
primary -> indexaccess ·, -
primary -> indexaccess ·, *
primary -> indexaccess ·, /
primary -> indexaccess ·, )
primary -> indexaccess ·, ,
***EndSet***
***EndState***
***State***
48
I_48_974
***Set***
stmtexpr -> newobj ·, ;
primary -> newobj ·, .
stmtexpr -> newobj ·, )
***EndSet***
***EndState***
***State***
49
I_49_96_132_331_362_424_455_515_546_831_862_927
***Set***
primary -> newarr ·, .
primary -> newarr ·, ;
primary -> newarr ·, &&
primary -> newarr ·, ||
primary -> newarr ·, >
primary -> newarr ·, <
primary -> newarr ·, >=
primary -> newarr ·, <=
primary -> newarr ·, ==
primary -> newarr ·, !=
primary -> newarr ·, +
primary -> newarr ·, -
primary -> newarr ·, *
primary -> newarr ·, /
primary -> newarr ·, )
primary -> newarr ·, ,
primary -> newarr ·, ]
***EndSet***
***EndState***
***State***
50
I_50_975
***Set***
stmtexpr -> incdec ·, ;
stmtexpr -> incdec ·, )
***EndSet***
***EndState***
***State***
51
I_51_162_254_657_743_1039_1158
***Set***
declstmt -> type · ID = expr ;, $
declstmt -> type · ID ( params ) { statements }, $
declstmt -> type · ID = expr ;, namespace
declstmt -> type · ID ( params ) { statements }, namespace
declstmt -> type · ID = expr ;, {
declstmt -> type · ID ( params ) { statements }, {
declstmt -> type · ID = expr ;, ID
declstmt -> type · ID ( params ) { statements }, ID
declstmt -> type · ID = expr ;, void
declstmt -> type · ID ( params ) { statements }, void
declstmt -> type · ID = expr ;, bool
declstmt -> type · ID ( params ) { statements }, bool
declstmt -> type · ID = expr ;, int
declstmt -> type · ID ( params ) { statements }, int
declstmt -> type · ID = expr ;, float
declstmt -> type · ID ( params ) { statements }, float
declstmt -> type · ID = expr ;, string
declstmt -> type · ID ( params ) { statements }, string
declstmt -> type · ID = expr ;, extern
declstmt -> type · ID ( params ) { statements }, extern
declstmt -> type · ID = expr ;, class
declstmt -> type · ID ( params ) { statements }, class
declstmt -> type · ID = expr ;, (
declstmt -> type · ID ( params ) { statements }, (
declstmt -> type · ID = expr ;, this
declstmt -> type · ID ( params ) { statements }, this
declstmt -> type · ID = expr ;, new
declstmt -> type · ID ( params ) { statements }, new
declstmt -> type · ID = expr ;, LITINT
declstmt -> type · ID ( params ) { statements }, LITINT
declstmt -> type · ID = expr ;, LITFLOAT
declstmt -> type · ID ( params ) { statements }, LITFLOAT
declstmt -> type · ID = expr ;, LITSTRING
declstmt -> type · ID ( params ) { statements }, LITSTRING
declstmt -> type · ID = expr ;, LITBOOL
declstmt -> type · ID ( params ) { statements }, LITBOOL
declstmt -> type · ID = expr ;, null
declstmt -> type · ID ( params ) { statements }, null
declstmt -> type · ID = expr ;, ++
declstmt -> type · ID ( params ) { statements }, ++
declstmt -> type · ID = expr ;, --
declstmt -> type · ID ( params ) { statements }, --
declstmt -> type · ID = expr ;, break
declstmt -> type · ID ( params ) { statements }, break
declstmt -> type · ID = expr ;, return
declstmt -> type · ID ( params ) { statements }, return
declstmt -> type · ID = expr ;, delete
declstmt -> type · ID ( params ) { statements }, delete
declstmt -> type · ID = expr ;, while
declstmt -> type · ID ( params ) { statements }, while
declstmt -> type · ID = expr ;, for
declstmt -> type · ID ( params ) { statements }, for
declstmt -> type · ID = expr ;, if
declstmt -> type · ID ( params ) { statements }, if
declstmt -> type · ID = expr ;, }
declstmt -> type · ID ( params ) { statements }, }
declstmt -> type · ID = expr ;, &&
declstmt -> type · ID ( params ) { statements }, &&
declstmt -> type · ID = expr ;, ||
declstmt -> type · ID ( params ) { statements }, ||
declstmt -> type · ID = expr ;, +
declstmt -> type · ID ( params ) { statements }, +
declstmt -> type · ID = expr ;, -
declstmt -> type · ID ( params ) { statements }, -
declstmt -> type · ID = expr ;, *
declstmt -> type · ID ( params ) { statements }, *
declstmt -> type · ID = expr ;, /
declstmt -> type · ID ( params ) { statements }, /
declstmt -> type · ID = expr ;, !
declstmt -> type · ID ( params ) { statements }, !
declstmt -> type · ID = expr ;, else
declstmt -> type · ID ( params ) { statements }, else
***EndSet***
***EndState***
***State***
52
I_52_202
***Set***
type -> stype ·, ID
type -> stype ·, )
***EndSet***
***EndState***
***State***
53
I_53_203
***Set***
type -> arrtype ·, ID
type -> arrtype ·, )
***EndSet***
***EndState***
***State***
54
I_54_204
***Set***
stype -> primitive ·, ID
primitiveBracket -> primitive · [ optidx ], ID
stype -> primitive ·, )
primitiveBracket -> primitive · [ optidx ], )
***EndSet***
***EndState***
***State***
55
I_55
***Set***
memberaccess -> primary · . ID, (
memberaccess -> primary · . ID, =
memberaccess -> primary · . ID, +=
memberaccess -> primary · . ID, -=
memberaccess -> primary · . ID, *=
memberaccess -> primary · . ID, /=
memberaccess -> primary · . ID, %=
memberaccess -> primary · . ID, [
memberaccess -> primary · . ID, .
***EndSet***
***EndState***
***State***
56
I_56_105_141_340_368_430_460_521_551_837_867_932
***Set***
primary -> lit ·, .
primary -> lit ·, ;
primary -> lit ·, &&
primary -> lit ·, ||
primary -> lit ·, >
primary -> lit ·, <
primary -> lit ·, >=
primary -> lit ·, <=
primary -> lit ·, ==
primary -> lit ·, !=
primary -> lit ·, +
primary -> lit ·, -
primary -> lit ·, *
primary -> lit ·, /
primary -> lit ·, )
primary -> lit ·, ,
primary -> lit ·, ]
***EndSet***
***EndState***
***State***
57
I_57_143_342
***Set***
assign -> lvalue · = expr, ;
assign -> lvalue · += expr, ;
assign -> lvalue · -= expr, ;
assign -> lvalue · *= expr, ;
assign -> lvalue · /= expr, ;
assign -> lvalue · %= expr, ;
assign -> lvalue · = expr, )
assign -> lvalue · += expr, )
assign -> lvalue · -= expr, )
assign -> lvalue · *= expr, )
assign -> lvalue · /= expr, )
assign -> lvalue · %= expr, )
assign -> lvalue · = expr, ,
assign -> lvalue · += expr, ,
assign -> lvalue · -= expr, ,
assign -> lvalue · *= expr, ,
assign -> lvalue · /= expr, ,
assign -> lvalue · %= expr, ,
***EndSet***
***EndState***
***State***
58
I_58_107_144_343_976
***Set***
call -> memberaccess · ( args ), ;
lvalue -> memberaccess ·, =
lvalue -> memberaccess ·, +=
lvalue -> memberaccess ·, -=
lvalue -> memberaccess ·, *=
lvalue -> memberaccess ·, /=
lvalue -> memberaccess ·, %=
indexaccess -> memberaccess · [ aexpr ], =
indexaccess -> memberaccess · [ aexpr ], +=
indexaccess -> memberaccess · [ aexpr ], -=
indexaccess -> memberaccess · [ aexpr ], *=
indexaccess -> memberaccess · [ aexpr ], /=
indexaccess -> memberaccess · [ aexpr ], %=
primary -> memberaccess ·, .
indexaccess -> memberaccess · [ aexpr ], .
call -> memberaccess · ( args ), .
primary -> memberaccess ·, ;
primary -> memberaccess ·, &&
primary -> memberaccess ·, ||
indexaccess -> memberaccess · [ aexpr ], ;
indexaccess -> memberaccess · [ aexpr ], &&
call -> memberaccess · ( args ), &&
indexaccess -> memberaccess · [ aexpr ], ||
call -> memberaccess · ( args ), ||
primary -> memberaccess ·, >
primary -> memberaccess ·, <
primary -> memberaccess ·, >=
primary -> memberaccess ·, <=
primary -> memberaccess ·, ==
primary -> memberaccess ·, !=
primary -> memberaccess ·, +
primary -> memberaccess ·, -
primary -> memberaccess ·, *
primary -> memberaccess ·, /
indexaccess -> memberaccess · [ aexpr ], >
call -> memberaccess · ( args ), >
indexaccess -> memberaccess · [ aexpr ], <
call -> memberaccess · ( args ), <
indexaccess -> memberaccess · [ aexpr ], >=
call -> memberaccess · ( args ), >=
indexaccess -> memberaccess · [ aexpr ], <=
call -> memberaccess · ( args ), <=
indexaccess -> memberaccess · [ aexpr ], ==
call -> memberaccess · ( args ), ==
indexaccess -> memberaccess · [ aexpr ], !=
call -> memberaccess · ( args ), !=
indexaccess -> memberaccess · [ aexpr ], +
call -> memberaccess · ( args ), +
indexaccess -> memberaccess · [ aexpr ], -
call -> memberaccess · ( args ), -
indexaccess -> memberaccess · [ aexpr ], *
call -> memberaccess · ( args ), *
indexaccess -> memberaccess · [ aexpr ], /
call -> memberaccess · ( args ), /
primary -> memberaccess ·, )
indexaccess -> memberaccess · [ aexpr ], )
call -> memberaccess · ( args ), )
primary -> memberaccess ·, ,
indexaccess -> memberaccess · [ aexpr ], ,
call -> memberaccess · ( args ), ,
***EndSet***
***EndState***
***State***
59
I_59_206
***Set***
arrtype -> stypeBracket ·, ID
arrtype -> stypeBracket ·, )
***EndSet***
***EndState***
***State***
60
I_60_207
***Set***
stypeBracket -> idBracket ·, ID
indexaccess -> idBracket ·, =
indexaccess -> idBracket ·, +=
indexaccess -> idBracket ·, -=
indexaccess -> idBracket ·, *=
indexaccess -> idBracket ·, /=
indexaccess -> idBracket ·, %=
indexaccess -> idBracket ·, .
stypeBracket -> idBracket ·, )
indexaccess -> idBracket ·, )
indexaccess -> idBracket ·, &&
indexaccess -> idBracket ·, ||
indexaccess -> idBracket ·, >
indexaccess -> idBracket ·, <
indexaccess -> idBracket ·, >=
indexaccess -> idBracket ·, <=
indexaccess -> idBracket ·, ==
indexaccess -> idBracket ·, !=
indexaccess -> idBracket ·, +
indexaccess -> idBracket ·, -
indexaccess -> idBracket ·, *
indexaccess -> idBracket ·, /
***EndSet***
***EndState***
***State***
61
I_61_78_194_208_261_582_625_677_699_756_778_1054_1076_1110
***Set***
stypeBracket -> primitiveBracket ·, ID
stypeBracket -> primitiveBracket ·, .
stypeBracket -> primitiveBracket ·, ;
stypeBracket -> primitiveBracket ·, &&
stypeBracket -> primitiveBracket ·, ||
stypeBracket -> primitiveBracket ·, >
stypeBracket -> primitiveBracket ·, <
stypeBracket -> primitiveBracket ·, >=
stypeBracket -> primitiveBracket ·, <=
stypeBracket -> primitiveBracket ·, ==
stypeBracket -> primitiveBracket ·, !=
stypeBracket -> primitiveBracket ·, +
stypeBracket -> primitiveBracket ·, -
stypeBracket -> primitiveBracket ·, *
stypeBracket -> primitiveBracket ·, /
stypeBracket -> primitiveBracket ·, )
stypeBracket -> primitiveBracket ·, ,
stypeBracket -> primitiveBracket ·, ]
***EndSet***
***EndState***
***State***
62
I_62
***Set***
importation -> import < LITSTRING > ·, using
importation -> import < LITSTRING > ·, namespace
importation -> import < LITSTRING > ·, {
importation -> import < LITSTRING > ·, ID
importation -> import < LITSTRING > ·, void
importation -> import < LITSTRING > ·, bool
importation -> import < LITSTRING > ·, int
importation -> import < LITSTRING > ·, float
importation -> import < LITSTRING > ·, string
importation -> import < LITSTRING > ·, extern
importation -> import < LITSTRING > ·, class
importation -> import < LITSTRING > ·, (
importation -> import < LITSTRING > ·, this
importation -> import < LITSTRING > ·, new
importation -> import < LITSTRING > ·, LITINT
importation -> import < LITSTRING > ·, LITFLOAT
importation -> import < LITSTRING > ·, LITSTRING
importation -> import < LITSTRING > ·, LITBOOL
importation -> import < LITSTRING > ·, null
importation -> import < LITSTRING > ·, ++
importation -> import < LITSTRING > ·, --
importation -> import < LITSTRING > ·, break
importation -> import < LITSTRING > ·, return
importation -> import < LITSTRING > ·, delete
importation -> import < LITSTRING > ·, while
importation -> import < LITSTRING > ·, for
importation -> import < LITSTRING > ·, if
importation -> import < LITSTRING > ·, $
importation -> import < LITSTRING > ·, import
***EndSet***
***EndState***
***State***
63
I_63
***Set***
namespaceusing -> using ID ; ·, namespace
namespaceusing -> using ID ; ·, {
namespaceusing -> using ID ; ·, ID
namespaceusing -> using ID ; ·, void
namespaceusing -> using ID ; ·, bool
namespaceusing -> using ID ; ·, int
namespaceusing -> using ID ; ·, float
namespaceusing -> using ID ; ·, string
namespaceusing -> using ID ; ·, extern
namespaceusing -> using ID ; ·, class
namespaceusing -> using ID ; ·, (
namespaceusing -> using ID ; ·, this
namespaceusing -> using ID ; ·, new
namespaceusing -> using ID ; ·, LITINT
namespaceusing -> using ID ; ·, LITFLOAT
namespaceusing -> using ID ; ·, LITSTRING
namespaceusing -> using ID ; ·, LITBOOL
namespaceusing -> using ID ; ·, null
namespaceusing -> using ID ; ·, ++
namespaceusing -> using ID ; ·, --
namespaceusing -> using ID ; ·, break
namespaceusing -> using ID ; ·, return
namespaceusing -> using ID ; ·, delete
namespaceusing -> using ID ; ·, while
namespaceusing -> using ID ; ·, for
namespaceusing -> using ID ; ·, if
namespaceusing -> using ID ; ·, $
namespaceusing -> using ID ; ·, using
***EndSet***
***EndState***
***State***
64
I_64_299_471_980_1201_1262
***Set***
namespaceblock -> namespace ID · { statements }, $
namespaceblock -> namespace ID · { statements }, namespace
namespaceblock -> namespace ID · { statements }, {
namespaceblock -> namespace ID · { statements }, ID
namespaceblock -> namespace ID · { statements }, void
namespaceblock -> namespace ID · { statements }, bool
namespaceblock -> namespace ID · { statements }, int
namespaceblock -> namespace ID · { statements }, float
namespaceblock -> namespace ID · { statements }, string
namespaceblock -> namespace ID · { statements }, extern
namespaceblock -> namespace ID · { statements }, class
namespaceblock -> namespace ID · { statements }, (
namespaceblock -> namespace ID · { statements }, this
namespaceblock -> namespace ID · { statements }, new
namespaceblock -> namespace ID · { statements }, LITINT
namespaceblock -> namespace ID · { statements }, LITFLOAT
namespaceblock -> namespace ID · { statements }, LITSTRING
namespaceblock -> namespace ID · { statements }, LITBOOL
namespaceblock -> namespace ID · { statements }, null
namespaceblock -> namespace ID · { statements }, ++
namespaceblock -> namespace ID · { statements }, --
namespaceblock -> namespace ID · { statements }, break
namespaceblock -> namespace ID · { statements }, return
namespaceblock -> namespace ID · { statements }, delete
namespaceblock -> namespace ID · { statements }, while
namespaceblock -> namespace ID · { statements }, for
namespaceblock -> namespace ID · { statements }, if
namespaceblock -> namespace ID · { statements }, }
namespaceblock -> namespace ID · { statements }, &&
namespaceblock -> namespace ID · { statements }, ||
namespaceblock -> namespace ID · { statements }, +
namespaceblock -> namespace ID · { statements }, -
namespaceblock -> namespace ID · { statements }, *
namespaceblock -> namespace ID · { statements }, /
namespaceblock -> namespace ID · { statements }, !
namespaceblock -> namespace ID · { statements }, else
***EndSet***
***EndState***
***State***
65
I_65
***Set***
stype -> ID ·, ID
idBracket -> ID · [ optidx ], ID
***EndSet***
***EndState***
***State***
66
I_66_300_472_902_981_1202_1263
***Set***
declstmt -> extern type · ID ( params ) ;, $
declstmt -> extern type · ID ( params ) ;, namespace
declstmt -> extern type · ID ( params ) ;, {
declstmt -> extern type · ID ( params ) ;, ID
declstmt -> extern type · ID ( params ) ;, void
declstmt -> extern type · ID ( params ) ;, bool
declstmt -> extern type · ID ( params ) ;, int
declstmt -> extern type · ID ( params ) ;, float
declstmt -> extern type · ID ( params ) ;, string
declstmt -> extern type · ID ( params ) ;, extern
declstmt -> extern type · ID ( params ) ;, class
declstmt -> extern type · ID ( params ) ;, (
declstmt -> extern type · ID ( params ) ;, this
declstmt -> extern type · ID ( params ) ;, new
declstmt -> extern type · ID ( params ) ;, LITINT
declstmt -> extern type · ID ( params ) ;, LITFLOAT
declstmt -> extern type · ID ( params ) ;, LITSTRING
declstmt -> extern type · ID ( params ) ;, LITBOOL
declstmt -> extern type · ID ( params ) ;, null
declstmt -> extern type · ID ( params ) ;, ++
declstmt -> extern type · ID ( params ) ;, --
declstmt -> extern type · ID ( params ) ;, break
declstmt -> extern type · ID ( params ) ;, return
declstmt -> extern type · ID ( params ) ;, delete
declstmt -> extern type · ID ( params ) ;, while
declstmt -> extern type · ID ( params ) ;, for
declstmt -> extern type · ID ( params ) ;, if
declstmt -> extern type · ID ( params ) ;, }
declstmt -> extern type · ID ( params ) ;, &&
declstmt -> extern type · ID ( params ) ;, ||
declstmt -> extern type · ID ( params ) ;, +
declstmt -> extern type · ID ( params ) ;, -
declstmt -> extern type · ID ( params ) ;, *
declstmt -> extern type · ID ( params ) ;, /
declstmt -> extern type · ID ( params ) ;, !
declstmt -> extern type · ID ( params ) ;, else
***EndSet***
***EndState***
***State***
67
I_67_77_193_260_581_624_676_698_755_777_1053_1075_1109
***Set***
stypeBracket -> idBracket ·, ID
stypeBracket -> idBracket ·, .
stypeBracket -> idBracket ·, ;
stypeBracket -> idBracket ·, &&
stypeBracket -> idBracket ·, ||
stypeBracket -> idBracket ·, >
stypeBracket -> idBracket ·, <
stypeBracket -> idBracket ·, >=
stypeBracket -> idBracket ·, <=
stypeBracket -> idBracket ·, ==
stypeBracket -> idBracket ·, !=
stypeBracket -> idBracket ·, +
stypeBracket -> idBracket ·, -
stypeBracket -> idBracket ·, *
stypeBracket -> idBracket ·, /
stypeBracket -> idBracket ·, )
stypeBracket -> idBracket ·, ,
stypeBracket -> idBracket ·, ]
***EndSet***
***EndState***
***State***
68
I_68_301_473_903_982_1203_1264
***Set***
declstmt -> class ID · inherit { declstatements }, $
declstmt -> class ID · inherit { declstatements }, namespace
declstmt -> class ID · inherit { declstatements }, {
declstmt -> class ID · inherit { declstatements }, ID
declstmt -> class ID · inherit { declstatements }, void
declstmt -> class ID · inherit { declstatements }, bool
declstmt -> class ID · inherit { declstatements }, int
declstmt -> class ID · inherit { declstatements }, float
declstmt -> class ID · inherit { declstatements }, string
declstmt -> class ID · inherit { declstatements }, extern
declstmt -> class ID · inherit { declstatements }, class
declstmt -> class ID · inherit { declstatements }, (
declstmt -> class ID · inherit { declstatements }, this
declstmt -> class ID · inherit { declstatements }, new
declstmt -> class ID · inherit { declstatements }, LITINT
declstmt -> class ID · inherit { declstatements }, LITFLOAT
declstmt -> class ID · inherit { declstatements }, LITSTRING
declstmt -> class ID · inherit { declstatements }, LITBOOL
declstmt -> class ID · inherit { declstatements }, null
declstmt -> class ID · inherit { declstatements }, ++
declstmt -> class ID · inherit { declstatements }, --
declstmt -> class ID · inherit { declstatements }, break
declstmt -> class ID · inherit { declstatements }, return
declstmt -> class ID · inherit { declstatements }, delete
declstmt -> class ID · inherit { declstatements }, while
declstmt -> class ID · inherit { declstatements }, for
declstmt -> class ID · inherit { declstatements }, if
inherit -> · : ID, {
inherit -> ·, {
declstmt -> class ID · inherit { declstatements }, }
declstmt -> class ID · inherit { declstatements }, &&
declstmt -> class ID · inherit { declstatements }, ||
declstmt -> class ID · inherit { declstatements }, +
declstmt -> class ID · inherit { declstatements }, -
declstmt -> class ID · inherit { declstatements }, *
declstmt -> class ID · inherit { declstatements }, /
declstmt -> class ID · inherit { declstatements }, !
declstmt -> class ID · inherit { declstatements }, else
***EndSet***
***EndState***
***State***
69
I_74_190_257_578_621_673_695_752_774_1050_1072_1106_1159
***Set***
newobj -> new ID · ( ), ;
newobj -> new ID · ( ), .
idBracket -> ID · [ optidx ], .
newobj -> new ID · ( ), &&
newobj -> new ID · ( ), ||
newobj -> new ID · ( ), >
newobj -> new ID · ( ), <
newobj -> new ID · ( ), >=
newobj -> new ID · ( ), <=
newobj -> new ID · ( ), ==
newobj -> new ID · ( ), !=
newobj -> new ID · ( ), +
newobj -> new ID · ( ), -
newobj -> new ID · ( ), *
newobj -> new ID · ( ), /
idBracket -> ID · [ optidx ], ;
idBracket -> ID · [ optidx ], &&
idBracket -> ID · [ optidx ], ||
idBracket -> ID · [ optidx ], >
idBracket -> ID · [ optidx ], <
idBracket -> ID · [ optidx ], >=
idBracket -> ID · [ optidx ], <=
idBracket -> ID · [ optidx ], ==
idBracket -> ID · [ optidx ], !=
idBracket -> ID · [ optidx ], +
idBracket -> ID · [ optidx ], -
idBracket -> ID · [ optidx ], *
idBracket -> ID · [ optidx ], /
newobj -> new ID · ( ), )
idBracket -> ID · [ optidx ], )
newobj -> new ID · ( ), ,
idBracket -> ID · [ optidx ], ,
newobj -> new ID · ( ), ]
idBracket -> ID · [ optidx ], ]
***EndSet***
***EndState***
***State***
70
I_75_191_258_579_622_674_696_753_775_1051_1073_1107
***Set***
primitiveBracket -> primitive · [ optidx ], .
primitiveBracket -> primitive · [ optidx ], ;
primitiveBracket -> primitive · [ optidx ], &&
primitiveBracket -> primitive · [ optidx ], ||
primitiveBracket -> primitive · [ optidx ], >
primitiveBracket -> primitive · [ optidx ], <
primitiveBracket -> primitive · [ optidx ], >=
primitiveBracket -> primitive · [ optidx ], <=
primitiveBracket -> primitive · [ optidx ], ==
primitiveBracket -> primitive · [ optidx ], !=
primitiveBracket -> primitive · [ optidx ], +
primitiveBracket -> primitive · [ optidx ], -
primitiveBracket -> primitive · [ optidx ], *
primitiveBracket -> primitive · [ optidx ], /
primitiveBracket -> primitive · [ optidx ], )
primitiveBracket -> primitive · [ optidx ], ,
primitiveBracket -> primitive · [ optidx ], ]
***EndSet***
***EndState***
***State***
71
I_76_192_259_580_623_675_697_754_776_1052_1074_1108
***Set***
newarr -> new stypeBracket ·, .
newarr -> new stypeBracket ·, ;
newarr -> new stypeBracket ·, &&
newarr -> new stypeBracket ·, ||
newarr -> new stypeBracket ·, >
newarr -> new stypeBracket ·, <
newarr -> new stypeBracket ·, >=
newarr -> new stypeBracket ·, <=
newarr -> new stypeBracket ·, ==
newarr -> new stypeBracket ·, !=
newarr -> new stypeBracket ·, +
newarr -> new stypeBracket ·, -
newarr -> new stypeBracket ·, *
newarr -> new stypeBracket ·, /
newarr -> new stypeBracket ·, )
newarr -> new stypeBracket ·, ,
newarr -> new stypeBracket ·, ]
***EndSet***
***EndState***
***State***
72
I_82_118_317_349_411_442_502_533_818_849_914
***Set***
primary -> ( · expr ), .
cast -> ( · type ) factor, ;
primary -> ( · expr ), ;
cast -> ( · type ) factor, &&
primary -> ( · expr ), &&
cast -> ( · type ) factor, ||
primary -> ( · expr ), ||
cast -> ( · type ) factor, >
primary -> ( · expr ), >
cast -> ( · type ) factor, <
primary -> ( · expr ), <
cast -> ( · type ) factor, >=
primary -> ( · expr ), >=
cast -> ( · type ) factor, <=
primary -> ( · expr ), <=
cast -> ( · type ) factor, ==
primary -> ( · expr ), ==
cast -> ( · type ) factor, !=
primary -> ( · expr ), !=
cast -> ( · type ) factor, +
primary -> ( · expr ), +
cast -> ( · type ) factor, -
primary -> ( · expr ), -
cast -> ( · type ) factor, *
primary -> ( · expr ), *
cast -> ( · type ) factor, /
primary -> ( · expr ), /
expr -> · assign, )
expr -> · nexpr, )
type -> · arrtype, )
type -> · stype, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
arrtype -> · stypeBracket, )
stype -> · primitive, )
stype -> · ID, )
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
stypeBracket -> · idBracket, )
stypeBracket -> · primitiveBracket, )
primitive -> · void, )
primitive -> · bool, )
primitive -> · int, )
primitive -> · float, )
primitive -> · string, )
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
idBracket -> · ID [ optidx ], )
primitiveBracket -> · primitive [ optidx ], )
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · string, [
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITSTRING, )
lit -> · LITBOOL, )
lit -> · null, )
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITSTRING, &&
lit -> · LITBOOL, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITSTRING, ||
lit -> · LITBOOL, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITSTRING, >
lit -> · LITBOOL, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITSTRING, <
lit -> · LITBOOL, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITSTRING, >=
lit -> · LITBOOL, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITSTRING, <=
lit -> · LITBOOL, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITSTRING, ==
lit -> · LITBOOL, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITSTRING, !=
lit -> · LITBOOL, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITSTRING, +
lit -> · LITBOOL, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITSTRING, -
lit -> · LITBOOL, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITSTRING, *
lit -> · LITBOOL, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITSTRING, /
lit -> · LITBOOL, /
lit -> · null, /
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
cast -> ( · type ) factor, )
primary -> ( · expr ), )
cast -> ( · type ) factor, ,
primary -> ( · expr ), ,
cast -> ( · type ) factor, ]
primary -> ( · expr ), ]
***EndSet***
***EndState***
***State***
73
I_85_121_320_352_414_445_505_536_821_852_917
***Set***
factor -> - · factor, ;
factor -> - · factor, &&
factor -> - · factor, ||
factor -> - · factor, >
factor -> - · factor, <
factor -> - · factor, >=
factor -> - · factor, <=
factor -> - · factor, ==
factor -> - · factor, !=
factor -> - · factor, +
factor -> - · factor, -
factor -> - · factor, *
factor -> - · factor, /
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITSTRING, ;
lit -> · LITBOOL, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITSTRING, &&
lit -> · LITBOOL, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITSTRING, ||
lit -> · LITBOOL, ||
lit -> · null, ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITSTRING, >
lit -> · LITBOOL, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITSTRING, <
lit -> · LITBOOL, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITSTRING, >=
lit -> · LITBOOL, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITSTRING, <=
lit -> · LITBOOL, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITSTRING, ==
lit -> · LITBOOL, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITSTRING, !=
lit -> · LITBOOL, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITSTRING, +
lit -> · LITBOOL, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITSTRING, -
lit -> · LITBOOL, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITSTRING, *
lit -> · LITBOOL, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITSTRING, /
lit -> · LITBOOL, /
lit -> · null, /
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
factor -> - · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITSTRING, )
lit -> · LITBOOL, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
factor -> - · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITSTRING, ,
lit -> · LITBOOL, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
factor -> - · factor, ]
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITINT, ]
lit -> · LITFLOAT, ]
lit -> · LITSTRING, ]
lit -> · LITBOOL, ]
lit -> · null, ]
idBracket -> · ID [ optidx ], ]
***EndSet***
***EndState***
***State***
74
I_86_122_321_353_415_446_506_537_822_853_918
***Set***
factor -> ! · factor, ;
factor -> ! · factor, &&
factor -> ! · factor, ||
factor -> ! · factor, >
factor -> ! · factor, <
factor -> ! · factor, >=
factor -> ! · factor, <=
factor -> ! · factor, ==
factor -> ! · factor, !=
factor -> ! · factor, +
factor -> ! · factor, -
factor -> ! · factor, *
factor -> ! · factor, /
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITSTRING, ;
lit -> · LITBOOL, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITSTRING, &&
lit -> · LITBOOL, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITSTRING, ||
lit -> · LITBOOL, ||
lit -> · null, ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITSTRING, >
lit -> · LITBOOL, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITSTRING, <
lit -> · LITBOOL, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITSTRING, >=
lit -> · LITBOOL, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITSTRING, <=
lit -> · LITBOOL, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITSTRING, ==
lit -> · LITBOOL, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITSTRING, !=
lit -> · LITBOOL, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITSTRING, +
lit -> · LITBOOL, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITSTRING, -
lit -> · LITBOOL, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITSTRING, *
lit -> · LITBOOL, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITSTRING, /
lit -> · LITBOOL, /
lit -> · null, /
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
factor -> ! · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITSTRING, )
lit -> · LITBOOL, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
factor -> ! · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITSTRING, ,
lit -> · LITBOOL, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
factor -> ! · factor, ]
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITINT, ]
lit -> · LITFLOAT, ]
lit -> · LITSTRING, ]
lit -> · LITBOOL, ]
lit -> · null, ]
idBracket -> · ID [ optidx ], ]
***EndSet***
***EndState***
***State***
75
I_91_127_326_970
***Set***
lvalue -> ID ·, =
lvalue -> ID ·, +=
lvalue -> ID ·, -=
lvalue -> ID ·, *=
lvalue -> ID ·, /=
lvalue -> ID ·, %=
primary -> ID ·, .
idBracket -> ID · [ optidx ], =
idBracket -> ID · [ optidx ], +=
idBracket -> ID · [ optidx ], -=
idBracket -> ID · [ optidx ], *=
idBracket -> ID · [ optidx ], /=
idBracket -> ID · [ optidx ], %=
incdec -> ID · ++, ;
incdec -> ID · --, ;
primary -> ID ·, ;
call -> ID · ( args ), .
incdec -> ID · ++, &&
incdec -> ID · --, &&
primary -> ID ·, &&
incdec -> ID · ++, ||
incdec -> ID · --, ||
primary -> ID ·, ||
call -> ID · ( args ), ;
idBracket -> ID · [ optidx ], .
call -> ID · ( args ), &&
call -> ID · ( args ), ||
incdec -> ID · ++, >
incdec -> ID · --, >
primary -> ID ·, >
incdec -> ID · ++, <
incdec -> ID · --, <
primary -> ID ·, <
incdec -> ID · ++, >=
incdec -> ID · --, >=
primary -> ID ·, >=
incdec -> ID · ++, <=
incdec -> ID · --, <=
primary -> ID ·, <=
incdec -> ID · ++, ==
incdec -> ID · --, ==
primary -> ID ·, ==
incdec -> ID · ++, !=
incdec -> ID · --, !=
primary -> ID ·, !=
idBracket -> ID · [ optidx ], ;
incdec -> ID · ++, +
incdec -> ID · --, +
primary -> ID ·, +
incdec -> ID · ++, -
incdec -> ID · --, -
primary -> ID ·, -
incdec -> ID · ++, *
incdec -> ID · --, *
primary -> ID ·, *
incdec -> ID · ++, /
incdec -> ID · --, /
primary -> ID ·, /
idBracket -> ID · [ optidx ], &&
idBracket -> ID · [ optidx ], ||
call -> ID · ( args ), >
call -> ID · ( args ), <
call -> ID · ( args ), >=
call -> ID · ( args ), <=
call -> ID · ( args ), ==
call -> ID · ( args ), !=
call -> ID · ( args ), +
call -> ID · ( args ), -
call -> ID · ( args ), *
call -> ID · ( args ), /
idBracket -> ID · [ optidx ], >
idBracket -> ID · [ optidx ], <
idBracket -> ID · [ optidx ], >=
idBracket -> ID · [ optidx ], <=
idBracket -> ID · [ optidx ], ==
idBracket -> ID · [ optidx ], !=
idBracket -> ID · [ optidx ], +
idBracket -> ID · [ optidx ], -
idBracket -> ID · [ optidx ], *
idBracket -> ID · [ optidx ], /
incdec -> ID · ++, )
incdec -> ID · --, )
primary -> ID ·, )
call -> ID · ( args ), )
idBracket -> ID · [ optidx ], )
incdec -> ID · ++, ,
incdec -> ID · --, ,
primary -> ID ·, ,
call -> ID · ( args ), ,
idBracket -> ID · [ optidx ], ,
***EndSet***
***EndState***
***State***
76
I_92_128_327
***Set***
expr -> assign ·, ;
expr -> assign ·, )
expr -> assign ·, ,
***EndSet***
***EndState***
***State***
77
I_93_129_328_359_421_452_512_543_828_859_924
***Set***
primary -> call ·, .
primary -> call ·, ;
primary -> call ·, &&
primary -> call ·, ||
primary -> call ·, >
primary -> call ·, <
primary -> call ·, >=
primary -> call ·, <=
primary -> call ·, ==
primary -> call ·, !=
primary -> call ·, +
primary -> call ·, -
primary -> call ·, *
primary -> call ·, /
primary -> call ·, )
primary -> call ·, ,
primary -> call ·, ]
***EndSet***
***EndState***
***State***
78
I_95_131_330_361_423_454_514_545_830_861_926
***Set***
primary -> newobj ·, .
primary -> newobj ·, ;
primary -> newobj ·, &&
primary -> newobj ·, ||
primary -> newobj ·, >
primary -> newobj ·, <
primary -> newobj ·, >=
primary -> newobj ·, <=
primary -> newobj ·, ==
primary -> newobj ·, !=
primary -> newobj ·, +
primary -> newobj ·, -
primary -> newobj ·, *
primary -> newobj ·, /
primary -> newobj ·, )
primary -> newobj ·, ,
primary -> newobj ·, ]
***EndSet***
***EndState***
***State***
79
I_97_133_332_363_425_456_516_547_832_863_928
***Set***
factor -> incdec ·, ;
factor -> incdec ·, &&
factor -> incdec ·, ||
factor -> incdec ·, >
factor -> incdec ·, <
factor -> incdec ·, >=
factor -> incdec ·, <=
factor -> incdec ·, ==
factor -> incdec ·, !=
factor -> incdec ·, +
factor -> incdec ·, -
factor -> incdec ·, *
factor -> incdec ·, /
factor -> incdec ·, )
factor -> incdec ·, ,
factor -> incdec ·, ]
***EndSet***
***EndState***
***State***
80
I_98_302_474_983_1204_1265
***Set***
stmt -> delete expr · ;, $
stmt -> delete expr · ;, namespace
stmt -> delete expr · ;, {
stmt -> delete expr · ;, ID
stmt -> delete expr · ;, void
stmt -> delete expr · ;, bool
stmt -> delete expr · ;, int
stmt -> delete expr · ;, float
stmt -> delete expr · ;, string
stmt -> delete expr · ;, extern
stmt -> delete expr · ;, class
stmt -> delete expr · ;, (
stmt -> delete expr · ;, this
stmt -> delete expr · ;, new
stmt -> delete expr · ;, LITINT
stmt -> delete expr · ;, LITFLOAT
stmt -> delete expr · ;, LITSTRING
stmt -> delete expr · ;, LITBOOL
stmt -> delete expr · ;, null
stmt -> delete expr · ;, ++
stmt -> delete expr · ;, --
stmt -> delete expr · ;, break
stmt -> delete expr · ;, return
stmt -> delete expr · ;, delete
stmt -> delete expr · ;, while
stmt -> delete expr · ;, for
stmt -> delete expr · ;, if
stmt -> delete expr · ;, }
stmt -> delete expr · ;, &&
stmt -> delete expr · ;, ||
stmt -> delete expr · ;, +
stmt -> delete expr · ;, -
stmt -> delete expr · ;, *
stmt -> delete expr · ;, /
stmt -> delete expr · ;, !
stmt -> delete expr · ;, else
***EndSet***
***EndState***
***State***
81
I_99_135_334
***Set***
expr -> nexpr ·, ;
expr -> nexpr ·, )
expr -> nexpr ·, ,
***EndSet***
***EndState***
***State***
82
I_100_136_335
***Set***
nexpr -> bexpr ·, ;
bexpr -> bexpr · && bexpr, ;
bexpr -> bexpr · || bexpr, ;
bexpr -> bexpr · && bexpr, &&
bexpr -> bexpr · || bexpr, &&
bexpr -> bexpr · && bexpr, ||
bexpr -> bexpr · || bexpr, ||
nexpr -> bexpr ·, )
bexpr -> bexpr · && bexpr, )
bexpr -> bexpr · || bexpr, )
nexpr -> bexpr ·, ,
bexpr -> bexpr · && bexpr, ,
bexpr -> bexpr · || bexpr, ,
***EndSet***
***EndState***
***State***
83
I_101_137_336
***Set***
nexpr -> aexpr ·, ;
bexpr -> aexpr · > aexpr, ;
bexpr -> aexpr · < aexpr, ;
bexpr -> aexpr · >= aexpr, ;
bexpr -> aexpr · <= aexpr, ;
bexpr -> aexpr · == aexpr, ;
bexpr -> aexpr · != aexpr, ;
aexpr -> aexpr · + term, ;
aexpr -> aexpr · - term, ;
bexpr -> aexpr · > aexpr, &&
bexpr -> aexpr · < aexpr, &&
bexpr -> aexpr · >= aexpr, &&
bexpr -> aexpr · <= aexpr, &&
bexpr -> aexpr · == aexpr, &&
bexpr -> aexpr · != aexpr, &&
bexpr -> aexpr · > aexpr, ||
bexpr -> aexpr · < aexpr, ||
bexpr -> aexpr · >= aexpr, ||
bexpr -> aexpr · <= aexpr, ||
bexpr -> aexpr · == aexpr, ||
bexpr -> aexpr · != aexpr, ||
aexpr -> aexpr · + term, >
aexpr -> aexpr · - term, >
aexpr -> aexpr · + term, <
aexpr -> aexpr · - term, <
aexpr -> aexpr · + term, >=
aexpr -> aexpr · - term, >=
aexpr -> aexpr · + term, <=
aexpr -> aexpr · - term, <=
aexpr -> aexpr · + term, ==
aexpr -> aexpr · - term, ==
aexpr -> aexpr · + term, !=
aexpr -> aexpr · - term, !=
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
nexpr -> aexpr ·, )
bexpr -> aexpr · > aexpr, )
bexpr -> aexpr · < aexpr, )
bexpr -> aexpr · >= aexpr, )
bexpr -> aexpr · <= aexpr, )
bexpr -> aexpr · == aexpr, )
bexpr -> aexpr · != aexpr, )
aexpr -> aexpr · + term, )
aexpr -> aexpr · - term, )
nexpr -> aexpr ·, ,
bexpr -> aexpr · > aexpr, ,
bexpr -> aexpr · < aexpr, ,
bexpr -> aexpr · >= aexpr, ,
bexpr -> aexpr · <= aexpr, ,
bexpr -> aexpr · == aexpr, ,
bexpr -> aexpr · != aexpr, ,
aexpr -> aexpr · + term, ,
aexpr -> aexpr · - term, ,
***EndSet***
***EndState***
***State***
84
I_102_138_337_365_405_427_518_834
***Set***
aexpr -> term ·, ;
aexpr -> term ·, >
aexpr -> term ·, <
aexpr -> term ·, >=
aexpr -> term ·, <=
aexpr -> term ·, ==
aexpr -> term ·, !=
aexpr -> term ·, +
aexpr -> term ·, -
term -> term · * factor, ;
term -> term · / factor, ;
term -> term · * factor, >
term -> term · / factor, >
term -> term · * factor, <
term -> term · / factor, <
term -> term · * factor, >=
term -> term · / factor, >=
term -> term · * factor, <=
term -> term · / factor, <=
term -> term · * factor, ==
term -> term · / factor, ==
term -> term · * factor, !=
term -> term · / factor, !=
term -> term · * factor, +
term -> term · / factor, +
term -> term · * factor, -
term -> term · / factor, -
term -> term · * factor, *
term -> term · / factor, *
term -> term · * factor, /
term -> term · / factor, /
aexpr -> term ·, )
term -> term · * factor, )
term -> term · / factor, )
aexpr -> term ·, ,
term -> term · * factor, ,
term -> term · / factor, ,
aexpr -> term ·, ]
term -> term · * factor, ]
term -> term · / factor, ]
aexpr -> term ·, &&
aexpr -> term ·, ||
term -> term · * factor, &&
term -> term · / factor, &&
term -> term · * factor, ||
term -> term · / factor, ||
***EndSet***
***EndState***
***State***
85
I_103_139_338_406_497_813
***Set***
bexpr -> factor ·, ;
bexpr -> factor ·, &&
bexpr -> factor ·, ||
term -> factor ·, ;
term -> factor ·, >
term -> factor ·, <
term -> factor ·, >=
term -> factor ·, <=
term -> factor ·, ==
term -> factor ·, !=
term -> factor ·, +
term -> factor ·, -
term -> factor ·, *
term -> factor ·, /
bexpr -> factor ·, )
term -> factor ·, )
bexpr -> factor ·, ,
term -> factor ·, ,
***EndSet***
***EndState***
***State***
86
I_104_140_214_269_339_367_429_459_520_550_590_836_866_931
***Set***
memberaccess -> primary · . ID, =
memberaccess -> primary · . ID, +=
memberaccess -> primary · . ID, -=
memberaccess -> primary · . ID, *=
memberaccess -> primary · . ID, /=
memberaccess -> primary · . ID, %=
factor -> primary ·, ;
memberaccess -> primary · . ID, [
factor -> primary ·, &&
factor -> primary ·, ||
memberaccess -> primary · . ID, .
factor -> primary ·, >
factor -> primary ·, <
factor -> primary ·, >=
factor -> primary ·, <=
factor -> primary ·, ==
factor -> primary ·, !=
memberaccess -> primary · . ID, ;
factor -> primary ·, +
factor -> primary ·, -
factor -> primary ·, *
factor -> primary ·, /
memberaccess -> primary · . ID, (
memberaccess -> primary · . ID, &&
memberaccess -> primary · . ID, ||
memberaccess -> primary · . ID, >
memberaccess -> primary · . ID, <
memberaccess -> primary · . ID, >=
memberaccess -> primary · . ID, <=
memberaccess -> primary · . ID, ==
memberaccess -> primary · . ID, !=
memberaccess -> primary · . ID, +
memberaccess -> primary · . ID, -
memberaccess -> primary · . ID, *
memberaccess -> primary · . ID, /
factor -> primary ·, )
memberaccess -> primary · . ID, )
factor -> primary ·, ,
memberaccess -> primary · . ID, ,
factor -> primary ·, ]
memberaccess -> primary · . ID, ]
***EndSet***
***EndState***
***State***
87
I_106_142_341_369_431_461_522_552_838_868_933
***Set***
factor -> cast ·, ;
factor -> cast ·, &&
factor -> cast ·, ||
factor -> cast ·, >
factor -> cast ·, <
factor -> cast ·, >=
factor -> cast ·, <=
factor -> cast ·, ==
factor -> cast ·, !=
factor -> cast ·, +
factor -> cast ·, -
factor -> cast ·, *
factor -> cast ·, /
factor -> cast ·, )
factor -> cast ·, ,
factor -> cast ·, ]
***EndSet***
***EndState***
***State***
88
I_108_145_216_271_345_371_433_463_524_554_592_840_870_935_977
***Set***
indexaccess -> idBracket ·, =
indexaccess -> idBracket ·, +=
indexaccess -> idBracket ·, -=
indexaccess -> idBracket ·, *=
indexaccess -> idBracket ·, /=
indexaccess -> idBracket ·, %=
indexaccess -> idBracket ·, .
indexaccess -> idBracket ·, ;
indexaccess -> idBracket ·, &&
indexaccess -> idBracket ·, ||
indexaccess -> idBracket ·, >
indexaccess -> idBracket ·, <
indexaccess -> idBracket ·, >=
indexaccess -> idBracket ·, <=
indexaccess -> idBracket ·, ==
indexaccess -> idBracket ·, !=
indexaccess -> idBracket ·, +
indexaccess -> idBracket ·, -
indexaccess -> idBracket ·, *
indexaccess -> idBracket ·, /
indexaccess -> idBracket ·, )
indexaccess -> idBracket ·, ,
indexaccess -> idBracket ·, ]
***EndSet***
***EndState***
***State***
89
I_109_303_475_984_1205_1266
***Set***
stmt -> while ( · expr ) stmt, $
stmt -> while ( · expr ) stmt, namespace
stmt -> while ( · expr ) stmt, {
stmt -> while ( · expr ) stmt, ID
stmt -> while ( · expr ) stmt, void
stmt -> while ( · expr ) stmt, bool
stmt -> while ( · expr ) stmt, int
stmt -> while ( · expr ) stmt, float
stmt -> while ( · expr ) stmt, string
stmt -> while ( · expr ) stmt, extern
stmt -> while ( · expr ) stmt, class
stmt -> while ( · expr ) stmt, (
stmt -> while ( · expr ) stmt, this
stmt -> while ( · expr ) stmt, new
stmt -> while ( · expr ) stmt, LITINT
stmt -> while ( · expr ) stmt, LITFLOAT
stmt -> while ( · expr ) stmt, LITSTRING
stmt -> while ( · expr ) stmt, LITBOOL
stmt -> while ( · expr ) stmt, null
stmt -> while ( · expr ) stmt, ++
stmt -> while ( · expr ) stmt, --
stmt -> while ( · expr ) stmt, break
stmt -> while ( · expr ) stmt, return
stmt -> while ( · expr ) stmt, delete
stmt -> while ( · expr ) stmt, while
stmt -> while ( · expr ) stmt, for
stmt -> while ( · expr ) stmt, if
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITSTRING, )
lit -> · LITBOOL, )
lit -> · null, )
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITSTRING, &&
lit -> · LITBOOL, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITSTRING, ||
lit -> · LITBOOL, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], )
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITSTRING, >
lit -> · LITBOOL, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITSTRING, <
lit -> · LITBOOL, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITSTRING, >=
lit -> · LITBOOL, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITSTRING, <=
lit -> · LITBOOL, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITSTRING, ==
lit -> · LITBOOL, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITSTRING, !=
lit -> · LITBOOL, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITSTRING, +
lit -> · LITBOOL, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITSTRING, -
lit -> · LITBOOL, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITSTRING, *
lit -> · LITBOOL, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITSTRING, /
lit -> · LITBOOL, /
lit -> · null, /
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
stmt -> while ( · expr ) stmt, }
stmt -> while ( · expr ) stmt, &&
stmt -> while ( · expr ) stmt, ||
stmt -> while ( · expr ) stmt, +
stmt -> while ( · expr ) stmt, -
stmt -> while ( · expr ) stmt, *
stmt -> while ( · expr ) stmt, /
stmt -> while ( · expr ) stmt, !
stmt -> while ( · expr ) stmt, else
***EndSet***
***EndState***
***State***
90
I_110_304_476_985_1206_1267
***Set***
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, $
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, {
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, ID
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, void
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, bool
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, int
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, float
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, string
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, extern
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, class
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, (
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, this
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, new
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, null
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, ++
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, --
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, break
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, return
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, delete
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, while
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, for
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, if
stmt -> · namespaceblock, &&
stmt -> · namespaceblock, ||
stmt -> · namespaceblock, +
stmt -> · namespaceblock, -
stmt -> · namespaceblock, *
stmt -> · namespaceblock, /
stmt -> · namespaceblock, ++
stmt -> · namespaceblock, --
stmt -> · namespaceblock, ID
stmt -> · namespaceblock, !
stmt -> · namespaceblock, (
stmt -> · namespaceblock, this
stmt -> · namespaceblock, new
stmt -> · namespaceblock, LITINT
stmt -> · namespaceblock, LITFLOAT
stmt -> · namespaceblock, LITSTRING
stmt -> · namespaceblock, LITBOOL
stmt -> · namespaceblock, null
stmt -> · statementblock, &&
stmt -> · statementblock, ||
stmt -> · statementblock, +
stmt -> · statementblock, -
stmt -> · statementblock, *
stmt -> · statementblock, /
stmt -> · statementblock, ++
stmt -> · statementblock, --
stmt -> · statementblock, ID
stmt -> · statementblock, !
stmt -> · statementblock, (
stmt -> · statementblock, this
stmt -> · statementblock, new
stmt -> · statementblock, LITINT
stmt -> · statementblock, LITFLOAT
stmt -> · statementblock, LITSTRING
stmt -> · statementblock, LITBOOL
stmt -> · statementblock, null
stmt -> · declstmt, &&
stmt -> · declstmt, ||
stmt -> · declstmt, +
stmt -> · declstmt, -
stmt -> · declstmt, *
stmt -> · declstmt, /
stmt -> · declstmt, ++
stmt -> · declstmt, --
stmt -> · declstmt, ID
stmt -> · declstmt, !
stmt -> · declstmt, (
stmt -> · declstmt, this
stmt -> · declstmt, new
stmt -> · declstmt, LITINT
stmt -> · declstmt, LITFLOAT
stmt -> · declstmt, LITSTRING
stmt -> · declstmt, LITBOOL
stmt -> · declstmt, null
stmt -> · stmtexpr ;, &&
stmt -> · stmtexpr ;, ||
stmt -> · stmtexpr ;, +
stmt -> · stmtexpr ;, -
stmt -> · stmtexpr ;, *
stmt -> · stmtexpr ;, /
stmt -> · stmtexpr ;, ++
stmt -> · stmtexpr ;, --
stmt -> · stmtexpr ;, ID
stmt -> · stmtexpr ;, !
stmt -> · stmtexpr ;, (
stmt -> · stmtexpr ;, this
stmt -> · stmtexpr ;, new
stmt -> · stmtexpr ;, LITINT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · stmtexpr ;, LITSTRING
stmt -> · stmtexpr ;, LITBOOL
stmt -> · stmtexpr ;, null
stmt -> · break ;, &&
stmt -> · break ;, ||
stmt -> · break ;, +
stmt -> · break ;, -
stmt -> · break ;, *
stmt -> · break ;, /
stmt -> · break ;, ++
stmt -> · break ;, --
stmt -> · break ;, ID
stmt -> · break ;, !
stmt -> · break ;, (
stmt -> · break ;, this
stmt -> · break ;, new
stmt -> · break ;, LITINT
stmt -> · break ;, LITFLOAT
stmt -> · break ;, LITSTRING
stmt -> · break ;, LITBOOL
stmt -> · break ;, null
stmt -> · return expr ;, &&
stmt -> · return expr ;, ||
stmt -> · return expr ;, +
stmt -> · return expr ;, -
stmt -> · return expr ;, *
stmt -> · return expr ;, /
stmt -> · return expr ;, ++
stmt -> · return expr ;, --
stmt -> · return expr ;, ID
stmt -> · return expr ;, !
stmt -> · return expr ;, (
stmt -> · return expr ;, this
stmt -> · return expr ;, new
stmt -> · return expr ;, LITINT
stmt -> · return expr ;, LITFLOAT
stmt -> · return expr ;, LITSTRING
stmt -> · return expr ;, LITBOOL
stmt -> · return expr ;, null
stmt -> · return ;, &&
stmt -> · return ;, ||
stmt -> · return ;, +
stmt -> · return ;, -
stmt -> · return ;, *
stmt -> · return ;, /
stmt -> · return ;, ++
stmt -> · return ;, --
stmt -> · return ;, ID
stmt -> · return ;, !
stmt -> · return ;, (
stmt -> · return ;, this
stmt -> · return ;, new
stmt -> · return ;, LITINT
stmt -> · return ;, LITFLOAT
stmt -> · return ;, LITSTRING
stmt -> · return ;, LITBOOL
stmt -> · return ;, null
stmt -> · delete expr ;, &&
stmt -> · delete expr ;, ||
stmt -> · delete expr ;, +
stmt -> · delete expr ;, -
stmt -> · delete expr ;, *
stmt -> · delete expr ;, /
stmt -> · delete expr ;, ++
stmt -> · delete expr ;, --
stmt -> · delete expr ;, ID
stmt -> · delete expr ;, !
stmt -> · delete expr ;, (
stmt -> · delete expr ;, this
stmt -> · delete expr ;, new
stmt -> · delete expr ;, LITINT
stmt -> · delete expr ;, LITFLOAT
stmt -> · delete expr ;, LITSTRING
stmt -> · delete expr ;, LITBOOL
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, &&
stmt -> · while ( expr ) stmt, ||
stmt -> · while ( expr ) stmt, +
stmt -> · while ( expr ) stmt, -
stmt -> · while ( expr ) stmt, *
stmt -> · while ( expr ) stmt, /
stmt -> · while ( expr ) stmt, ++
stmt -> · while ( expr ) stmt, --
stmt -> · while ( expr ) stmt, ID
stmt -> · while ( expr ) stmt, !
stmt -> · while ( expr ) stmt, (
stmt -> · while ( expr ) stmt, this
stmt -> · while ( expr ) stmt, new
stmt -> · while ( expr ) stmt, LITINT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, &&
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ||
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, +
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, -
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, *
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, /
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, !
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, &&
stmt -> · if ( expr ) stmt elifclauselist elseclause, ||
stmt -> · if ( expr ) stmt elifclauselist elseclause, +
stmt -> · if ( expr ) stmt elifclauselist elseclause, -
stmt -> · if ( expr ) stmt elifclauselist elseclause, *
stmt -> · if ( expr ) stmt elifclauselist elseclause, /
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, !
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
namespaceblock -> · namespace ID { statements }, &&
namespaceblock -> · namespace ID { statements }, ||
namespaceblock -> · namespace ID { statements }, +
namespaceblock -> · namespace ID { statements }, -
namespaceblock -> · namespace ID { statements }, *
namespaceblock -> · namespace ID { statements }, /
namespaceblock -> · namespace ID { statements }, ++
namespaceblock -> · namespace ID { statements }, --
namespaceblock -> · namespace ID { statements }, ID
namespaceblock -> · namespace ID { statements }, !
namespaceblock -> · namespace ID { statements }, (
namespaceblock -> · namespace ID { statements }, this
namespaceblock -> · namespace ID { statements }, new
namespaceblock -> · namespace ID { statements }, LITINT
namespaceblock -> · namespace ID { statements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITSTRING
namespaceblock -> · namespace ID { statements }, LITBOOL
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, &&
statementblock -> · { statements }, ||
statementblock -> · { statements }, +
statementblock -> · { statements }, -
statementblock -> · { statements }, *
statementblock -> · { statements }, /
statementblock -> · { statements }, ++
statementblock -> · { statements }, --
statementblock -> · { statements }, ID
statementblock -> · { statements }, !
statementblock -> · { statements }, (
statementblock -> · { statements }, this
statementblock -> · { statements }, new
statementblock -> · { statements }, LITINT
statementblock -> · { statements }, LITFLOAT
statementblock -> · { statements }, LITSTRING
statementblock -> · { statements }, LITBOOL
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, &&
declstmt -> · type ID ( params ) { statements }, &&
declstmt -> · extern type ID ( params ) ;, &&
declstmt -> · class ID inherit { declstatements }, &&
declstmt -> · type ID = expr ;, ||
declstmt -> · type ID ( params ) { statements }, ||
declstmt -> · extern type ID ( params ) ;, ||
declstmt -> · class ID inherit { declstatements }, ||
declstmt -> · type ID = expr ;, +
declstmt -> · type ID ( params ) { statements }, +
declstmt -> · extern type ID ( params ) ;, +
declstmt -> · class ID inherit { declstatements }, +
declstmt -> · type ID = expr ;, -
declstmt -> · type ID ( params ) { statements }, -
declstmt -> · extern type ID ( params ) ;, -
declstmt -> · class ID inherit { declstatements }, -
declstmt -> · type ID = expr ;, *
declstmt -> · type ID ( params ) { statements }, *
declstmt -> · extern type ID ( params ) ;, *
declstmt -> · class ID inherit { declstatements }, *
declstmt -> · type ID = expr ;, /
declstmt -> · type ID ( params ) { statements }, /
declstmt -> · extern type ID ( params ) ;, /
declstmt -> · class ID inherit { declstatements }, /
declstmt -> · type ID = expr ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
declstmt -> · type ID = expr ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
declstmt -> · type ID = expr ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
declstmt -> · type ID = expr ;, !
declstmt -> · type ID ( params ) { statements }, !
declstmt -> · extern type ID ( params ) ;, !
declstmt -> · class ID inherit { declstatements }, !
declstmt -> · type ID = expr ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
declstmt -> · type ID = expr ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
declstmt -> · type ID = expr ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
declstmt -> · type ID = expr ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
declstmt -> · type ID = expr ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
type -> · arrtype, ID
type -> · stype, ID
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · string, ID
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, }
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, &&
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, ||
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, +
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, -
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, *
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, /
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, !
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, else
***EndSet***
***EndState***
***State***
91
I_111_305_477_986_1207_1268
***Set***
stmt -> if ( · expr ) stmt elifclauselist elseclause, $
stmt -> if ( · expr ) stmt elifclauselist elseclause, namespace
stmt -> if ( · expr ) stmt elifclauselist elseclause, {
stmt -> if ( · expr ) stmt elifclauselist elseclause, ID
stmt -> if ( · expr ) stmt elifclauselist elseclause, void
stmt -> if ( · expr ) stmt elifclauselist elseclause, bool
stmt -> if ( · expr ) stmt elifclauselist elseclause, int
stmt -> if ( · expr ) stmt elifclauselist elseclause, float
stmt -> if ( · expr ) stmt elifclauselist elseclause, string
stmt -> if ( · expr ) stmt elifclauselist elseclause, extern
stmt -> if ( · expr ) stmt elifclauselist elseclause, class
stmt -> if ( · expr ) stmt elifclauselist elseclause, (
stmt -> if ( · expr ) stmt elifclauselist elseclause, this
stmt -> if ( · expr ) stmt elifclauselist elseclause, new
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITINT
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> if ( · expr ) stmt elifclauselist elseclause, null
stmt -> if ( · expr ) stmt elifclauselist elseclause, ++
stmt -> if ( · expr ) stmt elifclauselist elseclause, --
stmt -> if ( · expr ) stmt elifclauselist elseclause, break
stmt -> if ( · expr ) stmt elifclauselist elseclause, return
stmt -> if ( · expr ) stmt elifclauselist elseclause, delete
stmt -> if ( · expr ) stmt elifclauselist elseclause, while
stmt -> if ( · expr ) stmt elifclauselist elseclause, for
stmt -> if ( · expr ) stmt elifclauselist elseclause, if
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITSTRING, )
lit -> · LITBOOL, )
lit -> · null, )
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITSTRING, &&
lit -> · LITBOOL, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITSTRING, ||
lit -> · LITBOOL, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], )
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITSTRING, >
lit -> · LITBOOL, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITSTRING, <
lit -> · LITBOOL, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITSTRING, >=
lit -> · LITBOOL, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITSTRING, <=
lit -> · LITBOOL, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITSTRING, ==
lit -> · LITBOOL, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITSTRING, !=
lit -> · LITBOOL, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITSTRING, +
lit -> · LITBOOL, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITSTRING, -
lit -> · LITBOOL, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITSTRING, *
lit -> · LITBOOL, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITSTRING, /
lit -> · LITBOOL, /
lit -> · null, /
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
stmt -> if ( · expr ) stmt elifclauselist elseclause, }
stmt -> if ( · expr ) stmt elifclauselist elseclause, &&
stmt -> if ( · expr ) stmt elifclauselist elseclause, ||
stmt -> if ( · expr ) stmt elifclauselist elseclause, +
stmt -> if ( · expr ) stmt elifclauselist elseclause, -
stmt -> if ( · expr ) stmt elifclauselist elseclause, *
stmt -> if ( · expr ) stmt elifclauselist elseclause, /
stmt -> if ( · expr ) stmt elifclauselist elseclause, !
stmt -> if ( · expr ) stmt elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
92
I_112_306_478_987_1208_1269
***Set***
stmt -> break ; ·, $
stmt -> break ; ·, namespace
stmt -> break ; ·, {
stmt -> break ; ·, ID
stmt -> break ; ·, void
stmt -> break ; ·, bool
stmt -> break ; ·, int
stmt -> break ; ·, float
stmt -> break ; ·, string
stmt -> break ; ·, extern
stmt -> break ; ·, class
stmt -> break ; ·, (
stmt -> break ; ·, this
stmt -> break ; ·, new
stmt -> break ; ·, LITINT
stmt -> break ; ·, LITFLOAT
stmt -> break ; ·, LITSTRING
stmt -> break ; ·, LITBOOL
stmt -> break ; ·, null
stmt -> break ; ·, ++
stmt -> break ; ·, --
stmt -> break ; ·, break
stmt -> break ; ·, return
stmt -> break ; ·, delete
stmt -> break ; ·, while
stmt -> break ; ·, for
stmt -> break ; ·, if
stmt -> break ; ·, }
stmt -> break ; ·, &&
stmt -> break ; ·, ||
stmt -> break ; ·, +
stmt -> break ; ·, -
stmt -> break ; ·, *
stmt -> break ; ·, /
stmt -> break ; ·, !
stmt -> break ; ·, else
***EndSet***
***EndState***
***State***
93
I_113_307_479_988_1209_1270
***Set***
stmt -> return ; ·, $
stmt -> return ; ·, namespace
stmt -> return ; ·, {
stmt -> return ; ·, ID
stmt -> return ; ·, void
stmt -> return ; ·, bool
stmt -> return ; ·, int
stmt -> return ; ·, float
stmt -> return ; ·, string
stmt -> return ; ·, extern
stmt -> return ; ·, class
stmt -> return ; ·, (
stmt -> return ; ·, this
stmt -> return ; ·, new
stmt -> return ; ·, LITINT
stmt -> return ; ·, LITFLOAT
stmt -> return ; ·, LITSTRING
stmt -> return ; ·, LITBOOL
stmt -> return ; ·, null
stmt -> return ; ·, ++
stmt -> return ; ·, --
stmt -> return ; ·, break
stmt -> return ; ·, return
stmt -> return ; ·, delete
stmt -> return ; ·, while
stmt -> return ; ·, for
stmt -> return ; ·, if
stmt -> return ; ·, }
stmt -> return ; ·, &&
stmt -> return ; ·, ||
stmt -> return ; ·, +
stmt -> return ; ·, -
stmt -> return ; ·, *
stmt -> return ; ·, /
stmt -> return ; ·, !
stmt -> return ; ·, else
***EndSet***
***EndState***
***State***
94
I_114_308_480_989_1210_1271
***Set***
stmt -> return expr · ;, $
stmt -> return expr · ;, namespace
stmt -> return expr · ;, {
stmt -> return expr · ;, ID
stmt -> return expr · ;, void
stmt -> return expr · ;, bool
stmt -> return expr · ;, int
stmt -> return expr · ;, float
stmt -> return expr · ;, string
stmt -> return expr · ;, extern
stmt -> return expr · ;, class
stmt -> return expr · ;, (
stmt -> return expr · ;, this
stmt -> return expr · ;, new
stmt -> return expr · ;, LITINT
stmt -> return expr · ;, LITFLOAT
stmt -> return expr · ;, LITSTRING
stmt -> return expr · ;, LITBOOL
stmt -> return expr · ;, null
stmt -> return expr · ;, ++
stmt -> return expr · ;, --
stmt -> return expr · ;, break
stmt -> return expr · ;, return
stmt -> return expr · ;, delete
stmt -> return expr · ;, while
stmt -> return expr · ;, for
stmt -> return expr · ;, if
stmt -> return expr · ;, }
stmt -> return expr · ;, &&
stmt -> return expr · ;, ||
stmt -> return expr · ;, +
stmt -> return expr · ;, -
stmt -> return expr · ;, *
stmt -> return expr · ;, /
stmt -> return expr · ;, !
stmt -> return expr · ;, else
***EndSet***
***EndState***
***State***
95
I_134_205_263_584_627_679_701_758_780_1056_1078_1112
***Set***
primary -> ( expr · ), .
primary -> ( expr · ), ;
primary -> ( expr · ), &&
primary -> ( expr · ), ||
primary -> ( expr · ), >
primary -> ( expr · ), <
primary -> ( expr · ), >=
primary -> ( expr · ), <=
primary -> ( expr · ), ==
primary -> ( expr · ), !=
primary -> ( expr · ), +
primary -> ( expr · ), -
primary -> ( expr · ), *
primary -> ( expr · ), /
primary -> ( expr · ), )
primary -> ( expr · ), ,
primary -> ( expr · ), ]
***EndSet***
***EndState***
***State***
96
I_156_309_481_990_1211_1272
***Set***
statementblock -> { statements · }, $
statementblock -> { statements · }, namespace
statementblock -> { statements · }, {
statementblock -> { statements · }, ID
statementblock -> { statements · }, void
statementblock -> { statements · }, bool
statementblock -> { statements · }, int
statementblock -> { statements · }, float
statementblock -> { statements · }, string
statementblock -> { statements · }, extern
statementblock -> { statements · }, class
statementblock -> { statements · }, (
statementblock -> { statements · }, this
statementblock -> { statements · }, new
statementblock -> { statements · }, LITINT
statementblock -> { statements · }, LITFLOAT
statementblock -> { statements · }, LITSTRING
statementblock -> { statements · }, LITBOOL
statementblock -> { statements · }, null
statementblock -> { statements · }, ++
statementblock -> { statements · }, --
statementblock -> { statements · }, break
statementblock -> { statements · }, return
statementblock -> { statements · }, delete
statementblock -> { statements · }, while
statementblock -> { statements · }, for
statementblock -> { statements · }, if
statements -> statements · stmt, }
statements -> statements · stmt, namespace
statements -> statements · stmt, {
statements -> statements · stmt, ID
statements -> statements · stmt, void
statements -> statements · stmt, bool
statements -> statements · stmt, int
statements -> statements · stmt, float
statements -> statements · stmt, string
statements -> statements · stmt, extern
statements -> statements · stmt, class
statements -> statements · stmt, (
statements -> statements · stmt, this
statements -> statements · stmt, new
statements -> statements · stmt, LITINT
statements -> statements · stmt, LITFLOAT
statements -> statements · stmt, LITSTRING
statements -> statements · stmt, LITBOOL
statements -> statements · stmt, null
statements -> statements · stmt, ++
statements -> statements · stmt, --
statements -> statements · stmt, break
statements -> statements · stmt, return
statements -> statements · stmt, delete
statements -> statements · stmt, while
statements -> statements · stmt, for
statements -> statements · stmt, if
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · string, ID
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
statementblock -> { statements · }, }
statementblock -> { statements · }, &&
statementblock -> { statements · }, ||
statementblock -> { statements · }, +
statementblock -> { statements · }, -
statementblock -> { statements · }, *
statementblock -> { statements · }, /
statementblock -> { statements · }, !
statementblock -> { statements · }, else
***EndSet***
***EndState***
***State***
97
I_163_209_264_585_628_680_702_759_781_1057_1079_1113_1160
***Set***
incdec -> -- ID ·, ;
incdec -> -- ID ·, &&
incdec -> -- ID ·, ||
incdec -> -- ID ·, >
incdec -> -- ID ·, <
incdec -> -- ID ·, >=
incdec -> -- ID ·, <=
incdec -> -- ID ·, ==
incdec -> -- ID ·, !=
incdec -> -- ID ·, +
incdec -> -- ID ·, -
incdec -> -- ID ·, *
incdec -> -- ID ·, /
incdec -> -- ID ·, )
incdec -> -- ID ·, ,
incdec -> -- ID ·, ]
***EndSet***
***EndState***
***State***
98
I_164_210_265_586_629_681_703_760_782_1058_1080_1114_1161
***Set***
incdec -> ++ ID ·, ;
incdec -> ++ ID ·, &&
incdec -> ++ ID ·, ||
incdec -> ++ ID ·, >
incdec -> ++ ID ·, <
incdec -> ++ ID ·, >=
incdec -> ++ ID ·, <=
incdec -> ++ ID ·, ==
incdec -> ++ ID ·, !=
incdec -> ++ ID ·, +
incdec -> ++ ID ·, -
incdec -> ++ ID ·, *
incdec -> ++ ID ·, /
incdec -> ++ ID ·, )
incdec -> ++ ID ·, ,
incdec -> ++ ID ·, ]
***EndSet***
***EndState***
***State***
99
I_165_218_273_594_632_684_706_763_785_1061_1083_1117_1162
***Set***
call -> ID ( · args ), ;
call -> ID ( · args ), .
args -> ·, )
args -> · expr, )
args -> · args , expr, )
expr -> · assign, )
expr -> · nexpr, )
args -> ·, ,
args -> · expr, ,
args -> · args , expr, ,
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
expr -> · assign, ,
expr -> · nexpr, ,
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · factor, ,
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITSTRING, )
lit -> · LITBOOL, )
lit -> · null, )
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITSTRING, &&
lit -> · LITBOOL, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITSTRING, ||
lit -> · LITBOOL, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], )
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITSTRING, ,
lit -> · LITBOOL, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITSTRING, >
lit -> · LITBOOL, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITSTRING, <
lit -> · LITBOOL, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITSTRING, >=
lit -> · LITBOOL, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITSTRING, <=
lit -> · LITBOOL, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITSTRING, ==
lit -> · LITBOOL, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITSTRING, !=
lit -> · LITBOOL, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITSTRING, +
lit -> · LITBOOL, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITSTRING, -
lit -> · LITBOOL, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITSTRING, *
lit -> · LITBOOL, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITSTRING, /
lit -> · LITBOOL, /
lit -> · null, /
idBracket -> · ID [ optidx ], ,
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
call -> ID ( · args ), &&
call -> ID ( · args ), ||
call -> ID ( · args ), >
call -> ID ( · args ), <
call -> ID ( · args ), >=
call -> ID ( · args ), <=
call -> ID ( · args ), ==
call -> ID ( · args ), !=
call -> ID ( · args ), +
call -> ID ( · args ), -
call -> ID ( · args ), *
call -> ID ( · args ), /
call -> ID ( · args ), )
call -> ID ( · args ), ,
call -> ID ( · args ), ]
***EndSet***
***EndState***
***State***
100
I_166_183_188_219_274_394_487_595_633_685_707_764_786_803_1062_1084_1118_1163
***Set***
idBracket -> ID [ · optidx ], ID
idBracket -> ID [ · optidx ], =
idBracket -> ID [ · optidx ], +=
idBracket -> ID [ · optidx ], -=
idBracket -> ID [ · optidx ], *=
idBracket -> ID [ · optidx ], /=
idBracket -> ID [ · optidx ], %=
idBracket -> ID [ · optidx ], .
optidx -> · aexpr, ]
optidx -> ·, ]
aexpr -> · aexpr + term, ]
aexpr -> · aexpr - term, ]
aexpr -> · term, ]
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ]
term -> · term / factor, ]
term -> · factor, ]
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITINT, ]
lit -> · LITFLOAT, ]
lit -> · LITSTRING, ]
lit -> · LITBOOL, ]
lit -> · null, ]
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITSTRING, +
lit -> · LITBOOL, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITSTRING, -
lit -> · LITBOOL, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITSTRING, *
lit -> · LITBOOL, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITSTRING, /
lit -> · LITBOOL, /
lit -> · null, /
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ]
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
idBracket -> ID [ · optidx ], ;
idBracket -> ID [ · optidx ], &&
idBracket -> ID [ · optidx ], ||
idBracket -> ID [ · optidx ], >
idBracket -> ID [ · optidx ], <
idBracket -> ID [ · optidx ], >=
idBracket -> ID [ · optidx ], <=
idBracket -> ID [ · optidx ], ==
idBracket -> ID [ · optidx ], !=
idBracket -> ID [ · optidx ], +
idBracket -> ID [ · optidx ], -
idBracket -> ID [ · optidx ], *
idBracket -> ID [ · optidx ], /
idBracket -> ID [ · optidx ], )
idBracket -> ID [ · optidx ], ,
idBracket -> ID [ · optidx ], ]
***EndSet***
***EndState***
***State***
101
I_167_220_275_596_634_686_708_765_787_1063_1085_1119_1164
***Set***
incdec -> ID -- ·, ;
incdec -> ID -- ·, &&
incdec -> ID -- ·, ||
incdec -> ID -- ·, >
incdec -> ID -- ·, <
incdec -> ID -- ·, >=
incdec -> ID -- ·, <=
incdec -> ID -- ·, ==
incdec -> ID -- ·, !=
incdec -> ID -- ·, +
incdec -> ID -- ·, -
incdec -> ID -- ·, *
incdec -> ID -- ·, /
incdec -> ID -- ·, )
incdec -> ID -- ·, ,
incdec -> ID -- ·, ]
***EndSet***
***EndState***
***State***
102
I_168_221_276_597_635_687_709_766_788_1064_1086_1120_1165
***Set***
incdec -> ID ++ ·, ;
incdec -> ID ++ ·, &&
incdec -> ID ++ ·, ||
incdec -> ID ++ ·, >
incdec -> ID ++ ·, <
incdec -> ID ++ ·, >=
incdec -> ID ++ ·, <=
incdec -> ID ++ ·, ==
incdec -> ID ++ ·, !=
incdec -> ID ++ ·, +
incdec -> ID ++ ·, -
incdec -> ID ++ ·, *
incdec -> ID ++ ·, /
incdec -> ID ++ ·, )
incdec -> ID ++ ·, ,
incdec -> ID ++ ·, ]
***EndSet***
***EndState***
***State***
103
I_169_311
***Set***
statements -> statements stmt ·, $
statements -> statements stmt ·, namespace
statements -> statements stmt ·, {
statements -> statements stmt ·, ID
statements -> statements stmt ·, void
statements -> statements stmt ·, bool
statements -> statements stmt ·, int
statements -> statements stmt ·, float
statements -> statements stmt ·, string
statements -> statements stmt ·, extern
statements -> statements stmt ·, class
statements -> statements stmt ·, (
statements -> statements stmt ·, this
statements -> statements stmt ·, new
statements -> statements stmt ·, LITINT
statements -> statements stmt ·, LITFLOAT
statements -> statements stmt ·, LITSTRING
statements -> statements stmt ·, LITBOOL
statements -> statements stmt ·, null
statements -> statements stmt ·, ++
statements -> statements stmt ·, --
statements -> statements stmt ·, break
statements -> statements stmt ·, return
statements -> statements stmt ·, delete
statements -> statements stmt ·, while
statements -> statements stmt ·, for
statements -> statements stmt ·, if
statements -> statements stmt ·, }
***EndSet***
***EndState***
***State***
104
I_170_312_483_992_1213_1274
***Set***
stmt -> stmtexpr ; ·, $
stmt -> stmtexpr ; ·, namespace
stmt -> stmtexpr ; ·, {
stmt -> stmtexpr ; ·, ID
stmt -> stmtexpr ; ·, void
stmt -> stmtexpr ; ·, bool
stmt -> stmtexpr ; ·, int
stmt -> stmtexpr ; ·, float
stmt -> stmtexpr ; ·, string
stmt -> stmtexpr ; ·, extern
stmt -> stmtexpr ; ·, class
stmt -> stmtexpr ; ·, (
stmt -> stmtexpr ; ·, this
stmt -> stmtexpr ; ·, new
stmt -> stmtexpr ; ·, LITINT
stmt -> stmtexpr ; ·, LITFLOAT
stmt -> stmtexpr ; ·, LITSTRING
stmt -> stmtexpr ; ·, LITBOOL
stmt -> stmtexpr ; ·, null
stmt -> stmtexpr ; ·, ++
stmt -> stmtexpr ; ·, --
stmt -> stmtexpr ; ·, break
stmt -> stmtexpr ; ·, return
stmt -> stmtexpr ; ·, delete
stmt -> stmtexpr ; ·, while
stmt -> stmtexpr ; ·, for
stmt -> stmtexpr ; ·, if
stmt -> stmtexpr ; ·, }
stmt -> stmtexpr ; ·, &&
stmt -> stmtexpr ; ·, ||
stmt -> stmtexpr ; ·, +
stmt -> stmtexpr ; ·, -
stmt -> stmtexpr ; ·, *
stmt -> stmtexpr ; ·, /
stmt -> stmtexpr ; ·, !
stmt -> stmtexpr ; ·, else
***EndSet***
***EndState***
***State***
105
I_171_313_484_906_993_1214_1275
***Set***
declstmt -> type ID · = expr ;, $
declstmt -> type ID · ( params ) { statements }, $
declstmt -> type ID · = expr ;, namespace
declstmt -> type ID · ( params ) { statements }, namespace
declstmt -> type ID · = expr ;, {
declstmt -> type ID · ( params ) { statements }, {
declstmt -> type ID · = expr ;, ID
declstmt -> type ID · ( params ) { statements }, ID
declstmt -> type ID · = expr ;, void
declstmt -> type ID · ( params ) { statements }, void
declstmt -> type ID · = expr ;, bool
declstmt -> type ID · ( params ) { statements }, bool
declstmt -> type ID · = expr ;, int
declstmt -> type ID · ( params ) { statements }, int
declstmt -> type ID · = expr ;, float
declstmt -> type ID · ( params ) { statements }, float
declstmt -> type ID · = expr ;, string
declstmt -> type ID · ( params ) { statements }, string
declstmt -> type ID · = expr ;, extern
declstmt -> type ID · ( params ) { statements }, extern
declstmt -> type ID · = expr ;, class
declstmt -> type ID · ( params ) { statements }, class
declstmt -> type ID · = expr ;, (
declstmt -> type ID · ( params ) { statements }, (
declstmt -> type ID · = expr ;, this
declstmt -> type ID · ( params ) { statements }, this
declstmt -> type ID · = expr ;, new
declstmt -> type ID · ( params ) { statements }, new
declstmt -> type ID · = expr ;, LITINT
declstmt -> type ID · ( params ) { statements }, LITINT
declstmt -> type ID · = expr ;, LITFLOAT
declstmt -> type ID · ( params ) { statements }, LITFLOAT
declstmt -> type ID · = expr ;, LITSTRING
declstmt -> type ID · ( params ) { statements }, LITSTRING
declstmt -> type ID · = expr ;, LITBOOL
declstmt -> type ID · ( params ) { statements }, LITBOOL
declstmt -> type ID · = expr ;, null
declstmt -> type ID · ( params ) { statements }, null
declstmt -> type ID · = expr ;, ++
declstmt -> type ID · ( params ) { statements }, ++
declstmt -> type ID · = expr ;, --
declstmt -> type ID · ( params ) { statements }, --
declstmt -> type ID · = expr ;, break
declstmt -> type ID · ( params ) { statements }, break
declstmt -> type ID · = expr ;, return
declstmt -> type ID · ( params ) { statements }, return
declstmt -> type ID · = expr ;, delete
declstmt -> type ID · ( params ) { statements }, delete
declstmt -> type ID · = expr ;, while
declstmt -> type ID · ( params ) { statements }, while
declstmt -> type ID · = expr ;, for
declstmt -> type ID · ( params ) { statements }, for
declstmt -> type ID · = expr ;, if
declstmt -> type ID · ( params ) { statements }, if
declstmt -> type ID · = expr ;, }
declstmt -> type ID · ( params ) { statements }, }
declstmt -> type ID · = expr ;, &&
declstmt -> type ID · ( params ) { statements }, &&
declstmt -> type ID · = expr ;, ||
declstmt -> type ID · ( params ) { statements }, ||
declstmt -> type ID · = expr ;, +
declstmt -> type ID · ( params ) { statements }, +
declstmt -> type ID · = expr ;, -
declstmt -> type ID · ( params ) { statements }, -
declstmt -> type ID · = expr ;, *
declstmt -> type ID · ( params ) { statements }, *
declstmt -> type ID · = expr ;, /
declstmt -> type ID · ( params ) { statements }, /
declstmt -> type ID · = expr ;, !
declstmt -> type ID · ( params ) { statements }, !
declstmt -> type ID · = expr ;, else
declstmt -> type ID · ( params ) { statements }, else
***EndSet***
***EndState***
***State***
106
I_172_189_395_397_488_804_885_940_953_998_1011_1220_1233_1249
***Set***
primitiveBracket -> primitive [ · optidx ], ID
optidx -> · aexpr, ]
optidx -> ·, ]
aexpr -> · aexpr + term, ]
aexpr -> · aexpr - term, ]
aexpr -> · term, ]
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ]
term -> · term / factor, ]
term -> · factor, ]
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITINT, ]
lit -> · LITFLOAT, ]
lit -> · LITSTRING, ]
lit -> · LITBOOL, ]
lit -> · null, ]
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITSTRING, +
lit -> · LITBOOL, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITSTRING, -
lit -> · LITBOOL, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITSTRING, *
lit -> · LITBOOL, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITSTRING, /
lit -> · LITBOOL, /
lit -> · null, /
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ]
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
primitiveBracket -> primitive [ · optidx ], .
primitiveBracket -> primitive [ · optidx ], ;
primitiveBracket -> primitive [ · optidx ], &&
primitiveBracket -> primitive [ · optidx ], ||
primitiveBracket -> primitive [ · optidx ], >
primitiveBracket -> primitive [ · optidx ], <
primitiveBracket -> primitive [ · optidx ], >=
primitiveBracket -> primitive [ · optidx ], <=
primitiveBracket -> primitive [ · optidx ], ==
primitiveBracket -> primitive [ · optidx ], !=
primitiveBracket -> primitive [ · optidx ], +
primitiveBracket -> primitive [ · optidx ], -
primitiveBracket -> primitive [ · optidx ], *
primitiveBracket -> primitive [ · optidx ], /
primitiveBracket -> primitive [ · optidx ], )
primitiveBracket -> primitive [ · optidx ], ,
primitiveBracket -> primitive [ · optidx ], ]
***EndSet***
***EndState***
***State***
107
I_173_235_290_399_491_610_640_692_710_771_789_807_1069_1087_1121
***Set***
memberaccess -> primary . · ID, (
memberaccess -> primary . · ID, =
memberaccess -> primary . · ID, +=
memberaccess -> primary . · ID, -=
memberaccess -> primary . · ID, *=
memberaccess -> primary . · ID, /=
memberaccess -> primary . · ID, %=
memberaccess -> primary . · ID, [
memberaccess -> primary . · ID, .
memberaccess -> primary . · ID, ;
memberaccess -> primary . · ID, &&
memberaccess -> primary . · ID, ||
memberaccess -> primary . · ID, >
memberaccess -> primary . · ID, <
memberaccess -> primary . · ID, >=
memberaccess -> primary . · ID, <=
memberaccess -> primary . · ID, ==
memberaccess -> primary . · ID, !=
memberaccess -> primary . · ID, +
memberaccess -> primary . · ID, -
memberaccess -> primary . · ID, *
memberaccess -> primary . · ID, /
memberaccess -> primary . · ID, )
memberaccess -> primary . · ID, ,
memberaccess -> primary . · ID, ]
***EndSet***
***EndState***
***State***
108
I_174_291_611
***Set***
assign -> lvalue = · expr, ;
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITSTRING, ;
lit -> · LITBOOL, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITSTRING, &&
lit -> · LITBOOL, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITSTRING, ||
lit -> · LITBOOL, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITSTRING, >
lit -> · LITBOOL, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITSTRING, <
lit -> · LITBOOL, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITSTRING, >=
lit -> · LITBOOL, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITSTRING, <=
lit -> · LITBOOL, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITSTRING, ==
lit -> · LITBOOL, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITSTRING, !=
lit -> · LITBOOL, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITSTRING, +
lit -> · LITBOOL, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITSTRING, -
lit -> · LITBOOL, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITSTRING, *
lit -> · LITBOOL, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITSTRING, /
lit -> · LITBOOL, /
lit -> · null, /
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
assign -> lvalue = · expr, )
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITSTRING, )
lit -> · LITBOOL, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
assign -> lvalue = · expr, ,
expr -> · assign, ,
expr -> · nexpr, ,
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · factor, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITSTRING, ,
lit -> · LITBOOL, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
109
I_175_292_612
***Set***
assign -> lvalue += · expr, ;
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITSTRING, ;
lit -> · LITBOOL, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITSTRING, &&
lit -> · LITBOOL, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITSTRING, ||
lit -> · LITBOOL, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITSTRING, >
lit -> · LITBOOL, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITSTRING, <
lit -> · LITBOOL, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITSTRING, >=
lit -> · LITBOOL, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITSTRING, <=
lit -> · LITBOOL, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITSTRING, ==
lit -> · LITBOOL, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITSTRING, !=
lit -> · LITBOOL, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITSTRING, +
lit -> · LITBOOL, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITSTRING, -
lit -> · LITBOOL, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITSTRING, *
lit -> · LITBOOL, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITSTRING, /
lit -> · LITBOOL, /
lit -> · null, /
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
assign -> lvalue += · expr, )
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITSTRING, )
lit -> · LITBOOL, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
assign -> lvalue += · expr, ,
expr -> · assign, ,
expr -> · nexpr, ,
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · factor, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITSTRING, ,
lit -> · LITBOOL, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
110
I_176_293_613
***Set***
assign -> lvalue -= · expr, ;
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITSTRING, ;
lit -> · LITBOOL, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITSTRING, &&
lit -> · LITBOOL, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITSTRING, ||
lit -> · LITBOOL, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITSTRING, >
lit -> · LITBOOL, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITSTRING, <
lit -> · LITBOOL, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITSTRING, >=
lit -> · LITBOOL, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITSTRING, <=
lit -> · LITBOOL, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITSTRING, ==
lit -> · LITBOOL, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITSTRING, !=
lit -> · LITBOOL, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITSTRING, +
lit -> · LITBOOL, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITSTRING, -
lit -> · LITBOOL, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITSTRING, *
lit -> · LITBOOL, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITSTRING, /
lit -> · LITBOOL, /
lit -> · null, /
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
assign -> lvalue -= · expr, )
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITSTRING, )
lit -> · LITBOOL, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
assign -> lvalue -= · expr, ,
expr -> · assign, ,
expr -> · nexpr, ,
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · factor, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITSTRING, ,
lit -> · LITBOOL, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
111
I_177_294_614
***Set***
assign -> lvalue *= · expr, ;
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITSTRING, ;
lit -> · LITBOOL, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITSTRING, &&
lit -> · LITBOOL, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITSTRING, ||
lit -> · LITBOOL, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITSTRING, >
lit -> · LITBOOL, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITSTRING, <
lit -> · LITBOOL, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITSTRING, >=
lit -> · LITBOOL, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITSTRING, <=
lit -> · LITBOOL, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITSTRING, ==
lit -> · LITBOOL, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITSTRING, !=
lit -> · LITBOOL, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITSTRING, +
lit -> · LITBOOL, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITSTRING, -
lit -> · LITBOOL, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITSTRING, *
lit -> · LITBOOL, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITSTRING, /
lit -> · LITBOOL, /
lit -> · null, /
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
assign -> lvalue *= · expr, )
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITSTRING, )
lit -> · LITBOOL, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
assign -> lvalue *= · expr, ,
expr -> · assign, ,
expr -> · nexpr, ,
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · factor, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITSTRING, ,
lit -> · LITBOOL, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
112
I_178_295_615
***Set***
assign -> lvalue /= · expr, ;
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITSTRING, ;
lit -> · LITBOOL, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITSTRING, &&
lit -> · LITBOOL, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITSTRING, ||
lit -> · LITBOOL, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITSTRING, >
lit -> · LITBOOL, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITSTRING, <
lit -> · LITBOOL, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITSTRING, >=
lit -> · LITBOOL, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITSTRING, <=
lit -> · LITBOOL, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITSTRING, ==
lit -> · LITBOOL, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITSTRING, !=
lit -> · LITBOOL, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITSTRING, +
lit -> · LITBOOL, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITSTRING, -
lit -> · LITBOOL, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITSTRING, *
lit -> · LITBOOL, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITSTRING, /
lit -> · LITBOOL, /
lit -> · null, /
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
assign -> lvalue /= · expr, )
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITSTRING, )
lit -> · LITBOOL, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
assign -> lvalue /= · expr, ,
expr -> · assign, ,
expr -> · nexpr, ,
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · factor, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITSTRING, ,
lit -> · LITBOOL, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
113
I_179_296_616
***Set***
assign -> lvalue %= · expr, ;
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITSTRING, ;
lit -> · LITBOOL, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITSTRING, &&
lit -> · LITBOOL, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITSTRING, ||
lit -> · LITBOOL, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITSTRING, >
lit -> · LITBOOL, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITSTRING, <
lit -> · LITBOOL, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITSTRING, >=
lit -> · LITBOOL, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITSTRING, <=
lit -> · LITBOOL, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITSTRING, ==
lit -> · LITBOOL, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITSTRING, !=
lit -> · LITBOOL, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITSTRING, +
lit -> · LITBOOL, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITSTRING, -
lit -> · LITBOOL, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITSTRING, *
lit -> · LITBOOL, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITSTRING, /
lit -> · LITBOOL, /
lit -> · null, /
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
assign -> lvalue %= · expr, )
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITSTRING, )
lit -> · LITBOOL, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
assign -> lvalue %= · expr, ,
expr -> · assign, ,
expr -> · nexpr, ,
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · factor, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITSTRING, ,
lit -> · LITBOOL, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
114
I_180_236_297_617_641_693_711_772_790_1070_1088_1122_1167
***Set***
call -> memberaccess ( · args ), ;
call -> memberaccess ( · args ), .
args -> ·, )
args -> · expr, )
args -> · args , expr, )
expr -> · assign, )
expr -> · nexpr, )
args -> ·, ,
args -> · expr, ,
args -> · args , expr, ,
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
expr -> · assign, ,
expr -> · nexpr, ,
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · factor, ,
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITSTRING, )
lit -> · LITBOOL, )
lit -> · null, )
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITSTRING, &&
lit -> · LITBOOL, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITSTRING, ||
lit -> · LITBOOL, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], )
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITSTRING, ,
lit -> · LITBOOL, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITSTRING, >
lit -> · LITBOOL, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITSTRING, <
lit -> · LITBOOL, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITSTRING, >=
lit -> · LITBOOL, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITSTRING, <=
lit -> · LITBOOL, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITSTRING, ==
lit -> · LITBOOL, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITSTRING, !=
lit -> · LITBOOL, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITSTRING, +
lit -> · LITBOOL, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITSTRING, -
lit -> · LITBOOL, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITSTRING, *
lit -> · LITBOOL, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITSTRING, /
lit -> · LITBOOL, /
lit -> · null, /
idBracket -> · ID [ optidx ], ,
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
call -> memberaccess ( · args ), &&
call -> memberaccess ( · args ), ||
call -> memberaccess ( · args ), >
call -> memberaccess ( · args ), <
call -> memberaccess ( · args ), >=
call -> memberaccess ( · args ), <=
call -> memberaccess ( · args ), ==
call -> memberaccess ( · args ), !=
call -> memberaccess ( · args ), +
call -> memberaccess ( · args ), -
call -> memberaccess ( · args ), *
call -> memberaccess ( · args ), /
call -> memberaccess ( · args ), )
call -> memberaccess ( · args ), ,
call -> memberaccess ( · args ), ]
***EndSet***
***EndState***
***State***
115
I_181_237_298_400_492_618_642_694_712_773_791_808_1071_1089_1123
***Set***
indexaccess -> memberaccess [ · aexpr ], =
indexaccess -> memberaccess [ · aexpr ], +=
indexaccess -> memberaccess [ · aexpr ], -=
indexaccess -> memberaccess [ · aexpr ], *=
indexaccess -> memberaccess [ · aexpr ], /=
indexaccess -> memberaccess [ · aexpr ], %=
indexaccess -> memberaccess [ · aexpr ], .
aexpr -> · aexpr + term, ]
aexpr -> · aexpr - term, ]
aexpr -> · term, ]
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ]
term -> · term / factor, ]
term -> · factor, ]
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITINT, ]
lit -> · LITFLOAT, ]
lit -> · LITSTRING, ]
lit -> · LITBOOL, ]
lit -> · null, ]
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITSTRING, +
lit -> · LITBOOL, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITSTRING, -
lit -> · LITBOOL, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITSTRING, *
lit -> · LITBOOL, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITSTRING, /
lit -> · LITBOOL, /
lit -> · null, /
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ]
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
indexaccess -> memberaccess [ · aexpr ], ;
indexaccess -> memberaccess [ · aexpr ], &&
indexaccess -> memberaccess [ · aexpr ], ||
indexaccess -> memberaccess [ · aexpr ], >
indexaccess -> memberaccess [ · aexpr ], <
indexaccess -> memberaccess [ · aexpr ], >=
indexaccess -> memberaccess [ · aexpr ], <=
indexaccess -> memberaccess [ · aexpr ], ==
indexaccess -> memberaccess [ · aexpr ], !=
indexaccess -> memberaccess [ · aexpr ], +
indexaccess -> memberaccess [ · aexpr ], -
indexaccess -> memberaccess [ · aexpr ], *
indexaccess -> memberaccess [ · aexpr ], /
indexaccess -> memberaccess [ · aexpr ], )
indexaccess -> memberaccess [ · aexpr ], ,
indexaccess -> memberaccess [ · aexpr ], ]
***EndSet***
***EndState***
***State***
116
I_182_567_716_1170_1296_1339
***Set***
namespaceblock -> namespace ID { · statements }, $
namespaceblock -> namespace ID { · statements }, namespace
namespaceblock -> namespace ID { · statements }, {
namespaceblock -> namespace ID { · statements }, ID
namespaceblock -> namespace ID { · statements }, void
namespaceblock -> namespace ID { · statements }, bool
namespaceblock -> namespace ID { · statements }, int
namespaceblock -> namespace ID { · statements }, float
namespaceblock -> namespace ID { · statements }, string
namespaceblock -> namespace ID { · statements }, extern
namespaceblock -> namespace ID { · statements }, class
namespaceblock -> namespace ID { · statements }, (
namespaceblock -> namespace ID { · statements }, this
namespaceblock -> namespace ID { · statements }, new
namespaceblock -> namespace ID { · statements }, LITINT
namespaceblock -> namespace ID { · statements }, LITFLOAT
namespaceblock -> namespace ID { · statements }, LITSTRING
namespaceblock -> namespace ID { · statements }, LITBOOL
namespaceblock -> namespace ID { · statements }, null
namespaceblock -> namespace ID { · statements }, ++
namespaceblock -> namespace ID { · statements }, --
namespaceblock -> namespace ID { · statements }, break
namespaceblock -> namespace ID { · statements }, return
namespaceblock -> namespace ID { · statements }, delete
namespaceblock -> namespace ID { · statements }, while
namespaceblock -> namespace ID { · statements }, for
namespaceblock -> namespace ID { · statements }, if
statements -> · statements stmt, }
statements -> · stmt, }
statements -> ·, }
statements -> · statements stmt, namespace
statements -> · statements stmt, {
statements -> · statements stmt, ID
statements -> · statements stmt, void
statements -> · statements stmt, bool
statements -> · statements stmt, int
statements -> · statements stmt, float
statements -> · statements stmt, string
statements -> · statements stmt, extern
statements -> · statements stmt, class
statements -> · statements stmt, (
statements -> · statements stmt, this
statements -> · statements stmt, new
statements -> · statements stmt, LITINT
statements -> · statements stmt, LITFLOAT
statements -> · statements stmt, LITSTRING
statements -> · statements stmt, LITBOOL
statements -> · statements stmt, null
statements -> · statements stmt, ++
statements -> · statements stmt, --
statements -> · statements stmt, break
statements -> · statements stmt, return
statements -> · statements stmt, delete
statements -> · statements stmt, while
statements -> · statements stmt, for
statements -> · statements stmt, if
statements -> · stmt, namespace
statements -> · stmt, {
statements -> · stmt, ID
statements -> · stmt, void
statements -> · stmt, bool
statements -> · stmt, int
statements -> · stmt, float
statements -> · stmt, string
statements -> · stmt, extern
statements -> · stmt, class
statements -> · stmt, (
statements -> · stmt, this
statements -> · stmt, new
statements -> · stmt, LITINT
statements -> · stmt, LITFLOAT
statements -> · stmt, LITSTRING
statements -> · stmt, LITBOOL
statements -> · stmt, null
statements -> · stmt, ++
statements -> · stmt, --
statements -> · stmt, break
statements -> · stmt, return
statements -> · stmt, delete
statements -> · stmt, while
statements -> · stmt, for
statements -> · stmt, if
statements -> ·, namespace
statements -> ·, {
statements -> ·, ID
statements -> ·, void
statements -> ·, bool
statements -> ·, int
statements -> ·, float
statements -> ·, string
statements -> ·, extern
statements -> ·, class
statements -> ·, (
statements -> ·, this
statements -> ·, new
statements -> ·, LITINT
statements -> ·, LITFLOAT
statements -> ·, LITSTRING
statements -> ·, LITBOOL
statements -> ·, null
statements -> ·, ++
statements -> ·, --
statements -> ·, break
statements -> ·, return
statements -> ·, delete
statements -> ·, while
statements -> ·, for
statements -> ·, if
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · string, ID
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
namespaceblock -> namespace ID { · statements }, }
namespaceblock -> namespace ID { · statements }, &&
namespaceblock -> namespace ID { · statements }, ||
namespaceblock -> namespace ID { · statements }, +
namespaceblock -> namespace ID { · statements }, -
namespaceblock -> namespace ID { · statements }, *
namespaceblock -> namespace ID { · statements }, /
namespaceblock -> namespace ID { · statements }, !
namespaceblock -> namespace ID { · statements }, else
***EndSet***
***EndState***
***State***
117
I_184_568_717_1102_1171_1297_1340
***Set***
declstmt -> extern type ID · ( params ) ;, $
declstmt -> extern type ID · ( params ) ;, namespace
declstmt -> extern type ID · ( params ) ;, {
declstmt -> extern type ID · ( params ) ;, ID
declstmt -> extern type ID · ( params ) ;, void
declstmt -> extern type ID · ( params ) ;, bool
declstmt -> extern type ID · ( params ) ;, int
declstmt -> extern type ID · ( params ) ;, float
declstmt -> extern type ID · ( params ) ;, string
declstmt -> extern type ID · ( params ) ;, extern
declstmt -> extern type ID · ( params ) ;, class
declstmt -> extern type ID · ( params ) ;, (
declstmt -> extern type ID · ( params ) ;, this
declstmt -> extern type ID · ( params ) ;, new
declstmt -> extern type ID · ( params ) ;, LITINT
declstmt -> extern type ID · ( params ) ;, LITFLOAT
declstmt -> extern type ID · ( params ) ;, LITSTRING
declstmt -> extern type ID · ( params ) ;, LITBOOL
declstmt -> extern type ID · ( params ) ;, null
declstmt -> extern type ID · ( params ) ;, ++
declstmt -> extern type ID · ( params ) ;, --
declstmt -> extern type ID · ( params ) ;, break
declstmt -> extern type ID · ( params ) ;, return
declstmt -> extern type ID · ( params ) ;, delete
declstmt -> extern type ID · ( params ) ;, while
declstmt -> extern type ID · ( params ) ;, for
declstmt -> extern type ID · ( params ) ;, if
declstmt -> extern type ID · ( params ) ;, }
declstmt -> extern type ID · ( params ) ;, &&
declstmt -> extern type ID · ( params ) ;, ||
declstmt -> extern type ID · ( params ) ;, +
declstmt -> extern type ID · ( params ) ;, -
declstmt -> extern type ID · ( params ) ;, *
declstmt -> extern type ID · ( params ) ;, /
declstmt -> extern type ID · ( params ) ;, !
declstmt -> extern type ID · ( params ) ;, else
***EndSet***
***EndState***
***State***
118
I_185
***Set***
inherit -> : · ID, {
***EndSet***
***EndState***
***State***
119
I_186_569_718_1103_1172_1298_1341
***Set***
declstmt -> class ID inherit · { declstatements }, $
declstmt -> class ID inherit · { declstatements }, namespace
declstmt -> class ID inherit · { declstatements }, {
declstmt -> class ID inherit · { declstatements }, ID
declstmt -> class ID inherit · { declstatements }, void
declstmt -> class ID inherit · { declstatements }, bool
declstmt -> class ID inherit · { declstatements }, int
declstmt -> class ID inherit · { declstatements }, float
declstmt -> class ID inherit · { declstatements }, string
declstmt -> class ID inherit · { declstatements }, extern
declstmt -> class ID inherit · { declstatements }, class
declstmt -> class ID inherit · { declstatements }, (
declstmt -> class ID inherit · { declstatements }, this
declstmt -> class ID inherit · { declstatements }, new
declstmt -> class ID inherit · { declstatements }, LITINT
declstmt -> class ID inherit · { declstatements }, LITFLOAT
declstmt -> class ID inherit · { declstatements }, LITSTRING
declstmt -> class ID inherit · { declstatements }, LITBOOL
declstmt -> class ID inherit · { declstatements }, null
declstmt -> class ID inherit · { declstatements }, ++
declstmt -> class ID inherit · { declstatements }, --
declstmt -> class ID inherit · { declstatements }, break
declstmt -> class ID inherit · { declstatements }, return
declstmt -> class ID inherit · { declstatements }, delete
declstmt -> class ID inherit · { declstatements }, while
declstmt -> class ID inherit · { declstatements }, for
declstmt -> class ID inherit · { declstatements }, if
declstmt -> class ID inherit · { declstatements }, }
declstmt -> class ID inherit · { declstatements }, &&
declstmt -> class ID inherit · { declstatements }, ||
declstmt -> class ID inherit · { declstatements }, +
declstmt -> class ID inherit · { declstatements }, -
declstmt -> class ID inherit · { declstatements }, *
declstmt -> class ID inherit · { declstatements }, /
declstmt -> class ID inherit · { declstatements }, !
declstmt -> class ID inherit · { declstatements }, else
***EndSet***
***EndState***
***State***
120
I_187_393_486_802_884_939_952_997_1010_1219_1232_1248_1276
***Set***
newobj -> new ID ( · ), ;
newobj -> new ID ( · ), .
newobj -> new ID ( · ), &&
newobj -> new ID ( · ), ||
newobj -> new ID ( · ), >
newobj -> new ID ( · ), <
newobj -> new ID ( · ), >=
newobj -> new ID ( · ), <=
newobj -> new ID ( · ), ==
newobj -> new ID ( · ), !=
newobj -> new ID ( · ), +
newobj -> new ID ( · ), -
newobj -> new ID ( · ), *
newobj -> new ID ( · ), /
newobj -> new ID ( · ), )
newobj -> new ID ( · ), ,
newobj -> new ID ( · ), ]
***EndSet***
***EndState***
***State***
121
I_201_262_583_626_678_700_757_779_1055_1077_1111
***Set***
cast -> ( type · ) factor, ;
cast -> ( type · ) factor, &&
cast -> ( type · ) factor, ||
cast -> ( type · ) factor, >
cast -> ( type · ) factor, <
cast -> ( type · ) factor, >=
cast -> ( type · ) factor, <=
cast -> ( type · ) factor, ==
cast -> ( type · ) factor, !=
cast -> ( type · ) factor, +
cast -> ( type · ) factor, -
cast -> ( type · ) factor, *
cast -> ( type · ) factor, /
cast -> ( type · ) factor, )
cast -> ( type · ) factor, ,
cast -> ( type · ) factor, ]
***EndSet***
***EndState***
***State***
122
I_211_266_358_420_451_511_542_587_827_858_923
***Set***
incdec -> ID · ++, ;
incdec -> ID · --, ;
primary -> ID ·, ;
incdec -> ID · ++, &&
incdec -> ID · --, &&
primary -> ID ·, &&
incdec -> ID · ++, ||
incdec -> ID · --, ||
primary -> ID ·, ||
incdec -> ID · ++, >
incdec -> ID · --, >
primary -> ID ·, >
incdec -> ID · ++, <
incdec -> ID · --, <
primary -> ID ·, <
incdec -> ID · ++, >=
incdec -> ID · --, >=
primary -> ID ·, >=
incdec -> ID · ++, <=
incdec -> ID · --, <=
primary -> ID ·, <=
incdec -> ID · ++, ==
incdec -> ID · --, ==
primary -> ID ·, ==
incdec -> ID · ++, !=
incdec -> ID · --, !=
primary -> ID ·, !=
incdec -> ID · ++, +
incdec -> ID · --, +
primary -> ID ·, +
incdec -> ID · ++, -
incdec -> ID · --, -
primary -> ID ·, -
incdec -> ID · ++, *
incdec -> ID · --, *
primary -> ID ·, *
incdec -> ID · ++, /
incdec -> ID · --, /
primary -> ID ·, /
call -> ID · ( args ), ;
call -> ID · ( args ), &&
call -> ID · ( args ), ||
call -> ID · ( args ), >
call -> ID · ( args ), <
call -> ID · ( args ), >=
call -> ID · ( args ), <=
call -> ID · ( args ), ==
call -> ID · ( args ), !=
call -> ID · ( args ), +
call -> ID · ( args ), -
call -> ID · ( args ), *
call -> ID · ( args ), /
primary -> ID ·, .
idBracket -> ID · [ optidx ], ;
idBracket -> ID · [ optidx ], &&
idBracket -> ID · [ optidx ], ||
idBracket -> ID · [ optidx ], >
idBracket -> ID · [ optidx ], <
idBracket -> ID · [ optidx ], >=
idBracket -> ID · [ optidx ], <=
idBracket -> ID · [ optidx ], ==
idBracket -> ID · [ optidx ], !=
idBracket -> ID · [ optidx ], +
idBracket -> ID · [ optidx ], -
idBracket -> ID · [ optidx ], *
idBracket -> ID · [ optidx ], /
call -> ID · ( args ), .
idBracket -> ID · [ optidx ], .
incdec -> ID · ++, )
incdec -> ID · --, )
primary -> ID ·, )
call -> ID · ( args ), )
idBracket -> ID · [ optidx ], )
incdec -> ID · ++, ]
incdec -> ID · --, ]
primary -> ID ·, ]
call -> ID · ( args ), ]
idBracket -> ID · [ optidx ], ]
incdec -> ID · ++, ,
incdec -> ID · --, ,
primary -> ID ·, ,
call -> ID · ( args ), ,
idBracket -> ID · [ optidx ], ,
***EndSet***
***EndState***
***State***
123
I_212_267_360_422_453_513_544_588_829_860_925
***Set***
primary -> indexaccess ·, ;
primary -> indexaccess ·, &&
primary -> indexaccess ·, ||
primary -> indexaccess ·, >
primary -> indexaccess ·, <
primary -> indexaccess ·, >=
primary -> indexaccess ·, <=
primary -> indexaccess ·, ==
primary -> indexaccess ·, !=
primary -> indexaccess ·, +
primary -> indexaccess ·, -
primary -> indexaccess ·, *
primary -> indexaccess ·, /
primary -> indexaccess ·, .
primary -> indexaccess ·, )
primary -> indexaccess ·, ]
primary -> indexaccess ·, ,
***EndSet***
***EndState***
***State***
124
I_213_268_589_630_682_704_761_783_1059_1081_1115
***Set***
factor -> - factor ·, ;
factor -> - factor ·, &&
factor -> - factor ·, ||
factor -> - factor ·, >
factor -> - factor ·, <
factor -> - factor ·, >=
factor -> - factor ·, <=
factor -> - factor ·, ==
factor -> - factor ·, !=
factor -> - factor ·, +
factor -> - factor ·, -
factor -> - factor ·, *
factor -> - factor ·, /
factor -> - factor ·, )
factor -> - factor ·, ,
factor -> - factor ·, ]
***EndSet***
***EndState***
***State***
125
I_215_270_370_432_462_523_553_591_839_869_934
***Set***
primary -> memberaccess ·, ;
primary -> memberaccess ·, &&
primary -> memberaccess ·, ||
primary -> memberaccess ·, >
primary -> memberaccess ·, <
primary -> memberaccess ·, >=
primary -> memberaccess ·, <=
primary -> memberaccess ·, ==
primary -> memberaccess ·, !=
primary -> memberaccess ·, +
primary -> memberaccess ·, -
primary -> memberaccess ·, *
primary -> memberaccess ·, /
indexaccess -> memberaccess · [ aexpr ], ;
call -> memberaccess · ( args ), ;
indexaccess -> memberaccess · [ aexpr ], &&
call -> memberaccess · ( args ), &&
indexaccess -> memberaccess · [ aexpr ], ||
call -> memberaccess · ( args ), ||
indexaccess -> memberaccess · [ aexpr ], >
call -> memberaccess · ( args ), >
indexaccess -> memberaccess · [ aexpr ], <
call -> memberaccess · ( args ), <
indexaccess -> memberaccess · [ aexpr ], >=
call -> memberaccess · ( args ), >=
indexaccess -> memberaccess · [ aexpr ], <=
call -> memberaccess · ( args ), <=
indexaccess -> memberaccess · [ aexpr ], ==
call -> memberaccess · ( args ), ==
indexaccess -> memberaccess · [ aexpr ], !=
call -> memberaccess · ( args ), !=
indexaccess -> memberaccess · [ aexpr ], +
call -> memberaccess · ( args ), +
indexaccess -> memberaccess · [ aexpr ], -
call -> memberaccess · ( args ), -
indexaccess -> memberaccess · [ aexpr ], *
call -> memberaccess · ( args ), *
indexaccess -> memberaccess · [ aexpr ], /
call -> memberaccess · ( args ), /
primary -> memberaccess ·, .
indexaccess -> memberaccess · [ aexpr ], .
call -> memberaccess · ( args ), .
primary -> memberaccess ·, )
indexaccess -> memberaccess · [ aexpr ], )
call -> memberaccess · ( args ), )
primary -> memberaccess ·, ]
indexaccess -> memberaccess · [ aexpr ], ]
call -> memberaccess · ( args ), ]
primary -> memberaccess ·, ,
indexaccess -> memberaccess · [ aexpr ], ,
call -> memberaccess · ( args ), ,
***EndSet***
***EndState***
***State***
126
I_217_272_593_631_683_705_762_784_1060_1082_1116
***Set***
factor -> ! factor ·, ;
factor -> ! factor ·, &&
factor -> ! factor ·, ||
factor -> ! factor ·, >
factor -> ! factor ·, <
factor -> ! factor ·, >=
factor -> ! factor ·, <=
factor -> ! factor ·, ==
factor -> ! factor ·, !=
factor -> ! factor ·, +
factor -> ! factor ·, -
factor -> ! factor ·, *
factor -> ! factor ·, /
factor -> ! factor ·, )
factor -> ! factor ·, ,
factor -> ! factor ·, ]
***EndSet***
***EndState***
***State***
127
I_222_570_719_1173_1299_1342
***Set***
stmt -> delete expr ; ·, $
stmt -> delete expr ; ·, namespace
stmt -> delete expr ; ·, {
stmt -> delete expr ; ·, ID
stmt -> delete expr ; ·, void
stmt -> delete expr ; ·, bool
stmt -> delete expr ; ·, int
stmt -> delete expr ; ·, float
stmt -> delete expr ; ·, string
stmt -> delete expr ; ·, extern
stmt -> delete expr ; ·, class
stmt -> delete expr ; ·, (
stmt -> delete expr ; ·, this
stmt -> delete expr ; ·, new
stmt -> delete expr ; ·, LITINT
stmt -> delete expr ; ·, LITFLOAT
stmt -> delete expr ; ·, LITSTRING
stmt -> delete expr ; ·, LITBOOL
stmt -> delete expr ; ·, null
stmt -> delete expr ; ·, ++
stmt -> delete expr ; ·, --
stmt -> delete expr ; ·, break
stmt -> delete expr ; ·, return
stmt -> delete expr ; ·, delete
stmt -> delete expr ; ·, while
stmt -> delete expr ; ·, for
stmt -> delete expr ; ·, if
stmt -> delete expr ; ·, }
stmt -> delete expr ; ·, &&
stmt -> delete expr ; ·, ||
stmt -> delete expr ; ·, +
stmt -> delete expr ; ·, -
stmt -> delete expr ; ·, *
stmt -> delete expr ; ·, /
stmt -> delete expr ; ·, !
stmt -> delete expr ; ·, else
***EndSet***
***EndState***
***State***
128
I_223_278_598
***Set***
bexpr -> bexpr || · bexpr, ;
bexpr -> bexpr || · bexpr, &&
bexpr -> bexpr || · bexpr, ||
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITSTRING, ;
lit -> · LITBOOL, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITSTRING, &&
lit -> · LITBOOL, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITSTRING, ||
lit -> · LITBOOL, ||
lit -> · null, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITSTRING, >
lit -> · LITBOOL, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITSTRING, <
lit -> · LITBOOL, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITSTRING, >=
lit -> · LITBOOL, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITSTRING, <=
lit -> · LITBOOL, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITSTRING, ==
lit -> · LITBOOL, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITSTRING, !=
lit -> · LITBOOL, !=
lit -> · null, !=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITSTRING, +
lit -> · LITBOOL, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITSTRING, -
lit -> · LITBOOL, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITSTRING, *
lit -> · LITBOOL, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITSTRING, /
lit -> · LITBOOL, /
lit -> · null, /
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], .
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
bexpr -> bexpr || · bexpr, )
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITSTRING, )
lit -> · LITBOOL, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
bexpr -> bexpr || · bexpr, ,
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITSTRING, ,
lit -> · LITBOOL, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
129
I_224_279_599
***Set***
bexpr -> bexpr && · bexpr, ;
bexpr -> bexpr && · bexpr, &&
bexpr -> bexpr && · bexpr, ||
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITSTRING, ;
lit -> · LITBOOL, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITSTRING, &&
lit -> · LITBOOL, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITSTRING, ||
lit -> · LITBOOL, ||
lit -> · null, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITSTRING, >
lit -> · LITBOOL, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITSTRING, <
lit -> · LITBOOL, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITSTRING, >=
lit -> · LITBOOL, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITSTRING, <=
lit -> · LITBOOL, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITSTRING, ==
lit -> · LITBOOL, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITSTRING, !=
lit -> · LITBOOL, !=
lit -> · null, !=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITSTRING, +
lit -> · LITBOOL, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITSTRING, -
lit -> · LITBOOL, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITSTRING, *
lit -> · LITBOOL, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITSTRING, /
lit -> · LITBOOL, /
lit -> · null, /
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], .
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
bexpr -> bexpr && · bexpr, )
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITSTRING, )
lit -> · LITBOOL, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
bexpr -> bexpr && · bexpr, ,
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITSTRING, ,
lit -> · LITBOOL, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
130
I_225_280_600
***Set***
bexpr -> aexpr == · aexpr, ;
bexpr -> aexpr == · aexpr, &&
bexpr -> aexpr == · aexpr, ||
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
aexpr -> · aexpr + term, &&
aexpr -> · aexpr - term, &&
aexpr -> · term, &&
aexpr -> · aexpr + term, ||
aexpr -> · aexpr - term, ||
aexpr -> · term, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · factor, ;
term -> · term * factor, &&
term -> · term / factor, &&
term -> · factor, &&
term -> · term * factor, ||
term -> · term / factor, ||
term -> · factor, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITSTRING, ;
lit -> · LITBOOL, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITSTRING, &&
lit -> · LITBOOL, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITSTRING, ||
lit -> · LITBOOL, ||
lit -> · null, ||
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITSTRING, +
lit -> · LITBOOL, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITSTRING, -
lit -> · LITBOOL, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITSTRING, *
lit -> · LITBOOL, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITSTRING, /
lit -> · LITBOOL, /
lit -> · null, /
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
bexpr -> aexpr == · aexpr, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITSTRING, )
lit -> · LITBOOL, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
bexpr -> aexpr == · aexpr, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITSTRING, ,
lit -> · LITBOOL, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
131
I_226_281_601
***Set***
bexpr -> aexpr != · aexpr, ;
bexpr -> aexpr != · aexpr, &&
bexpr -> aexpr != · aexpr, ||
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
aexpr -> · aexpr + term, &&
aexpr -> · aexpr - term, &&
aexpr -> · term, &&
aexpr -> · aexpr + term, ||
aexpr -> · aexpr - term, ||
aexpr -> · term, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · factor, ;
term -> · term * factor, &&
term -> · term / factor, &&
term -> · factor, &&
term -> · term * factor, ||
term -> · term / factor, ||
term -> · factor, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITSTRING, ;
lit -> · LITBOOL, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITSTRING, &&
lit -> · LITBOOL, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITSTRING, ||
lit -> · LITBOOL, ||
lit -> · null, ||
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITSTRING, +
lit -> · LITBOOL, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITSTRING, -
lit -> · LITBOOL, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITSTRING, *
lit -> · LITBOOL, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITSTRING, /
lit -> · LITBOOL, /
lit -> · null, /
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
bexpr -> aexpr != · aexpr, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITSTRING, )
lit -> · LITBOOL, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
bexpr -> aexpr != · aexpr, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITSTRING, ,
lit -> · LITBOOL, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
132
I_227_282_602
***Set***
bexpr -> aexpr <= · aexpr, ;
bexpr -> aexpr <= · aexpr, &&
bexpr -> aexpr <= · aexpr, ||
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
aexpr -> · aexpr + term, &&
aexpr -> · aexpr - term, &&
aexpr -> · term, &&
aexpr -> · aexpr + term, ||
aexpr -> · aexpr - term, ||
aexpr -> · term, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · factor, ;
term -> · term * factor, &&
term -> · term / factor, &&
term -> · factor, &&
term -> · term * factor, ||
term -> · term / factor, ||
term -> · factor, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITSTRING, ;
lit -> · LITBOOL, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITSTRING, &&
lit -> · LITBOOL, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITSTRING, ||
lit -> · LITBOOL, ||
lit -> · null, ||
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITSTRING, +
lit -> · LITBOOL, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITSTRING, -
lit -> · LITBOOL, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITSTRING, *
lit -> · LITBOOL, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITSTRING, /
lit -> · LITBOOL, /
lit -> · null, /
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
bexpr -> aexpr <= · aexpr, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITSTRING, )
lit -> · LITBOOL, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
bexpr -> aexpr <= · aexpr, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITSTRING, ,
lit -> · LITBOOL, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
133
I_228_283_603
***Set***
bexpr -> aexpr >= · aexpr, ;
bexpr -> aexpr >= · aexpr, &&
bexpr -> aexpr >= · aexpr, ||
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
aexpr -> · aexpr + term, &&
aexpr -> · aexpr - term, &&
aexpr -> · term, &&
aexpr -> · aexpr + term, ||
aexpr -> · aexpr - term, ||
aexpr -> · term, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · factor, ;
term -> · term * factor, &&
term -> · term / factor, &&
term -> · factor, &&
term -> · term * factor, ||
term -> · term / factor, ||
term -> · factor, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITSTRING, ;
lit -> · LITBOOL, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITSTRING, &&
lit -> · LITBOOL, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITSTRING, ||
lit -> · LITBOOL, ||
lit -> · null, ||
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITSTRING, +
lit -> · LITBOOL, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITSTRING, -
lit -> · LITBOOL, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITSTRING, *
lit -> · LITBOOL, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITSTRING, /
lit -> · LITBOOL, /
lit -> · null, /
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
bexpr -> aexpr >= · aexpr, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITSTRING, )
lit -> · LITBOOL, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
bexpr -> aexpr >= · aexpr, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITSTRING, ,
lit -> · LITBOOL, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
134
I_229_284_604
***Set***
bexpr -> aexpr > · aexpr, ;
bexpr -> aexpr > · aexpr, &&
bexpr -> aexpr > · aexpr, ||
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
aexpr -> · aexpr + term, &&
aexpr -> · aexpr - term, &&
aexpr -> · term, &&
aexpr -> · aexpr + term, ||
aexpr -> · aexpr - term, ||
aexpr -> · term, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · factor, ;
term -> · term * factor, &&
term -> · term / factor, &&
term -> · factor, &&
term -> · term * factor, ||
term -> · term / factor, ||
term -> · factor, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITSTRING, ;
lit -> · LITBOOL, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITSTRING, &&
lit -> · LITBOOL, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITSTRING, ||
lit -> · LITBOOL, ||
lit -> · null, ||
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITSTRING, +
lit -> · LITBOOL, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITSTRING, -
lit -> · LITBOOL, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITSTRING, *
lit -> · LITBOOL, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITSTRING, /
lit -> · LITBOOL, /
lit -> · null, /
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
bexpr -> aexpr > · aexpr, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITSTRING, )
lit -> · LITBOOL, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
bexpr -> aexpr > · aexpr, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITSTRING, ,
lit -> · LITBOOL, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
135
I_230_285_605
***Set***
bexpr -> aexpr < · aexpr, ;
bexpr -> aexpr < · aexpr, &&
bexpr -> aexpr < · aexpr, ||
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
aexpr -> · aexpr + term, &&
aexpr -> · aexpr - term, &&
aexpr -> · term, &&
aexpr -> · aexpr + term, ||
aexpr -> · aexpr - term, ||
aexpr -> · term, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · factor, ;
term -> · term * factor, &&
term -> · term / factor, &&
term -> · factor, &&
term -> · term * factor, ||
term -> · term / factor, ||
term -> · factor, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITSTRING, ;
lit -> · LITBOOL, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITSTRING, &&
lit -> · LITBOOL, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITSTRING, ||
lit -> · LITBOOL, ||
lit -> · null, ||
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITSTRING, +
lit -> · LITBOOL, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITSTRING, -
lit -> · LITBOOL, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITSTRING, *
lit -> · LITBOOL, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITSTRING, /
lit -> · LITBOOL, /
lit -> · null, /
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
bexpr -> aexpr < · aexpr, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITSTRING, )
lit -> · LITBOOL, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
bexpr -> aexpr < · aexpr, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITSTRING, ,
lit -> · LITBOOL, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
136
I_231_286_606_636_669_688_767_1065
***Set***
aexpr -> aexpr + · term, ;
aexpr -> aexpr + · term, >
aexpr -> aexpr + · term, <
aexpr -> aexpr + · term, >=
aexpr -> aexpr + · term, <=
aexpr -> aexpr + · term, ==
aexpr -> aexpr + · term, !=
aexpr -> aexpr + · term, +
aexpr -> aexpr + · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · factor, ;
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITSTRING, ;
lit -> · LITBOOL, ;
lit -> · null, ;
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITSTRING, >
lit -> · LITBOOL, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITSTRING, <
lit -> · LITBOOL, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITSTRING, >=
lit -> · LITBOOL, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITSTRING, <=
lit -> · LITBOOL, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITSTRING, ==
lit -> · LITBOOL, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITSTRING, !=
lit -> · LITBOOL, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITSTRING, +
lit -> · LITBOOL, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITSTRING, -
lit -> · LITBOOL, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITSTRING, *
lit -> · LITBOOL, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITSTRING, /
lit -> · LITBOOL, /
lit -> · null, /
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
aexpr -> aexpr + · term, )
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITSTRING, )
lit -> · LITBOOL, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
aexpr -> aexpr + · term, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITSTRING, ,
lit -> · LITBOOL, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
aexpr -> aexpr + · term, ]
term -> · term * factor, ]
term -> · term / factor, ]
term -> · factor, ]
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITINT, ]
lit -> · LITFLOAT, ]
lit -> · LITSTRING, ]
lit -> · LITBOOL, ]
lit -> · null, ]
idBracket -> · ID [ optidx ], ]
aexpr -> aexpr + · term, &&
aexpr -> aexpr + · term, ||
term -> · term * factor, &&
term -> · term / factor, &&
term -> · factor, &&
term -> · term * factor, ||
term -> · term / factor, ||
term -> · factor, ||
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITSTRING, &&
lit -> · LITBOOL, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITSTRING, ||
lit -> · LITBOOL, ||
lit -> · null, ||
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
***EndSet***
***EndState***
***State***
137
I_232_287_607_637_670_689_768_1066
***Set***
aexpr -> aexpr - · term, ;
aexpr -> aexpr - · term, >
aexpr -> aexpr - · term, <
aexpr -> aexpr - · term, >=
aexpr -> aexpr - · term, <=
aexpr -> aexpr - · term, ==
aexpr -> aexpr - · term, !=
aexpr -> aexpr - · term, +
aexpr -> aexpr - · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · factor, ;
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITSTRING, ;
lit -> · LITBOOL, ;
lit -> · null, ;
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITSTRING, >
lit -> · LITBOOL, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITSTRING, <
lit -> · LITBOOL, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITSTRING, >=
lit -> · LITBOOL, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITSTRING, <=
lit -> · LITBOOL, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITSTRING, ==
lit -> · LITBOOL, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITSTRING, !=
lit -> · LITBOOL, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITSTRING, +
lit -> · LITBOOL, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITSTRING, -
lit -> · LITBOOL, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITSTRING, *
lit -> · LITBOOL, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITSTRING, /
lit -> · LITBOOL, /
lit -> · null, /
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
aexpr -> aexpr - · term, )
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITSTRING, )
lit -> · LITBOOL, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
aexpr -> aexpr - · term, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITSTRING, ,
lit -> · LITBOOL, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
aexpr -> aexpr - · term, ]
term -> · term * factor, ]
term -> · term / factor, ]
term -> · factor, ]
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITINT, ]
lit -> · LITFLOAT, ]
lit -> · LITSTRING, ]
lit -> · LITBOOL, ]
lit -> · null, ]
idBracket -> · ID [ optidx ], ]
aexpr -> aexpr - · term, &&
aexpr -> aexpr - · term, ||
term -> · term * factor, &&
term -> · term / factor, &&
term -> · factor, &&
term -> · term * factor, ||
term -> · term / factor, ||
term -> · factor, ||
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITSTRING, &&
lit -> · LITBOOL, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITSTRING, ||
lit -> · LITBOOL, ||
lit -> · null, ||
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
***EndSet***
***EndState***
***State***
138
I_233_288_608_638_671_690_769_1067
***Set***
term -> term * · factor, ;
term -> term * · factor, >
term -> term * · factor, <
term -> term * · factor, >=
term -> term * · factor, <=
term -> term * · factor, ==
term -> term * · factor, !=
term -> term * · factor, +
term -> term * · factor, -
term -> term * · factor, *
term -> term * · factor, /
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITSTRING, ;
lit -> · LITBOOL, ;
lit -> · null, ;
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITSTRING, >
lit -> · LITBOOL, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITSTRING, <
lit -> · LITBOOL, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITSTRING, >=
lit -> · LITBOOL, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITSTRING, <=
lit -> · LITBOOL, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITSTRING, ==
lit -> · LITBOOL, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITSTRING, !=
lit -> · LITBOOL, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITSTRING, +
lit -> · LITBOOL, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITSTRING, -
lit -> · LITBOOL, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITSTRING, *
lit -> · LITBOOL, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITSTRING, /
lit -> · LITBOOL, /
lit -> · null, /
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
term -> term * · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITSTRING, )
lit -> · LITBOOL, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
term -> term * · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITSTRING, ,
lit -> · LITBOOL, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
term -> term * · factor, ]
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITINT, ]
lit -> · LITFLOAT, ]
lit -> · LITSTRING, ]
lit -> · LITBOOL, ]
lit -> · null, ]
idBracket -> · ID [ optidx ], ]
term -> term * · factor, &&
term -> term * · factor, ||
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITSTRING, &&
lit -> · LITBOOL, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITSTRING, ||
lit -> · LITBOOL, ||
lit -> · null, ||
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
***EndSet***
***EndState***
***State***
139
I_234_289_609_639_672_691_770_1068
***Set***
term -> term / · factor, ;
term -> term / · factor, >
term -> term / · factor, <
term -> term / · factor, >=
term -> term / · factor, <=
term -> term / · factor, ==
term -> term / · factor, !=
term -> term / · factor, +
term -> term / · factor, -
term -> term / · factor, *
term -> term / · factor, /
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITSTRING, ;
lit -> · LITBOOL, ;
lit -> · null, ;
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITSTRING, >
lit -> · LITBOOL, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITSTRING, <
lit -> · LITBOOL, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITSTRING, >=
lit -> · LITBOOL, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITSTRING, <=
lit -> · LITBOOL, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITSTRING, ==
lit -> · LITBOOL, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITSTRING, !=
lit -> · LITBOOL, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITSTRING, +
lit -> · LITBOOL, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITSTRING, -
lit -> · LITBOOL, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITSTRING, *
lit -> · LITBOOL, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITSTRING, /
lit -> · LITBOOL, /
lit -> · null, /
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
term -> term / · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITSTRING, )
lit -> · LITBOOL, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
term -> term / · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITSTRING, ,
lit -> · LITBOOL, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
term -> term / · factor, ]
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITINT, ]
lit -> · LITFLOAT, ]
lit -> · LITSTRING, ]
lit -> · LITBOOL, ]
lit -> · null, ]
idBracket -> · ID [ optidx ], ]
term -> term / · factor, &&
term -> term / · factor, ||
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITSTRING, &&
lit -> · LITBOOL, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITSTRING, ||
lit -> · LITBOOL, ||
lit -> · null, ||
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
***EndSet***
***EndState***
***State***
140
I_238_571_720_1174_1300_1343
***Set***
stmt -> while ( expr · ) stmt, $
stmt -> while ( expr · ) stmt, namespace
stmt -> while ( expr · ) stmt, {
stmt -> while ( expr · ) stmt, ID
stmt -> while ( expr · ) stmt, void
stmt -> while ( expr · ) stmt, bool
stmt -> while ( expr · ) stmt, int
stmt -> while ( expr · ) stmt, float
stmt -> while ( expr · ) stmt, string
stmt -> while ( expr · ) stmt, extern
stmt -> while ( expr · ) stmt, class
stmt -> while ( expr · ) stmt, (
stmt -> while ( expr · ) stmt, this
stmt -> while ( expr · ) stmt, new
stmt -> while ( expr · ) stmt, LITINT
stmt -> while ( expr · ) stmt, LITFLOAT
stmt -> while ( expr · ) stmt, LITSTRING
stmt -> while ( expr · ) stmt, LITBOOL
stmt -> while ( expr · ) stmt, null
stmt -> while ( expr · ) stmt, ++
stmt -> while ( expr · ) stmt, --
stmt -> while ( expr · ) stmt, break
stmt -> while ( expr · ) stmt, return
stmt -> while ( expr · ) stmt, delete
stmt -> while ( expr · ) stmt, while
stmt -> while ( expr · ) stmt, for
stmt -> while ( expr · ) stmt, if
stmt -> while ( expr · ) stmt, }
stmt -> while ( expr · ) stmt, &&
stmt -> while ( expr · ) stmt, ||
stmt -> while ( expr · ) stmt, +
stmt -> while ( expr · ) stmt, -
stmt -> while ( expr · ) stmt, *
stmt -> while ( expr · ) stmt, /
stmt -> while ( expr · ) stmt, !
stmt -> while ( expr · ) stmt, else
***EndSet***
***EndState***
***State***
141
I_251_572_721_1175_1301_1344
***Set***
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, $
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, namespace
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, {
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, ID
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, void
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, bool
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, int
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, float
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, string
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, extern
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, class
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, (
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, this
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, new
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, LITINT
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, null
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, ++
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, --
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, break
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, return
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, delete
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, while
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, for
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, if
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITSTRING, ;
lit -> · LITBOOL, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITSTRING, &&
lit -> · LITBOOL, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITSTRING, ||
lit -> · LITBOOL, ||
lit -> · null, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITSTRING, >
lit -> · LITBOOL, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITSTRING, <
lit -> · LITBOOL, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITSTRING, >=
lit -> · LITBOOL, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITSTRING, <=
lit -> · LITBOOL, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITSTRING, ==
lit -> · LITBOOL, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITSTRING, !=
lit -> · LITBOOL, !=
lit -> · null, !=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITSTRING, +
lit -> · LITBOOL, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITSTRING, -
lit -> · LITBOOL, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITSTRING, *
lit -> · LITBOOL, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITSTRING, /
lit -> · LITBOOL, /
lit -> · null, /
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], .
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, }
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, &&
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, ||
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, +
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, -
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, *
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, /
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, !
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, else
***EndSet***
***EndState***
***State***
142
I_255_573_722_1176_1302_1345
***Set***
stmt -> if ( expr · ) stmt elifclauselist elseclause, $
stmt -> if ( expr · ) stmt elifclauselist elseclause, namespace
stmt -> if ( expr · ) stmt elifclauselist elseclause, {
stmt -> if ( expr · ) stmt elifclauselist elseclause, ID
stmt -> if ( expr · ) stmt elifclauselist elseclause, void
stmt -> if ( expr · ) stmt elifclauselist elseclause, bool
stmt -> if ( expr · ) stmt elifclauselist elseclause, int
stmt -> if ( expr · ) stmt elifclauselist elseclause, float
stmt -> if ( expr · ) stmt elifclauselist elseclause, string
stmt -> if ( expr · ) stmt elifclauselist elseclause, extern
stmt -> if ( expr · ) stmt elifclauselist elseclause, class
stmt -> if ( expr · ) stmt elifclauselist elseclause, (
stmt -> if ( expr · ) stmt elifclauselist elseclause, this
stmt -> if ( expr · ) stmt elifclauselist elseclause, new
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITINT
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITFLOAT
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITSTRING
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITBOOL
stmt -> if ( expr · ) stmt elifclauselist elseclause, null
stmt -> if ( expr · ) stmt elifclauselist elseclause, ++
stmt -> if ( expr · ) stmt elifclauselist elseclause, --
stmt -> if ( expr · ) stmt elifclauselist elseclause, break
stmt -> if ( expr · ) stmt elifclauselist elseclause, return
stmt -> if ( expr · ) stmt elifclauselist elseclause, delete
stmt -> if ( expr · ) stmt elifclauselist elseclause, while
stmt -> if ( expr · ) stmt elifclauselist elseclause, for
stmt -> if ( expr · ) stmt elifclauselist elseclause, if
stmt -> if ( expr · ) stmt elifclauselist elseclause, }
stmt -> if ( expr · ) stmt elifclauselist elseclause, &&
stmt -> if ( expr · ) stmt elifclauselist elseclause, ||
stmt -> if ( expr · ) stmt elifclauselist elseclause, +
stmt -> if ( expr · ) stmt elifclauselist elseclause, -
stmt -> if ( expr · ) stmt elifclauselist elseclause, *
stmt -> if ( expr · ) stmt elifclauselist elseclause, /
stmt -> if ( expr · ) stmt elifclauselist elseclause, !
stmt -> if ( expr · ) stmt elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
143
I_256_574_723_1177_1303_1346
***Set***
stmt -> return expr ; ·, $
stmt -> return expr ; ·, namespace
stmt -> return expr ; ·, {
stmt -> return expr ; ·, ID
stmt -> return expr ; ·, void
stmt -> return expr ; ·, bool
stmt -> return expr ; ·, int
stmt -> return expr ; ·, float
stmt -> return expr ; ·, string
stmt -> return expr ; ·, extern
stmt -> return expr ; ·, class
stmt -> return expr ; ·, (
stmt -> return expr ; ·, this
stmt -> return expr ; ·, new
stmt -> return expr ; ·, LITINT
stmt -> return expr ; ·, LITFLOAT
stmt -> return expr ; ·, LITSTRING
stmt -> return expr ; ·, LITBOOL
stmt -> return expr ; ·, null
stmt -> return expr ; ·, ++
stmt -> return expr ; ·, --
stmt -> return expr ; ·, break
stmt -> return expr ; ·, return
stmt -> return expr ; ·, delete
stmt -> return expr ; ·, while
stmt -> return expr ; ·, for
stmt -> return expr ; ·, if
stmt -> return expr ; ·, }
stmt -> return expr ; ·, &&
stmt -> return expr ; ·, ||
stmt -> return expr ; ·, +
stmt -> return expr ; ·, -
stmt -> return expr ; ·, *
stmt -> return expr ; ·, /
stmt -> return expr ; ·, !
stmt -> return expr ; ·, else
***EndSet***
***EndState***
***State***
144
I_277_398_490_806_887_942_955_1000_1013_1222_1235_1251
***Set***
primary -> ( expr ) ·, .
primary -> ( expr ) ·, ;
primary -> ( expr ) ·, &&
primary -> ( expr ) ·, ||
primary -> ( expr ) ·, >
primary -> ( expr ) ·, <
primary -> ( expr ) ·, >=
primary -> ( expr ) ·, <=
primary -> ( expr ) ·, ==
primary -> ( expr ) ·, !=
primary -> ( expr ) ·, +
primary -> ( expr ) ·, -
primary -> ( expr ) ·, *
primary -> ( expr ) ·, /
primary -> ( expr ) ·, )
primary -> ( expr ) ·, ,
primary -> ( expr ) ·, ]
***EndSet***
***EndState***
***State***
145
I_310_575_724_1178_1304_1347
***Set***
statementblock -> { statements } ·, $
statementblock -> { statements } ·, namespace
statementblock -> { statements } ·, {
statementblock -> { statements } ·, ID
statementblock -> { statements } ·, void
statementblock -> { statements } ·, bool
statementblock -> { statements } ·, int
statementblock -> { statements } ·, float
statementblock -> { statements } ·, string
statementblock -> { statements } ·, extern
statementblock -> { statements } ·, class
statementblock -> { statements } ·, (
statementblock -> { statements } ·, this
statementblock -> { statements } ·, new
statementblock -> { statements } ·, LITINT
statementblock -> { statements } ·, LITFLOAT
statementblock -> { statements } ·, LITSTRING
statementblock -> { statements } ·, LITBOOL
statementblock -> { statements } ·, null
statementblock -> { statements } ·, ++
statementblock -> { statements } ·, --
statementblock -> { statements } ·, break
statementblock -> { statements } ·, return
statementblock -> { statements } ·, delete
statementblock -> { statements } ·, while
statementblock -> { statements } ·, for
statementblock -> { statements } ·, if
statementblock -> { statements } ·, }
statementblock -> { statements } ·, &&
statementblock -> { statements } ·, ||
statementblock -> { statements } ·, +
statementblock -> { statements } ·, -
statementblock -> { statements } ·, *
statementblock -> { statements } ·, /
statementblock -> { statements } ·, !
statementblock -> { statements } ·, else
***EndSet***
***EndState***
***State***
146
I_333
***Set***
args -> expr ·, )
args -> expr ·, ,
***EndSet***
***EndState***
***State***
147
I_344_401_493_809_888_943_956_1001_1014_1223_1236_1252_1277
***Set***
call -> ID ( args · ), ;
call -> ID ( args · ), .
args -> args · , expr, )
args -> args · , expr, ,
call -> ID ( args · ), &&
call -> ID ( args · ), ||
call -> ID ( args · ), >
call -> ID ( args · ), <
call -> ID ( args · ), >=
call -> ID ( args · ), <=
call -> ID ( args · ), ==
call -> ID ( args · ), !=
call -> ID ( args · ), +
call -> ID ( args · ), -
call -> ID ( args · ), *
call -> ID ( args · ), /
call -> ID ( args · ), )
call -> ID ( args · ), ,
call -> ID ( args · ), ]
***EndSet***
***EndState***
***State***
148
I_364
***Set***
optidx -> aexpr ·, ]
aexpr -> aexpr · + term, ]
aexpr -> aexpr · - term, ]
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
***EndSet***
***EndState***
***State***
149
I_366_428_458_519_549_835_865_930
***Set***
term -> factor ·, ]
term -> factor ·, +
term -> factor ·, -
term -> factor ·, *
term -> factor ·, /
term -> factor ·, ;
term -> factor ·, &&
term -> factor ·, ||
term -> factor ·, >
term -> factor ·, <
term -> factor ·, >=
term -> factor ·, <=
term -> factor ·, ==
term -> factor ·, !=
term -> factor ·, )
term -> factor ·, ,
***EndSet***
***EndState***
***State***
150
I_372_386_391_402_494_661_745_810_889_944_957_1002_1015_1043_1224_1237_1253_1278
***Set***
idBracket -> ID [ optidx · ], ID
idBracket -> ID [ optidx · ], =
idBracket -> ID [ optidx · ], +=
idBracket -> ID [ optidx · ], -=
idBracket -> ID [ optidx · ], *=
idBracket -> ID [ optidx · ], /=
idBracket -> ID [ optidx · ], %=
idBracket -> ID [ optidx · ], .
idBracket -> ID [ optidx · ], ;
idBracket -> ID [ optidx · ], &&
idBracket -> ID [ optidx · ], ||
idBracket -> ID [ optidx · ], >
idBracket -> ID [ optidx · ], <
idBracket -> ID [ optidx · ], >=
idBracket -> ID [ optidx · ], <=
idBracket -> ID [ optidx · ], ==
idBracket -> ID [ optidx · ], !=
idBracket -> ID [ optidx · ], +
idBracket -> ID [ optidx · ], -
idBracket -> ID [ optidx · ], *
idBracket -> ID [ optidx · ], /
idBracket -> ID [ optidx · ], )
idBracket -> ID [ optidx · ], ,
idBracket -> ID [ optidx · ], ]
***EndSet***
***EndState***
***State***
151
I_373_576_726_1104_1182_1308_1351
***Set***
declstmt -> type ID ( · params ) { statements }, $
declstmt -> type ID ( · params ) { statements }, namespace
declstmt -> type ID ( · params ) { statements }, {
declstmt -> type ID ( · params ) { statements }, ID
declstmt -> type ID ( · params ) { statements }, void
declstmt -> type ID ( · params ) { statements }, bool
declstmt -> type ID ( · params ) { statements }, int
declstmt -> type ID ( · params ) { statements }, float
declstmt -> type ID ( · params ) { statements }, string
declstmt -> type ID ( · params ) { statements }, extern
declstmt -> type ID ( · params ) { statements }, class
declstmt -> type ID ( · params ) { statements }, (
declstmt -> type ID ( · params ) { statements }, this
declstmt -> type ID ( · params ) { statements }, new
declstmt -> type ID ( · params ) { statements }, LITINT
declstmt -> type ID ( · params ) { statements }, LITFLOAT
declstmt -> type ID ( · params ) { statements }, LITSTRING
declstmt -> type ID ( · params ) { statements }, LITBOOL
declstmt -> type ID ( · params ) { statements }, null
declstmt -> type ID ( · params ) { statements }, ++
declstmt -> type ID ( · params ) { statements }, --
declstmt -> type ID ( · params ) { statements }, break
declstmt -> type ID ( · params ) { statements }, return
declstmt -> type ID ( · params ) { statements }, delete
declstmt -> type ID ( · params ) { statements }, while
declstmt -> type ID ( · params ) { statements }, for
declstmt -> type ID ( · params ) { statements }, if
params -> ·, )
params -> · type ID, )
params -> · params , type ID, )
type -> · arrtype, ID
type -> · stype, ID
params -> ·, ,
params -> · type ID, ,
params -> · params , type ID, ,
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · string, ID
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · string, [
declstmt -> type ID ( · params ) { statements }, }
declstmt -> type ID ( · params ) { statements }, &&
declstmt -> type ID ( · params ) { statements }, ||
declstmt -> type ID ( · params ) { statements }, +
declstmt -> type ID ( · params ) { statements }, -
declstmt -> type ID ( · params ) { statements }, *
declstmt -> type ID ( · params ) { statements }, /
declstmt -> type ID ( · params ) { statements }, !
declstmt -> type ID ( · params ) { statements }, else
***EndSet***
***EndState***
***State***
152
I_374_577_727_1105_1183_1309_1352
***Set***
declstmt -> type ID = · expr ;, $
declstmt -> type ID = · expr ;, namespace
declstmt -> type ID = · expr ;, {
declstmt -> type ID = · expr ;, ID
declstmt -> type ID = · expr ;, void
declstmt -> type ID = · expr ;, bool
declstmt -> type ID = · expr ;, int
declstmt -> type ID = · expr ;, float
declstmt -> type ID = · expr ;, string
declstmt -> type ID = · expr ;, extern
declstmt -> type ID = · expr ;, class
declstmt -> type ID = · expr ;, (
declstmt -> type ID = · expr ;, this
declstmt -> type ID = · expr ;, new
declstmt -> type ID = · expr ;, LITINT
declstmt -> type ID = · expr ;, LITFLOAT
declstmt -> type ID = · expr ;, LITSTRING
declstmt -> type ID = · expr ;, LITBOOL
declstmt -> type ID = · expr ;, null
declstmt -> type ID = · expr ;, ++
declstmt -> type ID = · expr ;, --
declstmt -> type ID = · expr ;, break
declstmt -> type ID = · expr ;, return
declstmt -> type ID = · expr ;, delete
declstmt -> type ID = · expr ;, while
declstmt -> type ID = · expr ;, for
declstmt -> type ID = · expr ;, if
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITSTRING, ;
lit -> · LITBOOL, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITSTRING, &&
lit -> · LITBOOL, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITSTRING, ||
lit -> · LITBOOL, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITSTRING, >
lit -> · LITBOOL, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITSTRING, <
lit -> · LITBOOL, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITSTRING, >=
lit -> · LITBOOL, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITSTRING, <=
lit -> · LITBOOL, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITSTRING, ==
lit -> · LITBOOL, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITSTRING, !=
lit -> · LITBOOL, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITSTRING, +
lit -> · LITBOOL, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITSTRING, -
lit -> · LITBOOL, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITSTRING, *
lit -> · LITBOOL, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITSTRING, /
lit -> · LITBOOL, /
lit -> · null, /
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
declstmt -> type ID = · expr ;, }
declstmt -> type ID = · expr ;, &&
declstmt -> type ID = · expr ;, ||
declstmt -> type ID = · expr ;, +
declstmt -> type ID = · expr ;, -
declstmt -> type ID = · expr ;, *
declstmt -> type ID = · expr ;, /
declstmt -> type ID = · expr ;, !
declstmt -> type ID = · expr ;, else
***EndSet***
***EndState***
***State***
153
I_375_392_662_664_746_1044_1093_1125_1132_1185_1192_1312_1319_1331
***Set***
primitiveBracket -> primitive [ optidx · ], ID
primitiveBracket -> primitive [ optidx · ], .
primitiveBracket -> primitive [ optidx · ], ;
primitiveBracket -> primitive [ optidx · ], &&
primitiveBracket -> primitive [ optidx · ], ||
primitiveBracket -> primitive [ optidx · ], >
primitiveBracket -> primitive [ optidx · ], <
primitiveBracket -> primitive [ optidx · ], >=
primitiveBracket -> primitive [ optidx · ], <=
primitiveBracket -> primitive [ optidx · ], ==
primitiveBracket -> primitive [ optidx · ], !=
primitiveBracket -> primitive [ optidx · ], +
primitiveBracket -> primitive [ optidx · ], -
primitiveBracket -> primitive [ optidx · ], *
primitiveBracket -> primitive [ optidx · ], /
primitiveBracket -> primitive [ optidx · ], )
primitiveBracket -> primitive [ optidx · ], ,
primitiveBracket -> primitive [ optidx · ], ]
***EndSet***
***EndState***
***State***
154
I_376_467_558_665_748_874_894_949_958_1007_1016_1046_1229_1238_1254
***Set***
memberaccess -> primary . ID ·, (
memberaccess -> primary . ID ·, =
memberaccess -> primary . ID ·, +=
memberaccess -> primary . ID ·, -=
memberaccess -> primary . ID ·, *=
memberaccess -> primary . ID ·, /=
memberaccess -> primary . ID ·, %=
memberaccess -> primary . ID ·, [
memberaccess -> primary . ID ·, .
memberaccess -> primary . ID ·, ;
memberaccess -> primary . ID ·, &&
memberaccess -> primary . ID ·, ||
memberaccess -> primary . ID ·, >
memberaccess -> primary . ID ·, <
memberaccess -> primary . ID ·, >=
memberaccess -> primary . ID ·, <=
memberaccess -> primary . ID ·, ==
memberaccess -> primary . ID ·, !=
memberaccess -> primary . ID ·, +
memberaccess -> primary . ID ·, -
memberaccess -> primary . ID ·, *
memberaccess -> primary . ID ·, /
memberaccess -> primary . ID ·, )
memberaccess -> primary . ID ·, ,
memberaccess -> primary . ID ·, ]
***EndSet***
***EndState***
***State***
155
I_377_559_875
***Set***
assign -> lvalue = expr ·, ;
assign -> lvalue = expr ·, )
assign -> lvalue = expr ·, ,
***EndSet***
***EndState***
***State***
156
I_378_560_876
***Set***
assign -> lvalue += expr ·, ;
assign -> lvalue += expr ·, )
assign -> lvalue += expr ·, ,
***EndSet***
***EndState***
***State***
157
I_379_561_877
***Set***
assign -> lvalue -= expr ·, ;
assign -> lvalue -= expr ·, )
assign -> lvalue -= expr ·, ,
***EndSet***
***EndState***
***State***
158
I_380_562_878
***Set***
assign -> lvalue *= expr ·, ;
assign -> lvalue *= expr ·, )
assign -> lvalue *= expr ·, ,
***EndSet***
***EndState***
***State***
159
I_381_563_879
***Set***
assign -> lvalue /= expr ·, ;
assign -> lvalue /= expr ·, )
assign -> lvalue /= expr ·, ,
***EndSet***
***EndState***
***State***
160
I_382_564_880
***Set***
assign -> lvalue %= expr ·, ;
assign -> lvalue %= expr ·, )
assign -> lvalue %= expr ·, ,
***EndSet***
***EndState***
***State***
161
I_383_468_565_881_895_950_959_1008_1017_1230_1239_1255_1280
***Set***
call -> memberaccess ( args · ), ;
call -> memberaccess ( args · ), .
args -> args · , expr, )
args -> args · , expr, ,
call -> memberaccess ( args · ), &&
call -> memberaccess ( args · ), ||
call -> memberaccess ( args · ), >
call -> memberaccess ( args · ), <
call -> memberaccess ( args · ), >=
call -> memberaccess ( args · ), <=
call -> memberaccess ( args · ), ==
call -> memberaccess ( args · ), !=
call -> memberaccess ( args · ), +
call -> memberaccess ( args · ), -
call -> memberaccess ( args · ), *
call -> memberaccess ( args · ), /
call -> memberaccess ( args · ), )
call -> memberaccess ( args · ), ,
call -> memberaccess ( args · ), ]
***EndSet***
***EndState***
***State***
162
I_384_469_566_666_749_882_896_951_960_1009_1018_1047_1231_1240_1256
***Set***
indexaccess -> memberaccess [ aexpr · ], =
indexaccess -> memberaccess [ aexpr · ], +=
indexaccess -> memberaccess [ aexpr · ], -=
indexaccess -> memberaccess [ aexpr · ], *=
indexaccess -> memberaccess [ aexpr · ], /=
indexaccess -> memberaccess [ aexpr · ], %=
indexaccess -> memberaccess [ aexpr · ], .
aexpr -> aexpr · + term, ]
aexpr -> aexpr · - term, ]
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
indexaccess -> memberaccess [ aexpr · ], ;
indexaccess -> memberaccess [ aexpr · ], &&
indexaccess -> memberaccess [ aexpr · ], ||
indexaccess -> memberaccess [ aexpr · ], >
indexaccess -> memberaccess [ aexpr · ], <
indexaccess -> memberaccess [ aexpr · ], >=
indexaccess -> memberaccess [ aexpr · ], <=
indexaccess -> memberaccess [ aexpr · ], ==
indexaccess -> memberaccess [ aexpr · ], !=
indexaccess -> memberaccess [ aexpr · ], +
indexaccess -> memberaccess [ aexpr · ], -
indexaccess -> memberaccess [ aexpr · ], *
indexaccess -> memberaccess [ aexpr · ], /
indexaccess -> memberaccess [ aexpr · ], )
indexaccess -> memberaccess [ aexpr · ], ,
indexaccess -> memberaccess [ aexpr · ], ]
***EndSet***
***EndState***
***State***
163
I_385_794_961_1282_1368_1386
***Set***
namespaceblock -> namespace ID { statements · }, $
namespaceblock -> namespace ID { statements · }, namespace
namespaceblock -> namespace ID { statements · }, {
namespaceblock -> namespace ID { statements · }, ID
namespaceblock -> namespace ID { statements · }, void
namespaceblock -> namespace ID { statements · }, bool
namespaceblock -> namespace ID { statements · }, int
namespaceblock -> namespace ID { statements · }, float
namespaceblock -> namespace ID { statements · }, string
namespaceblock -> namespace ID { statements · }, extern
namespaceblock -> namespace ID { statements · }, class
namespaceblock -> namespace ID { statements · }, (
namespaceblock -> namespace ID { statements · }, this
namespaceblock -> namespace ID { statements · }, new
namespaceblock -> namespace ID { statements · }, LITINT
namespaceblock -> namespace ID { statements · }, LITFLOAT
namespaceblock -> namespace ID { statements · }, LITSTRING
namespaceblock -> namespace ID { statements · }, LITBOOL
namespaceblock -> namespace ID { statements · }, null
namespaceblock -> namespace ID { statements · }, ++
namespaceblock -> namespace ID { statements · }, --
namespaceblock -> namespace ID { statements · }, break
namespaceblock -> namespace ID { statements · }, return
namespaceblock -> namespace ID { statements · }, delete
namespaceblock -> namespace ID { statements · }, while
namespaceblock -> namespace ID { statements · }, for
namespaceblock -> namespace ID { statements · }, if
statements -> statements · stmt, }
statements -> statements · stmt, namespace
statements -> statements · stmt, {
statements -> statements · stmt, ID
statements -> statements · stmt, void
statements -> statements · stmt, bool
statements -> statements · stmt, int
statements -> statements · stmt, float
statements -> statements · stmt, string
statements -> statements · stmt, extern
statements -> statements · stmt, class
statements -> statements · stmt, (
statements -> statements · stmt, this
statements -> statements · stmt, new
statements -> statements · stmt, LITINT
statements -> statements · stmt, LITFLOAT
statements -> statements · stmt, LITSTRING
statements -> statements · stmt, LITBOOL
statements -> statements · stmt, null
statements -> statements · stmt, ++
statements -> statements · stmt, --
statements -> statements · stmt, break
statements -> statements · stmt, return
statements -> statements · stmt, delete
statements -> statements · stmt, while
statements -> statements · stmt, for
statements -> statements · stmt, if
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · string, ID
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
namespaceblock -> namespace ID { statements · }, }
namespaceblock -> namespace ID { statements · }, &&
namespaceblock -> namespace ID { statements · }, ||
namespaceblock -> namespace ID { statements · }, +
namespaceblock -> namespace ID { statements · }, -
namespaceblock -> namespace ID { statements · }, *
namespaceblock -> namespace ID { statements · }, /
namespaceblock -> namespace ID { statements · }, !
namespaceblock -> namespace ID { statements · }, else
***EndSet***
***EndState***
***State***
164
I_387_795_962_1244_1283_1369_1387
***Set***
declstmt -> extern type ID ( · params ) ;, $
declstmt -> extern type ID ( · params ) ;, namespace
declstmt -> extern type ID ( · params ) ;, {
declstmt -> extern type ID ( · params ) ;, ID
declstmt -> extern type ID ( · params ) ;, void
declstmt -> extern type ID ( · params ) ;, bool
declstmt -> extern type ID ( · params ) ;, int
declstmt -> extern type ID ( · params ) ;, float
declstmt -> extern type ID ( · params ) ;, string
declstmt -> extern type ID ( · params ) ;, extern
declstmt -> extern type ID ( · params ) ;, class
declstmt -> extern type ID ( · params ) ;, (
declstmt -> extern type ID ( · params ) ;, this
declstmt -> extern type ID ( · params ) ;, new
declstmt -> extern type ID ( · params ) ;, LITINT
declstmt -> extern type ID ( · params ) ;, LITFLOAT
declstmt -> extern type ID ( · params ) ;, LITSTRING
declstmt -> extern type ID ( · params ) ;, LITBOOL
declstmt -> extern type ID ( · params ) ;, null
declstmt -> extern type ID ( · params ) ;, ++
declstmt -> extern type ID ( · params ) ;, --
declstmt -> extern type ID ( · params ) ;, break
declstmt -> extern type ID ( · params ) ;, return
declstmt -> extern type ID ( · params ) ;, delete
declstmt -> extern type ID ( · params ) ;, while
declstmt -> extern type ID ( · params ) ;, for
declstmt -> extern type ID ( · params ) ;, if
params -> ·, )
params -> · type ID, )
params -> · params , type ID, )
type -> · arrtype, ID
type -> · stype, ID
params -> ·, ,
params -> · type ID, ,
params -> · params , type ID, ,
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · string, ID
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · string, [
declstmt -> extern type ID ( · params ) ;, }
declstmt -> extern type ID ( · params ) ;, &&
declstmt -> extern type ID ( · params ) ;, ||
declstmt -> extern type ID ( · params ) ;, +
declstmt -> extern type ID ( · params ) ;, -
declstmt -> extern type ID ( · params ) ;, *
declstmt -> extern type ID ( · params ) ;, /
declstmt -> extern type ID ( · params ) ;, !
declstmt -> extern type ID ( · params ) ;, else
***EndSet***
***EndState***
***State***
165
I_388
***Set***
inherit -> : ID ·, {
***EndSet***
***EndState***
***State***
166
I_389_796_963_1245_1284_1370_1388
***Set***
declstmt -> class ID inherit { · declstatements }, $
declstmt -> class ID inherit { · declstatements }, namespace
declstmt -> class ID inherit { · declstatements }, {
declstmt -> class ID inherit { · declstatements }, ID
declstmt -> class ID inherit { · declstatements }, void
declstmt -> class ID inherit { · declstatements }, bool
declstmt -> class ID inherit { · declstatements }, int
declstmt -> class ID inherit { · declstatements }, float
declstmt -> class ID inherit { · declstatements }, string
declstmt -> class ID inherit { · declstatements }, extern
declstmt -> class ID inherit { · declstatements }, class
declstmt -> class ID inherit { · declstatements }, (
declstmt -> class ID inherit { · declstatements }, this
declstmt -> class ID inherit { · declstatements }, new
declstmt -> class ID inherit { · declstatements }, LITINT
declstmt -> class ID inherit { · declstatements }, LITFLOAT
declstmt -> class ID inherit { · declstatements }, LITSTRING
declstmt -> class ID inherit { · declstatements }, LITBOOL
declstmt -> class ID inherit { · declstatements }, null
declstmt -> class ID inherit { · declstatements }, ++
declstmt -> class ID inherit { · declstatements }, --
declstmt -> class ID inherit { · declstatements }, break
declstmt -> class ID inherit { · declstatements }, return
declstmt -> class ID inherit { · declstatements }, delete
declstmt -> class ID inherit { · declstatements }, while
declstmt -> class ID inherit { · declstatements }, for
declstmt -> class ID inherit { · declstatements }, if
declstatements -> · declstatements declstmt, }
declstatements -> · declstmt, }
declstatements -> ·, }
declstatements -> · declstatements declstmt, ID
declstatements -> · declstatements declstmt, void
declstatements -> · declstatements declstmt, bool
declstatements -> · declstatements declstmt, int
declstatements -> · declstatements declstmt, float
declstatements -> · declstatements declstmt, string
declstatements -> · declstatements declstmt, extern
declstatements -> · declstatements declstmt, class
declstatements -> · declstmt, ID
declstatements -> · declstmt, void
declstatements -> · declstmt, bool
declstatements -> · declstmt, int
declstatements -> · declstmt, float
declstatements -> · declstmt, string
declstatements -> · declstmt, extern
declstatements -> · declstmt, class
declstatements -> ·, ID
declstatements -> ·, void
declstatements -> ·, bool
declstatements -> ·, int
declstatements -> ·, float
declstatements -> ·, string
declstatements -> ·, extern
declstatements -> ·, class
declstmt -> · type ID = expr ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
declstmt -> · type ID = expr ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
declstmt -> · type ID = expr ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
declstmt -> · type ID = expr ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
declstmt -> · type ID = expr ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
declstmt -> · type ID = expr ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
declstmt -> · type ID = expr ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
declstmt -> · type ID = expr ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
declstmt -> · type ID = expr ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
type -> · arrtype, ID
type -> · stype, ID
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · string, ID
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · string, [
declstmt -> class ID inherit { · declstatements }, }
declstmt -> class ID inherit { · declstatements }, &&
declstmt -> class ID inherit { · declstatements }, ||
declstmt -> class ID inherit { · declstatements }, +
declstmt -> class ID inherit { · declstatements }, -
declstmt -> class ID inherit { · declstatements }, *
declstmt -> class ID inherit { · declstatements }, /
declstmt -> class ID inherit { · declstatements }, !
declstmt -> class ID inherit { · declstatements }, else
***EndSet***
***EndState***
***State***
167
I_390_660_744_1042_1092_1124_1131_1184_1191_1311_1318_1330_1353
***Set***
newobj -> new ID ( ) ·, ;
newobj -> new ID ( ) ·, .
newobj -> new ID ( ) ·, &&
newobj -> new ID ( ) ·, ||
newobj -> new ID ( ) ·, >
newobj -> new ID ( ) ·, <
newobj -> new ID ( ) ·, >=
newobj -> new ID ( ) ·, <=
newobj -> new ID ( ) ·, ==
newobj -> new ID ( ) ·, !=
newobj -> new ID ( ) ·, +
newobj -> new ID ( ) ·, -
newobj -> new ID ( ) ·, *
newobj -> new ID ( ) ·, /
newobj -> new ID ( ) ·, )
newobj -> new ID ( ) ·, ,
newobj -> new ID ( ) ·, ]
***EndSet***
***EndState***
***State***
168
I_396_489_805_886_941_954_999_1012_1221_1234_1250
***Set***
cast -> ( type ) · factor, ;
cast -> ( type ) · factor, &&
cast -> ( type ) · factor, ||
cast -> ( type ) · factor, >
cast -> ( type ) · factor, <
cast -> ( type ) · factor, >=
cast -> ( type ) · factor, <=
cast -> ( type ) · factor, ==
cast -> ( type ) · factor, !=
cast -> ( type ) · factor, +
cast -> ( type ) · factor, -
cast -> ( type ) · factor, *
cast -> ( type ) · factor, /
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITSTRING, ;
lit -> · LITBOOL, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITSTRING, &&
lit -> · LITBOOL, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITSTRING, ||
lit -> · LITBOOL, ||
lit -> · null, ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITSTRING, >
lit -> · LITBOOL, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITSTRING, <
lit -> · LITBOOL, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITSTRING, >=
lit -> · LITBOOL, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITSTRING, <=
lit -> · LITBOOL, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITSTRING, ==
lit -> · LITBOOL, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITSTRING, !=
lit -> · LITBOOL, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITSTRING, +
lit -> · LITBOOL, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITSTRING, -
lit -> · LITBOOL, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITSTRING, *
lit -> · LITBOOL, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITSTRING, /
lit -> · LITBOOL, /
lit -> · null, /
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
cast -> ( type ) · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITSTRING, )
lit -> · LITBOOL, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
cast -> ( type ) · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITSTRING, ,
lit -> · LITBOOL, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
cast -> ( type ) · factor, ]
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITINT, ]
lit -> · LITFLOAT, ]
lit -> · LITSTRING, ]
lit -> · LITBOOL, ]
lit -> · null, ]
idBracket -> · ID [ optidx ], ]
***EndSet***
***EndState***
***State***
169
I_403_495_811
***Set***
bexpr -> bexpr || bexpr ·, ;
bexpr -> bexpr || bexpr ·, &&
bexpr -> bexpr || bexpr ·, ||
bexpr -> bexpr · && bexpr, ;
bexpr -> bexpr · || bexpr, ;
bexpr -> bexpr · && bexpr, &&
bexpr -> bexpr · || bexpr, &&
bexpr -> bexpr · && bexpr, ||
bexpr -> bexpr · || bexpr, ||
bexpr -> bexpr || bexpr ·, )
bexpr -> bexpr · && bexpr, )
bexpr -> bexpr · || bexpr, )
bexpr -> bexpr || bexpr ·, ,
bexpr -> bexpr · && bexpr, ,
bexpr -> bexpr · || bexpr, ,
***EndSet***
***EndState***
***State***
170
I_404_496_812
***Set***
bexpr -> aexpr · > aexpr, ;
bexpr -> aexpr · < aexpr, ;
bexpr -> aexpr · >= aexpr, ;
bexpr -> aexpr · <= aexpr, ;
bexpr -> aexpr · == aexpr, ;
bexpr -> aexpr · != aexpr, ;
bexpr -> aexpr · > aexpr, &&
bexpr -> aexpr · < aexpr, &&
bexpr -> aexpr · >= aexpr, &&
bexpr -> aexpr · <= aexpr, &&
bexpr -> aexpr · == aexpr, &&
bexpr -> aexpr · != aexpr, &&
bexpr -> aexpr · > aexpr, ||
bexpr -> aexpr · < aexpr, ||
bexpr -> aexpr · >= aexpr, ||
bexpr -> aexpr · <= aexpr, ||
bexpr -> aexpr · == aexpr, ||
bexpr -> aexpr · != aexpr, ||
aexpr -> aexpr · + term, >
aexpr -> aexpr · - term, >
aexpr -> aexpr · + term, <
aexpr -> aexpr · - term, <
aexpr -> aexpr · + term, >=
aexpr -> aexpr · - term, >=
aexpr -> aexpr · + term, <=
aexpr -> aexpr · - term, <=
aexpr -> aexpr · + term, ==
aexpr -> aexpr · - term, ==
aexpr -> aexpr · + term, !=
aexpr -> aexpr · - term, !=
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
bexpr -> aexpr · > aexpr, )
bexpr -> aexpr · < aexpr, )
bexpr -> aexpr · >= aexpr, )
bexpr -> aexpr · <= aexpr, )
bexpr -> aexpr · == aexpr, )
bexpr -> aexpr · != aexpr, )
bexpr -> aexpr · > aexpr, ,
bexpr -> aexpr · < aexpr, ,
bexpr -> aexpr · >= aexpr, ,
bexpr -> aexpr · <= aexpr, ,
bexpr -> aexpr · == aexpr, ,
bexpr -> aexpr · != aexpr, ,
***EndSet***
***EndState***
***State***
171
I_407_498_814
***Set***
bexpr -> bexpr && bexpr ·, ;
bexpr -> bexpr && bexpr ·, &&
bexpr -> bexpr && bexpr ·, ||
bexpr -> bexpr · && bexpr, ;
bexpr -> bexpr · || bexpr, ;
bexpr -> bexpr · && bexpr, &&
bexpr -> bexpr · || bexpr, &&
bexpr -> bexpr · && bexpr, ||
bexpr -> bexpr · || bexpr, ||
bexpr -> bexpr && bexpr ·, )
bexpr -> bexpr · && bexpr, )
bexpr -> bexpr · || bexpr, )
bexpr -> bexpr && bexpr ·, ,
bexpr -> bexpr · && bexpr, ,
bexpr -> bexpr · || bexpr, ,
***EndSet***
***EndState***
***State***
172
I_426_517_833
***Set***
bexpr -> aexpr == aexpr ·, ;
bexpr -> aexpr == aexpr ·, &&
bexpr -> aexpr == aexpr ·, ||
aexpr -> aexpr · + term, ;
aexpr -> aexpr · - term, ;
aexpr -> aexpr · + term, &&
aexpr -> aexpr · - term, &&
aexpr -> aexpr · + term, ||
aexpr -> aexpr · - term, ||
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
bexpr -> aexpr == aexpr ·, )
aexpr -> aexpr · + term, )
aexpr -> aexpr · - term, )
bexpr -> aexpr == aexpr ·, ,
aexpr -> aexpr · + term, ,
aexpr -> aexpr · - term, ,
***EndSet***
***EndState***
***State***
173
I_434_525_841
***Set***
bexpr -> aexpr != aexpr ·, ;
bexpr -> aexpr != aexpr ·, &&
bexpr -> aexpr != aexpr ·, ||
aexpr -> aexpr · + term, ;
aexpr -> aexpr · - term, ;
aexpr -> aexpr · + term, &&
aexpr -> aexpr · - term, &&
aexpr -> aexpr · + term, ||
aexpr -> aexpr · - term, ||
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
bexpr -> aexpr != aexpr ·, )
aexpr -> aexpr · + term, )
aexpr -> aexpr · - term, )
bexpr -> aexpr != aexpr ·, ,
aexpr -> aexpr · + term, ,
aexpr -> aexpr · - term, ,
***EndSet***
***EndState***
***State***
174
I_435_526_842
***Set***
bexpr -> aexpr <= aexpr ·, ;
bexpr -> aexpr <= aexpr ·, &&
bexpr -> aexpr <= aexpr ·, ||
aexpr -> aexpr · + term, ;
aexpr -> aexpr · - term, ;
aexpr -> aexpr · + term, &&
aexpr -> aexpr · - term, &&
aexpr -> aexpr · + term, ||
aexpr -> aexpr · - term, ||
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
bexpr -> aexpr <= aexpr ·, )
aexpr -> aexpr · + term, )
aexpr -> aexpr · - term, )
bexpr -> aexpr <= aexpr ·, ,
aexpr -> aexpr · + term, ,
aexpr -> aexpr · - term, ,
***EndSet***
***EndState***
***State***
175
I_436_527_843
***Set***
bexpr -> aexpr >= aexpr ·, ;
bexpr -> aexpr >= aexpr ·, &&
bexpr -> aexpr >= aexpr ·, ||
aexpr -> aexpr · + term, ;
aexpr -> aexpr · - term, ;
aexpr -> aexpr · + term, &&
aexpr -> aexpr · - term, &&
aexpr -> aexpr · + term, ||
aexpr -> aexpr · - term, ||
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
bexpr -> aexpr >= aexpr ·, )
aexpr -> aexpr · + term, )
aexpr -> aexpr · - term, )
bexpr -> aexpr >= aexpr ·, ,
aexpr -> aexpr · + term, ,
aexpr -> aexpr · - term, ,
***EndSet***
***EndState***
***State***
176
I_437_528_844
***Set***
bexpr -> aexpr > aexpr ·, ;
bexpr -> aexpr > aexpr ·, &&
bexpr -> aexpr > aexpr ·, ||
aexpr -> aexpr · + term, ;
aexpr -> aexpr · - term, ;
aexpr -> aexpr · + term, &&
aexpr -> aexpr · - term, &&
aexpr -> aexpr · + term, ||
aexpr -> aexpr · - term, ||
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
bexpr -> aexpr > aexpr ·, )
aexpr -> aexpr · + term, )
aexpr -> aexpr · - term, )
bexpr -> aexpr > aexpr ·, ,
aexpr -> aexpr · + term, ,
aexpr -> aexpr · - term, ,
***EndSet***
***EndState***
***State***
177
I_438_529_845
***Set***
bexpr -> aexpr < aexpr ·, ;
bexpr -> aexpr < aexpr ·, &&
bexpr -> aexpr < aexpr ·, ||
aexpr -> aexpr · + term, ;
aexpr -> aexpr · - term, ;
aexpr -> aexpr · + term, &&
aexpr -> aexpr · - term, &&
aexpr -> aexpr · + term, ||
aexpr -> aexpr · - term, ||
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
bexpr -> aexpr < aexpr ·, )
aexpr -> aexpr · + term, )
aexpr -> aexpr · - term, )
bexpr -> aexpr < aexpr ·, ,
aexpr -> aexpr · + term, ,
aexpr -> aexpr · - term, ,
***EndSet***
***EndState***
***State***
178
I_457_548_864_890_929_945_1003_1225
***Set***
aexpr -> aexpr + term ·, ;
aexpr -> aexpr + term ·, >
aexpr -> aexpr + term ·, <
aexpr -> aexpr + term ·, >=
aexpr -> aexpr + term ·, <=
aexpr -> aexpr + term ·, ==
aexpr -> aexpr + term ·, !=
aexpr -> aexpr + term ·, +
aexpr -> aexpr + term ·, -
term -> term · * factor, ;
term -> term · / factor, ;
term -> term · * factor, >
term -> term · / factor, >
term -> term · * factor, <
term -> term · / factor, <
term -> term · * factor, >=
term -> term · / factor, >=
term -> term · * factor, <=
term -> term · / factor, <=
term -> term · * factor, ==
term -> term · / factor, ==
term -> term · * factor, !=
term -> term · / factor, !=
term -> term · * factor, +
term -> term · / factor, +
term -> term · * factor, -
term -> term · / factor, -
term -> term · * factor, *
term -> term · / factor, *
term -> term · * factor, /
term -> term · / factor, /
aexpr -> aexpr + term ·, )
term -> term · * factor, )
term -> term · / factor, )
aexpr -> aexpr + term ·, ,
term -> term · * factor, ,
term -> term · / factor, ,
aexpr -> aexpr + term ·, ]
term -> term · * factor, ]
term -> term · / factor, ]
aexpr -> aexpr + term ·, &&
aexpr -> aexpr + term ·, ||
term -> term · * factor, &&
term -> term · / factor, &&
term -> term · * factor, ||
term -> term · / factor, ||
***EndSet***
***EndState***
***State***
179
I_464_555_871_891_936_946_1004_1226
***Set***
aexpr -> aexpr - term ·, ;
aexpr -> aexpr - term ·, >
aexpr -> aexpr - term ·, <
aexpr -> aexpr - term ·, >=
aexpr -> aexpr - term ·, <=
aexpr -> aexpr - term ·, ==
aexpr -> aexpr - term ·, !=
aexpr -> aexpr - term ·, +
aexpr -> aexpr - term ·, -
term -> term · * factor, ;
term -> term · / factor, ;
term -> term · * factor, >
term -> term · / factor, >
term -> term · * factor, <
term -> term · / factor, <
term -> term · * factor, >=
term -> term · / factor, >=
term -> term · * factor, <=
term -> term · / factor, <=
term -> term · * factor, ==
term -> term · / factor, ==
term -> term · * factor, !=
term -> term · / factor, !=
term -> term · * factor, +
term -> term · / factor, +
term -> term · * factor, -
term -> term · / factor, -
term -> term · * factor, *
term -> term · / factor, *
term -> term · * factor, /
term -> term · / factor, /
aexpr -> aexpr - term ·, )
term -> term · * factor, )
term -> term · / factor, )
aexpr -> aexpr - term ·, ,
term -> term · * factor, ,
term -> term · / factor, ,
aexpr -> aexpr - term ·, ]
term -> term · * factor, ]
term -> term · / factor, ]
aexpr -> aexpr - term ·, &&
aexpr -> aexpr - term ·, ||
term -> term · * factor, &&
term -> term · / factor, &&
term -> term · * factor, ||
term -> term · / factor, ||
***EndSet***
***EndState***
***State***
180
I_465_556_872_892_937_947_1005_1227
***Set***
term -> term * factor ·, ;
term -> term * factor ·, >
term -> term * factor ·, <
term -> term * factor ·, >=
term -> term * factor ·, <=
term -> term * factor ·, ==
term -> term * factor ·, !=
term -> term * factor ·, +
term -> term * factor ·, -
term -> term * factor ·, *
term -> term * factor ·, /
term -> term * factor ·, )
term -> term * factor ·, ,
term -> term * factor ·, ]
term -> term * factor ·, &&
term -> term * factor ·, ||
***EndSet***
***EndState***
***State***
181
I_466_557_873_893_938_948_1006_1228
***Set***
term -> term / factor ·, ;
term -> term / factor ·, >
term -> term / factor ·, <
term -> term / factor ·, >=
term -> term / factor ·, <=
term -> term / factor ·, ==
term -> term / factor ·, !=
term -> term / factor ·, +
term -> term / factor ·, -
term -> term / factor ·, *
term -> term / factor ·, /
term -> term / factor ·, )
term -> term / factor ·, ,
term -> term / factor ·, ]
term -> term / factor ·, &&
term -> term / factor ·, ||
***EndSet***
***EndState***
***State***
182
I_470_797_964_1285_1371_1389
***Set***
stmt -> while ( expr ) · stmt, $
stmt -> while ( expr ) · stmt, namespace
stmt -> while ( expr ) · stmt, {
stmt -> while ( expr ) · stmt, ID
stmt -> while ( expr ) · stmt, void
stmt -> while ( expr ) · stmt, bool
stmt -> while ( expr ) · stmt, int
stmt -> while ( expr ) · stmt, float
stmt -> while ( expr ) · stmt, string
stmt -> while ( expr ) · stmt, extern
stmt -> while ( expr ) · stmt, class
stmt -> while ( expr ) · stmt, (
stmt -> while ( expr ) · stmt, this
stmt -> while ( expr ) · stmt, new
stmt -> while ( expr ) · stmt, LITINT
stmt -> while ( expr ) · stmt, LITFLOAT
stmt -> while ( expr ) · stmt, LITSTRING
stmt -> while ( expr ) · stmt, LITBOOL
stmt -> while ( expr ) · stmt, null
stmt -> while ( expr ) · stmt, ++
stmt -> while ( expr ) · stmt, --
stmt -> while ( expr ) · stmt, break
stmt -> while ( expr ) · stmt, return
stmt -> while ( expr ) · stmt, delete
stmt -> while ( expr ) · stmt, while
stmt -> while ( expr ) · stmt, for
stmt -> while ( expr ) · stmt, if
stmt -> · namespaceblock, $
stmt -> · statementblock, $
stmt -> · declstmt, $
stmt -> · stmtexpr ;, $
stmt -> · break ;, $
stmt -> · return expr ;, $
stmt -> · return ;, $
stmt -> · delete expr ;, $
stmt -> · while ( expr ) stmt, $
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, $
stmt -> · if ( expr ) stmt elifclauselist elseclause, $
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, $
statementblock -> · { statements }, $
declstmt -> · type ID = expr ;, $
declstmt -> · type ID ( params ) { statements }, $
declstmt -> · extern type ID ( params ) ;, $
declstmt -> · class ID inherit { declstatements }, $
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · string, ID
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
stmt -> while ( expr ) · stmt, }
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
stmt -> while ( expr ) · stmt, &&
stmt -> while ( expr ) · stmt, ||
stmt -> while ( expr ) · stmt, +
stmt -> while ( expr ) · stmt, -
stmt -> while ( expr ) · stmt, *
stmt -> while ( expr ) · stmt, /
stmt -> while ( expr ) · stmt, !
stmt -> · namespaceblock, &&
stmt -> · statementblock, &&
stmt -> · declstmt, &&
stmt -> · stmtexpr ;, &&
stmt -> · break ;, &&
stmt -> · return expr ;, &&
stmt -> · return ;, &&
stmt -> · delete expr ;, &&
stmt -> · while ( expr ) stmt, &&
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, &&
stmt -> · if ( expr ) stmt elifclauselist elseclause, &&
stmt -> · namespaceblock, ||
stmt -> · statementblock, ||
stmt -> · declstmt, ||
stmt -> · stmtexpr ;, ||
stmt -> · break ;, ||
stmt -> · return expr ;, ||
stmt -> · return ;, ||
stmt -> · delete expr ;, ||
stmt -> · while ( expr ) stmt, ||
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ||
stmt -> · if ( expr ) stmt elifclauselist elseclause, ||
stmt -> · namespaceblock, +
stmt -> · statementblock, +
stmt -> · declstmt, +
stmt -> · stmtexpr ;, +
stmt -> · break ;, +
stmt -> · return expr ;, +
stmt -> · return ;, +
stmt -> · delete expr ;, +
stmt -> · while ( expr ) stmt, +
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, +
stmt -> · if ( expr ) stmt elifclauselist elseclause, +
stmt -> · namespaceblock, -
stmt -> · statementblock, -
stmt -> · declstmt, -
stmt -> · stmtexpr ;, -
stmt -> · break ;, -
stmt -> · return expr ;, -
stmt -> · return ;, -
stmt -> · delete expr ;, -
stmt -> · while ( expr ) stmt, -
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, -
stmt -> · if ( expr ) stmt elifclauselist elseclause, -
stmt -> · namespaceblock, *
stmt -> · statementblock, *
stmt -> · declstmt, *
stmt -> · stmtexpr ;, *
stmt -> · break ;, *
stmt -> · return expr ;, *
stmt -> · return ;, *
stmt -> · delete expr ;, *
stmt -> · while ( expr ) stmt, *
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, *
stmt -> · if ( expr ) stmt elifclauselist elseclause, *
stmt -> · namespaceblock, /
stmt -> · statementblock, /
stmt -> · declstmt, /
stmt -> · stmtexpr ;, /
stmt -> · break ;, /
stmt -> · return expr ;, /
stmt -> · return ;, /
stmt -> · delete expr ;, /
stmt -> · while ( expr ) stmt, /
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, /
stmt -> · if ( expr ) stmt elifclauselist elseclause, /
stmt -> · namespaceblock, !
stmt -> · statementblock, !
stmt -> · declstmt, !
stmt -> · stmtexpr ;, !
stmt -> · break ;, !
stmt -> · return expr ;, !
stmt -> · return ;, !
stmt -> · delete expr ;, !
stmt -> · while ( expr ) stmt, !
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, !
stmt -> · if ( expr ) stmt elifclauselist elseclause, !
namespaceblock -> · namespace ID { statements }, &&
statementblock -> · { statements }, &&
declstmt -> · type ID = expr ;, &&
declstmt -> · type ID ( params ) { statements }, &&
declstmt -> · extern type ID ( params ) ;, &&
declstmt -> · class ID inherit { declstatements }, &&
namespaceblock -> · namespace ID { statements }, ||
statementblock -> · { statements }, ||
declstmt -> · type ID = expr ;, ||
declstmt -> · type ID ( params ) { statements }, ||
declstmt -> · extern type ID ( params ) ;, ||
declstmt -> · class ID inherit { declstatements }, ||
namespaceblock -> · namespace ID { statements }, +
statementblock -> · { statements }, +
declstmt -> · type ID = expr ;, +
declstmt -> · type ID ( params ) { statements }, +
declstmt -> · extern type ID ( params ) ;, +
declstmt -> · class ID inherit { declstatements }, +
namespaceblock -> · namespace ID { statements }, -
statementblock -> · { statements }, -
declstmt -> · type ID = expr ;, -
declstmt -> · type ID ( params ) { statements }, -
declstmt -> · extern type ID ( params ) ;, -
declstmt -> · class ID inherit { declstatements }, -
namespaceblock -> · namespace ID { statements }, *
statementblock -> · { statements }, *
declstmt -> · type ID = expr ;, *
declstmt -> · type ID ( params ) { statements }, *
declstmt -> · extern type ID ( params ) ;, *
declstmt -> · class ID inherit { declstatements }, *
namespaceblock -> · namespace ID { statements }, /
statementblock -> · { statements }, /
declstmt -> · type ID = expr ;, /
declstmt -> · type ID ( params ) { statements }, /
declstmt -> · extern type ID ( params ) ;, /
declstmt -> · class ID inherit { declstatements }, /
namespaceblock -> · namespace ID { statements }, !
statementblock -> · { statements }, !
declstmt -> · type ID = expr ;, !
declstmt -> · type ID ( params ) { statements }, !
declstmt -> · extern type ID ( params ) ;, !
declstmt -> · class ID inherit { declstatements }, !
stmt -> while ( expr ) · stmt, else
stmt -> · namespaceblock, else
stmt -> · statementblock, else
stmt -> · declstmt, else
stmt -> · stmtexpr ;, else
stmt -> · break ;, else
stmt -> · return expr ;, else
stmt -> · return ;, else
stmt -> · delete expr ;, else
stmt -> · while ( expr ) stmt, else
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, else
stmt -> · if ( expr ) stmt elifclauselist elseclause, else
namespaceblock -> · namespace ID { statements }, else
statementblock -> · { statements }, else
declstmt -> · type ID = expr ;, else
declstmt -> · type ID ( params ) { statements }, else
declstmt -> · extern type ID ( params ) ;, else
declstmt -> · class ID inherit { declstatements }, else
***EndSet***
***EndState***
***State***
183
I_482_798_965_1286_1372_1390
***Set***
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, $
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, namespace
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, {
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, ID
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, void
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, bool
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, int
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, float
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, string
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, extern
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, class
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, (
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, this
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, new
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, LITINT
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, LITFLOAT
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, LITSTRING
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, LITBOOL
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, null
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, ++
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, --
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, break
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, return
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, delete
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, while
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, for
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, if
bexpr -> bexpr · && bexpr, ;
bexpr -> bexpr · || bexpr, ;
bexpr -> bexpr · && bexpr, &&
bexpr -> bexpr · || bexpr, &&
bexpr -> bexpr · && bexpr, ||
bexpr -> bexpr · || bexpr, ||
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, }
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, &&
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, ||
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, +
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, -
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, *
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, /
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, !
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, else
***EndSet***
***EndState***
***State***
184
I_485_799_966_1287_1373_1391
***Set***
stmt -> if ( expr ) · stmt elifclauselist elseclause, $
stmt -> if ( expr ) · stmt elifclauselist elseclause, namespace
stmt -> if ( expr ) · stmt elifclauselist elseclause, {
stmt -> if ( expr ) · stmt elifclauselist elseclause, ID
stmt -> if ( expr ) · stmt elifclauselist elseclause, void
stmt -> if ( expr ) · stmt elifclauselist elseclause, bool
stmt -> if ( expr ) · stmt elifclauselist elseclause, int
stmt -> if ( expr ) · stmt elifclauselist elseclause, float
stmt -> if ( expr ) · stmt elifclauselist elseclause, string
stmt -> if ( expr ) · stmt elifclauselist elseclause, extern
stmt -> if ( expr ) · stmt elifclauselist elseclause, class
stmt -> if ( expr ) · stmt elifclauselist elseclause, (
stmt -> if ( expr ) · stmt elifclauselist elseclause, this
stmt -> if ( expr ) · stmt elifclauselist elseclause, new
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITINT
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITFLOAT
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITSTRING
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITBOOL
stmt -> if ( expr ) · stmt elifclauselist elseclause, null
stmt -> if ( expr ) · stmt elifclauselist elseclause, ++
stmt -> if ( expr ) · stmt elifclauselist elseclause, --
stmt -> if ( expr ) · stmt elifclauselist elseclause, break
stmt -> if ( expr ) · stmt elifclauselist elseclause, return
stmt -> if ( expr ) · stmt elifclauselist elseclause, delete
stmt -> if ( expr ) · stmt elifclauselist elseclause, while
stmt -> if ( expr ) · stmt elifclauselist elseclause, for
stmt -> if ( expr ) · stmt elifclauselist elseclause, if
stmt -> · namespaceblock, else
stmt -> · namespaceblock, $
stmt -> · statementblock, else
stmt -> · statementblock, $
stmt -> · declstmt, else
stmt -> · declstmt, $
stmt -> · stmtexpr ;, else
stmt -> · stmtexpr ;, $
stmt -> · break ;, else
stmt -> · break ;, $
stmt -> · return expr ;, else
stmt -> · return expr ;, $
stmt -> · return ;, else
stmt -> · return ;, $
stmt -> · delete expr ;, else
stmt -> · delete expr ;, $
stmt -> · while ( expr ) stmt, else
stmt -> · while ( expr ) stmt, $
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, else
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, $
stmt -> · if ( expr ) stmt elifclauselist elseclause, else
stmt -> · if ( expr ) stmt elifclauselist elseclause, $
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, else
namespaceblock -> · namespace ID { statements }, $
statementblock -> · { statements }, else
statementblock -> · { statements }, $
declstmt -> · type ID = expr ;, else
declstmt -> · type ID ( params ) { statements }, else
declstmt -> · extern type ID ( params ) ;, else
declstmt -> · class ID inherit { declstatements }, else
declstmt -> · type ID = expr ;, $
declstmt -> · type ID ( params ) { statements }, $
declstmt -> · extern type ID ( params ) ;, $
declstmt -> · class ID inherit { declstatements }, $
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · string, ID
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
stmt -> if ( expr ) · stmt elifclauselist elseclause, }
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
stmt -> if ( expr ) · stmt elifclauselist elseclause, &&
stmt -> if ( expr ) · stmt elifclauselist elseclause, ||
stmt -> if ( expr ) · stmt elifclauselist elseclause, +
stmt -> if ( expr ) · stmt elifclauselist elseclause, -
stmt -> if ( expr ) · stmt elifclauselist elseclause, *
stmt -> if ( expr ) · stmt elifclauselist elseclause, /
stmt -> if ( expr ) · stmt elifclauselist elseclause, !
stmt -> · namespaceblock, &&
stmt -> · statementblock, &&
stmt -> · declstmt, &&
stmt -> · stmtexpr ;, &&
stmt -> · break ;, &&
stmt -> · return expr ;, &&
stmt -> · return ;, &&
stmt -> · delete expr ;, &&
stmt -> · while ( expr ) stmt, &&
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, &&
stmt -> · if ( expr ) stmt elifclauselist elseclause, &&
stmt -> · namespaceblock, ||
stmt -> · statementblock, ||
stmt -> · declstmt, ||
stmt -> · stmtexpr ;, ||
stmt -> · break ;, ||
stmt -> · return expr ;, ||
stmt -> · return ;, ||
stmt -> · delete expr ;, ||
stmt -> · while ( expr ) stmt, ||
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ||
stmt -> · if ( expr ) stmt elifclauselist elseclause, ||
stmt -> · namespaceblock, +
stmt -> · statementblock, +
stmt -> · declstmt, +
stmt -> · stmtexpr ;, +
stmt -> · break ;, +
stmt -> · return expr ;, +
stmt -> · return ;, +
stmt -> · delete expr ;, +
stmt -> · while ( expr ) stmt, +
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, +
stmt -> · if ( expr ) stmt elifclauselist elseclause, +
stmt -> · namespaceblock, -
stmt -> · statementblock, -
stmt -> · declstmt, -
stmt -> · stmtexpr ;, -
stmt -> · break ;, -
stmt -> · return expr ;, -
stmt -> · return ;, -
stmt -> · delete expr ;, -
stmt -> · while ( expr ) stmt, -
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, -
stmt -> · if ( expr ) stmt elifclauselist elseclause, -
stmt -> · namespaceblock, *
stmt -> · statementblock, *
stmt -> · declstmt, *
stmt -> · stmtexpr ;, *
stmt -> · break ;, *
stmt -> · return expr ;, *
stmt -> · return ;, *
stmt -> · delete expr ;, *
stmt -> · while ( expr ) stmt, *
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, *
stmt -> · if ( expr ) stmt elifclauselist elseclause, *
stmt -> · namespaceblock, /
stmt -> · statementblock, /
stmt -> · declstmt, /
stmt -> · stmtexpr ;, /
stmt -> · break ;, /
stmt -> · return expr ;, /
stmt -> · return ;, /
stmt -> · delete expr ;, /
stmt -> · while ( expr ) stmt, /
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, /
stmt -> · if ( expr ) stmt elifclauselist elseclause, /
stmt -> · namespaceblock, !
stmt -> · statementblock, !
stmt -> · declstmt, !
stmt -> · stmtexpr ;, !
stmt -> · break ;, !
stmt -> · return expr ;, !
stmt -> · return ;, !
stmt -> · delete expr ;, !
stmt -> · while ( expr ) stmt, !
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, !
stmt -> · if ( expr ) stmt elifclauselist elseclause, !
namespaceblock -> · namespace ID { statements }, &&
statementblock -> · { statements }, &&
declstmt -> · type ID = expr ;, &&
declstmt -> · type ID ( params ) { statements }, &&
declstmt -> · extern type ID ( params ) ;, &&
declstmt -> · class ID inherit { declstatements }, &&
namespaceblock -> · namespace ID { statements }, ||
statementblock -> · { statements }, ||
declstmt -> · type ID = expr ;, ||
declstmt -> · type ID ( params ) { statements }, ||
declstmt -> · extern type ID ( params ) ;, ||
declstmt -> · class ID inherit { declstatements }, ||
namespaceblock -> · namespace ID { statements }, +
statementblock -> · { statements }, +
declstmt -> · type ID = expr ;, +
declstmt -> · type ID ( params ) { statements }, +
declstmt -> · extern type ID ( params ) ;, +
declstmt -> · class ID inherit { declstatements }, +
namespaceblock -> · namespace ID { statements }, -
statementblock -> · { statements }, -
declstmt -> · type ID = expr ;, -
declstmt -> · type ID ( params ) { statements }, -
declstmt -> · extern type ID ( params ) ;, -
declstmt -> · class ID inherit { declstatements }, -
namespaceblock -> · namespace ID { statements }, *
statementblock -> · { statements }, *
declstmt -> · type ID = expr ;, *
declstmt -> · type ID ( params ) { statements }, *
declstmt -> · extern type ID ( params ) ;, *
declstmt -> · class ID inherit { declstatements }, *
namespaceblock -> · namespace ID { statements }, /
statementblock -> · { statements }, /
declstmt -> · type ID = expr ;, /
declstmt -> · type ID ( params ) { statements }, /
declstmt -> · extern type ID ( params ) ;, /
declstmt -> · class ID inherit { declstatements }, /
namespaceblock -> · namespace ID { statements }, !
statementblock -> · { statements }, !
declstmt -> · type ID = expr ;, !
declstmt -> · type ID ( params ) { statements }, !
declstmt -> · extern type ID ( params ) ;, !
declstmt -> · class ID inherit { declstatements }, !
stmt -> if ( expr ) · stmt elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
185
I_619
***Set***
args -> args , · expr, )
args -> args , · expr, ,
expr -> · assign, )
expr -> · nexpr, )
expr -> · assign, ,
expr -> · nexpr, ,
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · factor, ,
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITSTRING, )
lit -> · LITBOOL, )
lit -> · null, )
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITSTRING, ,
lit -> · LITBOOL, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITSTRING, &&
lit -> · LITBOOL, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITSTRING, ||
lit -> · LITBOOL, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], )
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
idBracket -> · ID [ optidx ], ,
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITSTRING, >
lit -> · LITBOOL, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITSTRING, <
lit -> · LITBOOL, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITSTRING, >=
lit -> · LITBOOL, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITSTRING, <=
lit -> · LITBOOL, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITSTRING, ==
lit -> · LITBOOL, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITSTRING, !=
lit -> · LITBOOL, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITSTRING, +
lit -> · LITBOOL, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITSTRING, -
lit -> · LITBOOL, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITSTRING, *
lit -> · LITBOOL, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITSTRING, /
lit -> · LITBOOL, /
lit -> · null, /
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
***EndSet***
***EndState***
***State***
186
I_620_667_750_1048_1095_1127_1134_1187_1194_1314_1321_1333_1354
***Set***
call -> ID ( args ) ·, ;
call -> ID ( args ) ·, .
call -> ID ( args ) ·, &&
call -> ID ( args ) ·, ||
call -> ID ( args ) ·, >
call -> ID ( args ) ·, <
call -> ID ( args ) ·, >=
call -> ID ( args ) ·, <=
call -> ID ( args ) ·, ==
call -> ID ( args ) ·, !=
call -> ID ( args ) ·, +
call -> ID ( args ) ·, -
call -> ID ( args ) ·, *
call -> ID ( args ) ·, /
call -> ID ( args ) ·, )
call -> ID ( args ) ·, ,
call -> ID ( args ) ·, ]
***EndSet***
***EndState***
***State***
187
I_643_651_658_668_751_907_994_1049_1096_1128_1135_1188_1195_1216_1315_1322_1334_1355
***Set***
idBracket -> ID [ optidx ] ·, ID
idBracket -> ID [ optidx ] ·, =
idBracket -> ID [ optidx ] ·, +=
idBracket -> ID [ optidx ] ·, -=
idBracket -> ID [ optidx ] ·, *=
idBracket -> ID [ optidx ] ·, /=
idBracket -> ID [ optidx ] ·, %=
idBracket -> ID [ optidx ] ·, .
idBracket -> ID [ optidx ] ·, ;
idBracket -> ID [ optidx ] ·, &&
idBracket -> ID [ optidx ] ·, ||
idBracket -> ID [ optidx ] ·, >
idBracket -> ID [ optidx ] ·, <
idBracket -> ID [ optidx ] ·, >=
idBracket -> ID [ optidx ] ·, <=
idBracket -> ID [ optidx ] ·, ==
idBracket -> ID [ optidx ] ·, !=
idBracket -> ID [ optidx ] ·, +
idBracket -> ID [ optidx ] ·, -
idBracket -> ID [ optidx ] ·, *
idBracket -> ID [ optidx ] ·, /
idBracket -> ID [ optidx ] ·, )
idBracket -> ID [ optidx ] ·, ,
idBracket -> ID [ optidx ] ·, ]
***EndSet***
***EndState***
***State***
188
I_644
***Set***
params -> type · ID, )
params -> type · ID, ,
***EndSet***
***EndState***
***State***
189
I_645_800_978_1246_1290_1376_1394
***Set***
declstmt -> type ID ( params · ) { statements }, $
declstmt -> type ID ( params · ) { statements }, namespace
declstmt -> type ID ( params · ) { statements }, {
declstmt -> type ID ( params · ) { statements }, ID
declstmt -> type ID ( params · ) { statements }, void
declstmt -> type ID ( params · ) { statements }, bool
declstmt -> type ID ( params · ) { statements }, int
declstmt -> type ID ( params · ) { statements }, float
declstmt -> type ID ( params · ) { statements }, string
declstmt -> type ID ( params · ) { statements }, extern
declstmt -> type ID ( params · ) { statements }, class
declstmt -> type ID ( params · ) { statements }, (
declstmt -> type ID ( params · ) { statements }, this
declstmt -> type ID ( params · ) { statements }, new
declstmt -> type ID ( params · ) { statements }, LITINT
declstmt -> type ID ( params · ) { statements }, LITFLOAT
declstmt -> type ID ( params · ) { statements }, LITSTRING
declstmt -> type ID ( params · ) { statements }, LITBOOL
declstmt -> type ID ( params · ) { statements }, null
declstmt -> type ID ( params · ) { statements }, ++
declstmt -> type ID ( params · ) { statements }, --
declstmt -> type ID ( params · ) { statements }, break
declstmt -> type ID ( params · ) { statements }, return
declstmt -> type ID ( params · ) { statements }, delete
declstmt -> type ID ( params · ) { statements }, while
declstmt -> type ID ( params · ) { statements }, for
declstmt -> type ID ( params · ) { statements }, if
params -> params · , type ID, )
params -> params · , type ID, ,
declstmt -> type ID ( params · ) { statements }, }
declstmt -> type ID ( params · ) { statements }, &&
declstmt -> type ID ( params · ) { statements }, ||
declstmt -> type ID ( params · ) { statements }, +
declstmt -> type ID ( params · ) { statements }, -
declstmt -> type ID ( params · ) { statements }, *
declstmt -> type ID ( params · ) { statements }, /
declstmt -> type ID ( params · ) { statements }, !
declstmt -> type ID ( params · ) { statements }, else
***EndSet***
***EndState***
***State***
190
I_646_801_979_1247_1291_1377_1395
***Set***
declstmt -> type ID = expr · ;, $
declstmt -> type ID = expr · ;, namespace
declstmt -> type ID = expr · ;, {
declstmt -> type ID = expr · ;, ID
declstmt -> type ID = expr · ;, void
declstmt -> type ID = expr · ;, bool
declstmt -> type ID = expr · ;, int
declstmt -> type ID = expr · ;, float
declstmt -> type ID = expr · ;, string
declstmt -> type ID = expr · ;, extern
declstmt -> type ID = expr · ;, class
declstmt -> type ID = expr · ;, (
declstmt -> type ID = expr · ;, this
declstmt -> type ID = expr · ;, new
declstmt -> type ID = expr · ;, LITINT
declstmt -> type ID = expr · ;, LITFLOAT
declstmt -> type ID = expr · ;, LITSTRING
declstmt -> type ID = expr · ;, LITBOOL
declstmt -> type ID = expr · ;, null
declstmt -> type ID = expr · ;, ++
declstmt -> type ID = expr · ;, --
declstmt -> type ID = expr · ;, break
declstmt -> type ID = expr · ;, return
declstmt -> type ID = expr · ;, delete
declstmt -> type ID = expr · ;, while
declstmt -> type ID = expr · ;, for
declstmt -> type ID = expr · ;, if
declstmt -> type ID = expr · ;, }
declstmt -> type ID = expr · ;, &&
declstmt -> type ID = expr · ;, ||
declstmt -> type ID = expr · ;, +
declstmt -> type ID = expr · ;, -
declstmt -> type ID = expr · ;, *
declstmt -> type ID = expr · ;, /
declstmt -> type ID = expr · ;, !
declstmt -> type ID = expr · ;, else
***EndSet***
***EndState***
***State***
191
I_647_659_908_909_995_1217_1241_1257_1258_1292_1293_1379_1380_1384
***Set***
primitiveBracket -> primitive [ optidx ] ·, ID
primitiveBracket -> primitive [ optidx ] ·, .
primitiveBracket -> primitive [ optidx ] ·, ;
primitiveBracket -> primitive [ optidx ] ·, &&
primitiveBracket -> primitive [ optidx ] ·, ||
primitiveBracket -> primitive [ optidx ] ·, >
primitiveBracket -> primitive [ optidx ] ·, <
primitiveBracket -> primitive [ optidx ] ·, >=
primitiveBracket -> primitive [ optidx ] ·, <=
primitiveBracket -> primitive [ optidx ] ·, ==
primitiveBracket -> primitive [ optidx ] ·, !=
primitiveBracket -> primitive [ optidx ] ·, +
primitiveBracket -> primitive [ optidx ] ·, -
primitiveBracket -> primitive [ optidx ] ·, *
primitiveBracket -> primitive [ optidx ] ·, /
primitiveBracket -> primitive [ optidx ] ·, )
primitiveBracket -> primitive [ optidx ] ·, ,
primitiveBracket -> primitive [ optidx ] ·, ]
***EndSet***
***EndState***
***State***
192
I_648_713_792_1090_1097_1129_1136_1189_1196_1316_1323_1335_1356
***Set***
call -> memberaccess ( args ) ·, ;
call -> memberaccess ( args ) ·, .
call -> memberaccess ( args ) ·, &&
call -> memberaccess ( args ) ·, ||
call -> memberaccess ( args ) ·, >
call -> memberaccess ( args ) ·, <
call -> memberaccess ( args ) ·, >=
call -> memberaccess ( args ) ·, <=
call -> memberaccess ( args ) ·, ==
call -> memberaccess ( args ) ·, !=
call -> memberaccess ( args ) ·, +
call -> memberaccess ( args ) ·, -
call -> memberaccess ( args ) ·, *
call -> memberaccess ( args ) ·, /
call -> memberaccess ( args ) ·, )
call -> memberaccess ( args ) ·, ,
call -> memberaccess ( args ) ·, ]
***EndSet***
***EndState***
***State***
193
I_649_714_793_910_996_1091_1098_1130_1137_1190_1197_1218_1317_1324_1336
***Set***
indexaccess -> memberaccess [ aexpr ] ·, =
indexaccess -> memberaccess [ aexpr ] ·, +=
indexaccess -> memberaccess [ aexpr ] ·, -=
indexaccess -> memberaccess [ aexpr ] ·, *=
indexaccess -> memberaccess [ aexpr ] ·, /=
indexaccess -> memberaccess [ aexpr ] ·, %=
indexaccess -> memberaccess [ aexpr ] ·, .
indexaccess -> memberaccess [ aexpr ] ·, ;
indexaccess -> memberaccess [ aexpr ] ·, &&
indexaccess -> memberaccess [ aexpr ] ·, ||
indexaccess -> memberaccess [ aexpr ] ·, >
indexaccess -> memberaccess [ aexpr ] ·, <
indexaccess -> memberaccess [ aexpr ] ·, >=
indexaccess -> memberaccess [ aexpr ] ·, <=
indexaccess -> memberaccess [ aexpr ] ·, ==
indexaccess -> memberaccess [ aexpr ] ·, !=
indexaccess -> memberaccess [ aexpr ] ·, +
indexaccess -> memberaccess [ aexpr ] ·, -
indexaccess -> memberaccess [ aexpr ] ·, *
indexaccess -> memberaccess [ aexpr ] ·, /
indexaccess -> memberaccess [ aexpr ] ·, )
indexaccess -> memberaccess [ aexpr ] ·, ,
indexaccess -> memberaccess [ aexpr ] ·, ]
***EndSet***
***EndState***
***State***
194
I_650_1019_1138_1358_1403_1414
***Set***
namespaceblock -> namespace ID { statements } ·, $
namespaceblock -> namespace ID { statements } ·, namespace
namespaceblock -> namespace ID { statements } ·, {
namespaceblock -> namespace ID { statements } ·, ID
namespaceblock -> namespace ID { statements } ·, void
namespaceblock -> namespace ID { statements } ·, bool
namespaceblock -> namespace ID { statements } ·, int
namespaceblock -> namespace ID { statements } ·, float
namespaceblock -> namespace ID { statements } ·, string
namespaceblock -> namespace ID { statements } ·, extern
namespaceblock -> namespace ID { statements } ·, class
namespaceblock -> namespace ID { statements } ·, (
namespaceblock -> namespace ID { statements } ·, this
namespaceblock -> namespace ID { statements } ·, new
namespaceblock -> namespace ID { statements } ·, LITINT
namespaceblock -> namespace ID { statements } ·, LITFLOAT
namespaceblock -> namespace ID { statements } ·, LITSTRING
namespaceblock -> namespace ID { statements } ·, LITBOOL
namespaceblock -> namespace ID { statements } ·, null
namespaceblock -> namespace ID { statements } ·, ++
namespaceblock -> namespace ID { statements } ·, --
namespaceblock -> namespace ID { statements } ·, break
namespaceblock -> namespace ID { statements } ·, return
namespaceblock -> namespace ID { statements } ·, delete
namespaceblock -> namespace ID { statements } ·, while
namespaceblock -> namespace ID { statements } ·, for
namespaceblock -> namespace ID { statements } ·, if
namespaceblock -> namespace ID { statements } ·, }
namespaceblock -> namespace ID { statements } ·, &&
namespaceblock -> namespace ID { statements } ·, ||
namespaceblock -> namespace ID { statements } ·, +
namespaceblock -> namespace ID { statements } ·, -
namespaceblock -> namespace ID { statements } ·, *
namespaceblock -> namespace ID { statements } ·, /
namespaceblock -> namespace ID { statements } ·, !
namespaceblock -> namespace ID { statements } ·, else
***EndSet***
***EndState***
***State***
195
I_652_1020_1139_1326_1359_1404_1415
***Set***
declstmt -> extern type ID ( params · ) ;, $
declstmt -> extern type ID ( params · ) ;, namespace
declstmt -> extern type ID ( params · ) ;, {
declstmt -> extern type ID ( params · ) ;, ID
declstmt -> extern type ID ( params · ) ;, void
declstmt -> extern type ID ( params · ) ;, bool
declstmt -> extern type ID ( params · ) ;, int
declstmt -> extern type ID ( params · ) ;, float
declstmt -> extern type ID ( params · ) ;, string
declstmt -> extern type ID ( params · ) ;, extern
declstmt -> extern type ID ( params · ) ;, class
declstmt -> extern type ID ( params · ) ;, (
declstmt -> extern type ID ( params · ) ;, this
declstmt -> extern type ID ( params · ) ;, new
declstmt -> extern type ID ( params · ) ;, LITINT
declstmt -> extern type ID ( params · ) ;, LITFLOAT
declstmt -> extern type ID ( params · ) ;, LITSTRING
declstmt -> extern type ID ( params · ) ;, LITBOOL
declstmt -> extern type ID ( params · ) ;, null
declstmt -> extern type ID ( params · ) ;, ++
declstmt -> extern type ID ( params · ) ;, --
declstmt -> extern type ID ( params · ) ;, break
declstmt -> extern type ID ( params · ) ;, return
declstmt -> extern type ID ( params · ) ;, delete
declstmt -> extern type ID ( params · ) ;, while
declstmt -> extern type ID ( params · ) ;, for
declstmt -> extern type ID ( params · ) ;, if
params -> params · , type ID, )
params -> params · , type ID, ,
declstmt -> extern type ID ( params · ) ;, }
declstmt -> extern type ID ( params · ) ;, &&
declstmt -> extern type ID ( params · ) ;, ||
declstmt -> extern type ID ( params · ) ;, +
declstmt -> extern type ID ( params · ) ;, -
declstmt -> extern type ID ( params · ) ;, *
declstmt -> extern type ID ( params · ) ;, /
declstmt -> extern type ID ( params · ) ;, !
declstmt -> extern type ID ( params · ) ;, else
***EndSet***
***EndState***
***State***
196
I_655_1021_1140_1327_1360_1405_1416
***Set***
declstmt -> class ID inherit { declstatements · }, $
declstmt -> class ID inherit { declstatements · }, namespace
declstmt -> class ID inherit { declstatements · }, {
declstmt -> class ID inherit { declstatements · }, ID
declstmt -> class ID inherit { declstatements · }, void
declstmt -> class ID inherit { declstatements · }, bool
declstmt -> class ID inherit { declstatements · }, int
declstmt -> class ID inherit { declstatements · }, float
declstmt -> class ID inherit { declstatements · }, string
declstmt -> class ID inherit { declstatements · }, extern
declstmt -> class ID inherit { declstatements · }, class
declstmt -> class ID inherit { declstatements · }, (
declstmt -> class ID inherit { declstatements · }, this
declstmt -> class ID inherit { declstatements · }, new
declstmt -> class ID inherit { declstatements · }, LITINT
declstmt -> class ID inherit { declstatements · }, LITFLOAT
declstmt -> class ID inherit { declstatements · }, LITSTRING
declstmt -> class ID inherit { declstatements · }, LITBOOL
declstmt -> class ID inherit { declstatements · }, null
declstmt -> class ID inherit { declstatements · }, ++
declstmt -> class ID inherit { declstatements · }, --
declstmt -> class ID inherit { declstatements · }, break
declstmt -> class ID inherit { declstatements · }, return
declstmt -> class ID inherit { declstatements · }, delete
declstmt -> class ID inherit { declstatements · }, while
declstmt -> class ID inherit { declstatements · }, for
declstmt -> class ID inherit { declstatements · }, if
declstatements -> declstatements · declstmt, }
declstatements -> declstatements · declstmt, ID
declstatements -> declstatements · declstmt, void
declstatements -> declstatements · declstmt, bool
declstatements -> declstatements · declstmt, int
declstatements -> declstatements · declstmt, float
declstatements -> declstatements · declstmt, string
declstatements -> declstatements · declstmt, extern
declstatements -> declstatements · declstmt, class
declstmt -> · type ID = expr ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
declstmt -> · type ID = expr ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
declstmt -> · type ID = expr ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
declstmt -> · type ID = expr ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
declstmt -> · type ID = expr ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
declstmt -> · type ID = expr ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
declstmt -> · type ID = expr ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
declstmt -> · type ID = expr ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
declstmt -> · type ID = expr ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
type -> · arrtype, ID
type -> · stype, ID
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · string, ID
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · string, [
declstmt -> class ID inherit { declstatements · }, }
declstmt -> class ID inherit { declstatements · }, &&
declstmt -> class ID inherit { declstatements · }, ||
declstmt -> class ID inherit { declstatements · }, +
declstmt -> class ID inherit { declstatements · }, -
declstmt -> class ID inherit { declstatements · }, *
declstmt -> class ID inherit { declstatements · }, /
declstmt -> class ID inherit { declstatements · }, !
declstmt -> class ID inherit { declstatements · }, else
***EndSet***
***EndState***
***State***
197
I_656
***Set***
declstatements -> declstmt ·, }
declstatements -> declstmt ·, ID
declstatements -> declstmt ·, void
declstatements -> declstmt ·, bool
declstatements -> declstmt ·, int
declstatements -> declstmt ·, float
declstatements -> declstmt ·, string
declstatements -> declstmt ·, extern
declstatements -> declstmt ·, class
***EndSet***
***EndState***
***State***
198
I_663_747_1045_1094_1126_1133_1186_1193_1313_1320_1332
***Set***
cast -> ( type ) factor ·, ;
cast -> ( type ) factor ·, &&
cast -> ( type ) factor ·, ||
cast -> ( type ) factor ·, >
cast -> ( type ) factor ·, <
cast -> ( type ) factor ·, >=
cast -> ( type ) factor ·, <=
cast -> ( type ) factor ·, ==
cast -> ( type ) factor ·, !=
cast -> ( type ) factor ·, +
cast -> ( type ) factor ·, -
cast -> ( type ) factor ·, *
cast -> ( type ) factor ·, /
cast -> ( type ) factor ·, )
cast -> ( type ) factor ·, ,
cast -> ( type ) factor ·, ]
***EndSet***
***EndState***
***State***
199
I_715_1022_1141_1361_1406_1417
***Set***
stmt -> while ( expr ) stmt ·, $
stmt -> while ( expr ) stmt ·, namespace
stmt -> while ( expr ) stmt ·, {
stmt -> while ( expr ) stmt ·, ID
stmt -> while ( expr ) stmt ·, void
stmt -> while ( expr ) stmt ·, bool
stmt -> while ( expr ) stmt ·, int
stmt -> while ( expr ) stmt ·, float
stmt -> while ( expr ) stmt ·, string
stmt -> while ( expr ) stmt ·, extern
stmt -> while ( expr ) stmt ·, class
stmt -> while ( expr ) stmt ·, (
stmt -> while ( expr ) stmt ·, this
stmt -> while ( expr ) stmt ·, new
stmt -> while ( expr ) stmt ·, LITINT
stmt -> while ( expr ) stmt ·, LITFLOAT
stmt -> while ( expr ) stmt ·, LITSTRING
stmt -> while ( expr ) stmt ·, LITBOOL
stmt -> while ( expr ) stmt ·, null
stmt -> while ( expr ) stmt ·, ++
stmt -> while ( expr ) stmt ·, --
stmt -> while ( expr ) stmt ·, break
stmt -> while ( expr ) stmt ·, return
stmt -> while ( expr ) stmt ·, delete
stmt -> while ( expr ) stmt ·, while
stmt -> while ( expr ) stmt ·, for
stmt -> while ( expr ) stmt ·, if
stmt -> while ( expr ) stmt ·, }
stmt -> while ( expr ) stmt ·, &&
stmt -> while ( expr ) stmt ·, ||
stmt -> while ( expr ) stmt ·, +
stmt -> while ( expr ) stmt ·, -
stmt -> while ( expr ) stmt ·, *
stmt -> while ( expr ) stmt ·, /
stmt -> while ( expr ) stmt ·, !
stmt -> while ( expr ) stmt ·, else
***EndSet***
***EndState***
***State***
200
I_725_1023_1142_1362_1407_1418
***Set***
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, $
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, namespace
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, {
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, ID
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, void
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, bool
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, int
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, float
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, string
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, extern
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, class
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, (
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, this
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, new
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, LITINT
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, LITFLOAT
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, LITSTRING
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, LITBOOL
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, null
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, ++
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, --
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, break
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, return
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, delete
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, while
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, for
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, if
stmtexpr -> · assign, )
stmtexpr -> · call, )
stmtexpr -> · incdec, )
stmtexpr -> · newobj, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
newobj -> · new ID ( ), )
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, }
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, &&
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, ||
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, +
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, -
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, *
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, /
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, !
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, else
***EndSet***
***EndState***
***State***
201
I_740_1036_1155_1363_1408_1419
***Set***
stmt -> if ( expr ) stmt · elifclauselist elseclause, $
stmt -> if ( expr ) stmt · elifclauselist elseclause, namespace
stmt -> if ( expr ) stmt · elifclauselist elseclause, {
stmt -> if ( expr ) stmt · elifclauselist elseclause, ID
stmt -> if ( expr ) stmt · elifclauselist elseclause, void
stmt -> if ( expr ) stmt · elifclauselist elseclause, bool
stmt -> if ( expr ) stmt · elifclauselist elseclause, int
stmt -> if ( expr ) stmt · elifclauselist elseclause, float
stmt -> if ( expr ) stmt · elifclauselist elseclause, string
stmt -> if ( expr ) stmt · elifclauselist elseclause, extern
stmt -> if ( expr ) stmt · elifclauselist elseclause, class
stmt -> if ( expr ) stmt · elifclauselist elseclause, (
stmt -> if ( expr ) stmt · elifclauselist elseclause, this
stmt -> if ( expr ) stmt · elifclauselist elseclause, new
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITINT
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITFLOAT
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITSTRING
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITBOOL
stmt -> if ( expr ) stmt · elifclauselist elseclause, null
stmt -> if ( expr ) stmt · elifclauselist elseclause, ++
stmt -> if ( expr ) stmt · elifclauselist elseclause, --
stmt -> if ( expr ) stmt · elifclauselist elseclause, break
stmt -> if ( expr ) stmt · elifclauselist elseclause, return
stmt -> if ( expr ) stmt · elifclauselist elseclause, delete
stmt -> if ( expr ) stmt · elifclauselist elseclause, while
stmt -> if ( expr ) stmt · elifclauselist elseclause, for
stmt -> if ( expr ) stmt · elifclauselist elseclause, if
elifclauselist -> ·, else
elifclauselist -> ·, $
elifclauselist -> · elifclauselist elifclause, else
elifclauselist -> · elifclauselist elifclause, $
elifclauselist -> ·, namespace
elifclauselist -> · elifclauselist elifclause, namespace
elifclauselist -> ·, {
elifclauselist -> · elifclauselist elifclause, {
elifclauselist -> ·, ID
elifclauselist -> · elifclauselist elifclause, ID
elifclauselist -> ·, void
elifclauselist -> · elifclauselist elifclause, void
elifclauselist -> ·, bool
elifclauselist -> · elifclauselist elifclause, bool
elifclauselist -> ·, int
elifclauselist -> · elifclauselist elifclause, int
elifclauselist -> ·, float
elifclauselist -> · elifclauselist elifclause, float
elifclauselist -> ·, string
elifclauselist -> · elifclauselist elifclause, string
elifclauselist -> ·, extern
elifclauselist -> · elifclauselist elifclause, extern
elifclauselist -> ·, class
elifclauselist -> · elifclauselist elifclause, class
elifclauselist -> ·, (
elifclauselist -> · elifclauselist elifclause, (
elifclauselist -> ·, this
elifclauselist -> · elifclauselist elifclause, this
elifclauselist -> ·, new
elifclauselist -> · elifclauselist elifclause, new
elifclauselist -> ·, LITINT
elifclauselist -> · elifclauselist elifclause, LITINT
elifclauselist -> ·, LITFLOAT
elifclauselist -> · elifclauselist elifclause, LITFLOAT
elifclauselist -> ·, LITSTRING
elifclauselist -> · elifclauselist elifclause, LITSTRING
elifclauselist -> ·, LITBOOL
elifclauselist -> · elifclauselist elifclause, LITBOOL
elifclauselist -> ·, null
elifclauselist -> · elifclauselist elifclause, null
elifclauselist -> ·, ++
elifclauselist -> · elifclauselist elifclause, ++
elifclauselist -> ·, --
elifclauselist -> · elifclauselist elifclause, --
elifclauselist -> ·, break
elifclauselist -> · elifclauselist elifclause, break
elifclauselist -> ·, return
elifclauselist -> · elifclauselist elifclause, return
elifclauselist -> ·, delete
elifclauselist -> · elifclauselist elifclause, delete
elifclauselist -> ·, while
elifclauselist -> · elifclauselist elifclause, while
elifclauselist -> ·, for
elifclauselist -> · elifclauselist elifclause, for
elifclauselist -> ·, if
elifclauselist -> · elifclauselist elifclause, if
stmt -> if ( expr ) stmt · elifclauselist elseclause, }
elifclauselist -> ·, }
elifclauselist -> · elifclauselist elifclause, }
stmt -> if ( expr ) stmt · elifclauselist elseclause, &&
stmt -> if ( expr ) stmt · elifclauselist elseclause, ||
stmt -> if ( expr ) stmt · elifclauselist elseclause, +
stmt -> if ( expr ) stmt · elifclauselist elseclause, -
stmt -> if ( expr ) stmt · elifclauselist elseclause, *
stmt -> if ( expr ) stmt · elifclauselist elseclause, /
stmt -> if ( expr ) stmt · elifclauselist elseclause, !
elifclauselist -> ·, &&
elifclauselist -> · elifclauselist elifclause, &&
elifclauselist -> ·, ||
elifclauselist -> · elifclauselist elifclause, ||
elifclauselist -> ·, +
elifclauselist -> · elifclauselist elifclause, +
elifclauselist -> ·, -
elifclauselist -> · elifclauselist elifclause, -
elifclauselist -> ·, *
elifclauselist -> · elifclauselist elifclause, *
elifclauselist -> ·, /
elifclauselist -> · elifclauselist elifclause, /
elifclauselist -> ·, !
elifclauselist -> · elifclauselist elifclause, !
stmt -> if ( expr ) stmt · elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
202
I_883
***Set***
args -> args , expr ·, )
args -> args , expr ·, ,
***EndSet***
***EndState***
***State***
203
I_897
***Set***
params -> type ID ·, )
params -> type ID ·, ,
***EndSet***
***EndState***
***State***
204
I_898
***Set***
params -> params , · type ID, )
params -> params , · type ID, ,
type -> · arrtype, ID
type -> · stype, ID
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · string, ID
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · string, [
***EndSet***
***EndState***
***State***
205
I_899_1040_1168_1328_1365_1410_1421
***Set***
declstmt -> type ID ( params ) · { statements }, $
declstmt -> type ID ( params ) · { statements }, namespace
declstmt -> type ID ( params ) · { statements }, {
declstmt -> type ID ( params ) · { statements }, ID
declstmt -> type ID ( params ) · { statements }, void
declstmt -> type ID ( params ) · { statements }, bool
declstmt -> type ID ( params ) · { statements }, int
declstmt -> type ID ( params ) · { statements }, float
declstmt -> type ID ( params ) · { statements }, string
declstmt -> type ID ( params ) · { statements }, extern
declstmt -> type ID ( params ) · { statements }, class
declstmt -> type ID ( params ) · { statements }, (
declstmt -> type ID ( params ) · { statements }, this
declstmt -> type ID ( params ) · { statements }, new
declstmt -> type ID ( params ) · { statements }, LITINT
declstmt -> type ID ( params ) · { statements }, LITFLOAT
declstmt -> type ID ( params ) · { statements }, LITSTRING
declstmt -> type ID ( params ) · { statements }, LITBOOL
declstmt -> type ID ( params ) · { statements }, null
declstmt -> type ID ( params ) · { statements }, ++
declstmt -> type ID ( params ) · { statements }, --
declstmt -> type ID ( params ) · { statements }, break
declstmt -> type ID ( params ) · { statements }, return
declstmt -> type ID ( params ) · { statements }, delete
declstmt -> type ID ( params ) · { statements }, while
declstmt -> type ID ( params ) · { statements }, for
declstmt -> type ID ( params ) · { statements }, if
declstmt -> type ID ( params ) · { statements }, }
declstmt -> type ID ( params ) · { statements }, &&
declstmt -> type ID ( params ) · { statements }, ||
declstmt -> type ID ( params ) · { statements }, +
declstmt -> type ID ( params ) · { statements }, -
declstmt -> type ID ( params ) · { statements }, *
declstmt -> type ID ( params ) · { statements }, /
declstmt -> type ID ( params ) · { statements }, !
declstmt -> type ID ( params ) · { statements }, else
***EndSet***
***EndState***
***State***
206
I_900_1041_1169_1329_1366_1411_1422
***Set***
declstmt -> type ID = expr ; ·, $
declstmt -> type ID = expr ; ·, namespace
declstmt -> type ID = expr ; ·, {
declstmt -> type ID = expr ; ·, ID
declstmt -> type ID = expr ; ·, void
declstmt -> type ID = expr ; ·, bool
declstmt -> type ID = expr ; ·, int
declstmt -> type ID = expr ; ·, float
declstmt -> type ID = expr ; ·, string
declstmt -> type ID = expr ; ·, extern
declstmt -> type ID = expr ; ·, class
declstmt -> type ID = expr ; ·, (
declstmt -> type ID = expr ; ·, this
declstmt -> type ID = expr ; ·, new
declstmt -> type ID = expr ; ·, LITINT
declstmt -> type ID = expr ; ·, LITFLOAT
declstmt -> type ID = expr ; ·, LITSTRING
declstmt -> type ID = expr ; ·, LITBOOL
declstmt -> type ID = expr ; ·, null
declstmt -> type ID = expr ; ·, ++
declstmt -> type ID = expr ; ·, --
declstmt -> type ID = expr ; ·, break
declstmt -> type ID = expr ; ·, return
declstmt -> type ID = expr ; ·, delete
declstmt -> type ID = expr ; ·, while
declstmt -> type ID = expr ; ·, for
declstmt -> type ID = expr ; ·, if
declstmt -> type ID = expr ; ·, }
declstmt -> type ID = expr ; ·, &&
declstmt -> type ID = expr ; ·, ||
declstmt -> type ID = expr ; ·, +
declstmt -> type ID = expr ; ·, -
declstmt -> type ID = expr ; ·, *
declstmt -> type ID = expr ; ·, /
declstmt -> type ID = expr ; ·, !
declstmt -> type ID = expr ; ·, else
***EndSet***
***EndState***
***State***
207
I_901_1198_1259_1381_1397_1429_1436
***Set***
declstmt -> extern type ID ( params ) · ;, $
declstmt -> extern type ID ( params ) · ;, namespace
declstmt -> extern type ID ( params ) · ;, {
declstmt -> extern type ID ( params ) · ;, ID
declstmt -> extern type ID ( params ) · ;, void
declstmt -> extern type ID ( params ) · ;, bool
declstmt -> extern type ID ( params ) · ;, int
declstmt -> extern type ID ( params ) · ;, float
declstmt -> extern type ID ( params ) · ;, string
declstmt -> extern type ID ( params ) · ;, extern
declstmt -> extern type ID ( params ) · ;, class
declstmt -> extern type ID ( params ) · ;, (
declstmt -> extern type ID ( params ) · ;, this
declstmt -> extern type ID ( params ) · ;, new
declstmt -> extern type ID ( params ) · ;, LITINT
declstmt -> extern type ID ( params ) · ;, LITFLOAT
declstmt -> extern type ID ( params ) · ;, LITSTRING
declstmt -> extern type ID ( params ) · ;, LITBOOL
declstmt -> extern type ID ( params ) · ;, null
declstmt -> extern type ID ( params ) · ;, ++
declstmt -> extern type ID ( params ) · ;, --
declstmt -> extern type ID ( params ) · ;, break
declstmt -> extern type ID ( params ) · ;, return
declstmt -> extern type ID ( params ) · ;, delete
declstmt -> extern type ID ( params ) · ;, while
declstmt -> extern type ID ( params ) · ;, for
declstmt -> extern type ID ( params ) · ;, if
declstmt -> extern type ID ( params ) · ;, }
declstmt -> extern type ID ( params ) · ;, &&
declstmt -> extern type ID ( params ) · ;, ||
declstmt -> extern type ID ( params ) · ;, +
declstmt -> extern type ID ( params ) · ;, -
declstmt -> extern type ID ( params ) · ;, *
declstmt -> extern type ID ( params ) · ;, /
declstmt -> extern type ID ( params ) · ;, !
declstmt -> extern type ID ( params ) · ;, else
***EndSet***
***EndState***
***State***
208
I_904_1199_1260_1382_1398_1430_1437
***Set***
declstmt -> class ID inherit { declstatements } ·, $
declstmt -> class ID inherit { declstatements } ·, namespace
declstmt -> class ID inherit { declstatements } ·, {
declstmt -> class ID inherit { declstatements } ·, ID
declstmt -> class ID inherit { declstatements } ·, void
declstmt -> class ID inherit { declstatements } ·, bool
declstmt -> class ID inherit { declstatements } ·, int
declstmt -> class ID inherit { declstatements } ·, float
declstmt -> class ID inherit { declstatements } ·, string
declstmt -> class ID inherit { declstatements } ·, extern
declstmt -> class ID inherit { declstatements } ·, class
declstmt -> class ID inherit { declstatements } ·, (
declstmt -> class ID inherit { declstatements } ·, this
declstmt -> class ID inherit { declstatements } ·, new
declstmt -> class ID inherit { declstatements } ·, LITINT
declstmt -> class ID inherit { declstatements } ·, LITFLOAT
declstmt -> class ID inherit { declstatements } ·, LITSTRING
declstmt -> class ID inherit { declstatements } ·, LITBOOL
declstmt -> class ID inherit { declstatements } ·, null
declstmt -> class ID inherit { declstatements } ·, ++
declstmt -> class ID inherit { declstatements } ·, --
declstmt -> class ID inherit { declstatements } ·, break
declstmt -> class ID inherit { declstatements } ·, return
declstmt -> class ID inherit { declstatements } ·, delete
declstmt -> class ID inherit { declstatements } ·, while
declstmt -> class ID inherit { declstatements } ·, for
declstmt -> class ID inherit { declstatements } ·, if
declstmt -> class ID inherit { declstatements } ·, }
declstmt -> class ID inherit { declstatements } ·, &&
declstmt -> class ID inherit { declstatements } ·, ||
declstmt -> class ID inherit { declstatements } ·, +
declstmt -> class ID inherit { declstatements } ·, -
declstmt -> class ID inherit { declstatements } ·, *
declstmt -> class ID inherit { declstatements } ·, /
declstmt -> class ID inherit { declstatements } ·, !
declstmt -> class ID inherit { declstatements } ·, else
***EndSet***
***EndState***
***State***
209
I_905
***Set***
declstatements -> declstatements declstmt ·, }
declstatements -> declstatements declstmt ·, ID
declstatements -> declstatements declstmt ·, void
declstatements -> declstatements declstmt ·, bool
declstatements -> declstatements declstmt ·, int
declstatements -> declstatements declstmt ·, float
declstatements -> declstatements declstmt ·, string
declstatements -> declstatements declstmt ·, extern
declstatements -> declstatements declstmt ·, class
***EndSet***
***EndState***
***State***
210
I_971_1200_1261_1399_1431_1438
***Set***
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, $
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, namespace
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, {
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, ID
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, void
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, bool
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, int
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, float
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, string
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, extern
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, class
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, (
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, this
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, new
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, LITINT
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, LITFLOAT
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, LITSTRING
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, LITBOOL
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, null
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, ++
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, --
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, break
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, return
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, delete
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, while
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, for
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, if
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, }
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, &&
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, ||
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, +
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, -
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, *
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, /
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, !
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, else
***EndSet***
***EndState***
***State***
211
I_991_1212_1273_1400_1432_1439
***Set***
stmt -> if ( expr ) stmt elifclauselist · elseclause, $
stmt -> if ( expr ) stmt elifclauselist · elseclause, namespace
stmt -> if ( expr ) stmt elifclauselist · elseclause, {
stmt -> if ( expr ) stmt elifclauselist · elseclause, ID
stmt -> if ( expr ) stmt elifclauselist · elseclause, void
stmt -> if ( expr ) stmt elifclauselist · elseclause, bool
stmt -> if ( expr ) stmt elifclauselist · elseclause, int
stmt -> if ( expr ) stmt elifclauselist · elseclause, float
stmt -> if ( expr ) stmt elifclauselist · elseclause, string
stmt -> if ( expr ) stmt elifclauselist · elseclause, extern
stmt -> if ( expr ) stmt elifclauselist · elseclause, class
stmt -> if ( expr ) stmt elifclauselist · elseclause, (
stmt -> if ( expr ) stmt elifclauselist · elseclause, this
stmt -> if ( expr ) stmt elifclauselist · elseclause, new
stmt -> if ( expr ) stmt elifclauselist · elseclause, LITINT
stmt -> if ( expr ) stmt elifclauselist · elseclause, LITFLOAT
stmt -> if ( expr ) stmt elifclauselist · elseclause, LITSTRING
stmt -> if ( expr ) stmt elifclauselist · elseclause, LITBOOL
stmt -> if ( expr ) stmt elifclauselist · elseclause, null
stmt -> if ( expr ) stmt elifclauselist · elseclause, ++
stmt -> if ( expr ) stmt elifclauselist · elseclause, --
stmt -> if ( expr ) stmt elifclauselist · elseclause, break
stmt -> if ( expr ) stmt elifclauselist · elseclause, return
stmt -> if ( expr ) stmt elifclauselist · elseclause, delete
stmt -> if ( expr ) stmt elifclauselist · elseclause, while
stmt -> if ( expr ) stmt elifclauselist · elseclause, for
stmt -> if ( expr ) stmt elifclauselist · elseclause, if
elifclauselist -> elifclauselist · elifclause, else
elifclauselist -> elifclauselist · elifclause, $
elifclauselist -> elifclauselist · elifclause, namespace
elifclauselist -> elifclauselist · elifclause, {
elifclauselist -> elifclauselist · elifclause, ID
elifclauselist -> elifclauselist · elifclause, void
elifclauselist -> elifclauselist · elifclause, bool
elifclauselist -> elifclauselist · elifclause, int
elifclauselist -> elifclauselist · elifclause, float
elifclauselist -> elifclauselist · elifclause, string
elifclauselist -> elifclauselist · elifclause, extern
elifclauselist -> elifclauselist · elifclause, class
elifclauselist -> elifclauselist · elifclause, (
elifclauselist -> elifclauselist · elifclause, this
elifclauselist -> elifclauselist · elifclause, new
elifclauselist -> elifclauselist · elifclause, LITINT
elifclauselist -> elifclauselist · elifclause, LITFLOAT
elifclauselist -> elifclauselist · elifclause, LITSTRING
elifclauselist -> elifclauselist · elifclause, LITBOOL
elifclauselist -> elifclauselist · elifclause, null
elifclauselist -> elifclauselist · elifclause, ++
elifclauselist -> elifclauselist · elifclause, --
elifclauselist -> elifclauselist · elifclause, break
elifclauselist -> elifclauselist · elifclause, return
elifclauselist -> elifclauselist · elifclause, delete
elifclauselist -> elifclauselist · elifclause, while
elifclauselist -> elifclauselist · elifclause, for
elifclauselist -> elifclauselist · elifclause, if
elseclause -> ·, $
elseclause -> · else stmt, $
elseclause -> ·, namespace
elseclause -> · else stmt, namespace
elseclause -> ·, {
elseclause -> · else stmt, {
elseclause -> ·, ID
elseclause -> · else stmt, ID
elseclause -> ·, void
elseclause -> · else stmt, void
elseclause -> ·, bool
elseclause -> · else stmt, bool
elseclause -> ·, int
elseclause -> · else stmt, int
elseclause -> ·, float
elseclause -> · else stmt, float
elseclause -> ·, string
elseclause -> · else stmt, string
elseclause -> ·, extern
elseclause -> · else stmt, extern
elseclause -> ·, class
elseclause -> · else stmt, class
elseclause -> ·, (
elseclause -> · else stmt, (
elseclause -> ·, this
elseclause -> · else stmt, this
elseclause -> ·, new
elseclause -> · else stmt, new
elseclause -> ·, LITINT
elseclause -> · else stmt, LITINT
elseclause -> ·, LITFLOAT
elseclause -> · else stmt, LITFLOAT
elseclause -> ·, LITSTRING
elseclause -> · else stmt, LITSTRING
elseclause -> ·, LITBOOL
elseclause -> · else stmt, LITBOOL
elseclause -> ·, null
elseclause -> · else stmt, null
elseclause -> ·, ++
elseclause -> · else stmt, ++
elseclause -> ·, --
elseclause -> · else stmt, --
elseclause -> ·, break
elseclause -> · else stmt, break
elseclause -> ·, return
elseclause -> · else stmt, return
elseclause -> ·, delete
elseclause -> · else stmt, delete
elseclause -> ·, while
elseclause -> · else stmt, while
elseclause -> ·, for
elseclause -> · else stmt, for
elseclause -> ·, if
elseclause -> · else stmt, if
elifclause -> · else if ( expr ) stmt, else
elifclause -> · else if ( expr ) stmt, $
elifclause -> · else if ( expr ) stmt, namespace
elifclause -> · else if ( expr ) stmt, {
elifclause -> · else if ( expr ) stmt, ID
elifclause -> · else if ( expr ) stmt, void
elifclause -> · else if ( expr ) stmt, bool
elifclause -> · else if ( expr ) stmt, int
elifclause -> · else if ( expr ) stmt, float
elifclause -> · else if ( expr ) stmt, string
elifclause -> · else if ( expr ) stmt, extern
elifclause -> · else if ( expr ) stmt, class
elifclause -> · else if ( expr ) stmt, (
elifclause -> · else if ( expr ) stmt, this
elifclause -> · else if ( expr ) stmt, new
elifclause -> · else if ( expr ) stmt, LITINT
elifclause -> · else if ( expr ) stmt, LITFLOAT
elifclause -> · else if ( expr ) stmt, LITSTRING
elifclause -> · else if ( expr ) stmt, LITBOOL
elifclause -> · else if ( expr ) stmt, null
elifclause -> · else if ( expr ) stmt, ++
elifclause -> · else if ( expr ) stmt, --
elifclause -> · else if ( expr ) stmt, break
elifclause -> · else if ( expr ) stmt, return
elifclause -> · else if ( expr ) stmt, delete
elifclause -> · else if ( expr ) stmt, while
elifclause -> · else if ( expr ) stmt, for
elifclause -> · else if ( expr ) stmt, if
stmt -> if ( expr ) stmt elifclauselist · elseclause, }
elifclauselist -> elifclauselist · elifclause, }
elseclause -> ·, }
elseclause -> · else stmt, }
elifclause -> · else if ( expr ) stmt, }
stmt -> if ( expr ) stmt elifclauselist · elseclause, &&
stmt -> if ( expr ) stmt elifclauselist · elseclause, ||
stmt -> if ( expr ) stmt elifclauselist · elseclause, +
stmt -> if ( expr ) stmt elifclauselist · elseclause, -
stmt -> if ( expr ) stmt elifclauselist · elseclause, *
stmt -> if ( expr ) stmt elifclauselist · elseclause, /
stmt -> if ( expr ) stmt elifclauselist · elseclause, !
elifclauselist -> elifclauselist · elifclause, &&
elifclauselist -> elifclauselist · elifclause, ||
elifclauselist -> elifclauselist · elifclause, +
elifclauselist -> elifclauselist · elifclause, -
elifclauselist -> elifclauselist · elifclause, *
elifclauselist -> elifclauselist · elifclause, /
elifclauselist -> elifclauselist · elifclause, !
elseclause -> ·, &&
elseclause -> · else stmt, &&
elseclause -> ·, ||
elseclause -> · else stmt, ||
elseclause -> ·, +
elseclause -> · else stmt, +
elseclause -> ·, -
elseclause -> · else stmt, -
elseclause -> ·, *
elseclause -> · else stmt, *
elseclause -> ·, /
elseclause -> · else stmt, /
elseclause -> ·, !
elseclause -> · else stmt, !
elifclause -> · else if ( expr ) stmt, &&
elifclause -> · else if ( expr ) stmt, ||
elifclause -> · else if ( expr ) stmt, +
elifclause -> · else if ( expr ) stmt, -
elifclause -> · else if ( expr ) stmt, *
elifclause -> · else if ( expr ) stmt, /
elifclause -> · else if ( expr ) stmt, !
stmt -> if ( expr ) stmt elifclauselist · elseclause, else
elseclause -> ·, else
elseclause -> · else stmt, else
***EndSet***
***EndState***
***State***
212
I_1099_1242
***Set***
params -> params , type · ID, )
params -> params , type · ID, ,
params -> params , type ID ·, )
params -> params , type ID ·, ,
***EndSet***
***EndState***
***State***
213
I_1100_1215_1281_1383_1402_1434_1441
***Set***
declstmt -> type ID ( params ) { · statements }, $
declstmt -> type ID ( params ) { · statements }, namespace
declstmt -> type ID ( params ) { · statements }, {
declstmt -> type ID ( params ) { · statements }, ID
declstmt -> type ID ( params ) { · statements }, void
declstmt -> type ID ( params ) { · statements }, bool
declstmt -> type ID ( params ) { · statements }, int
declstmt -> type ID ( params ) { · statements }, float
declstmt -> type ID ( params ) { · statements }, string
declstmt -> type ID ( params ) { · statements }, extern
declstmt -> type ID ( params ) { · statements }, class
declstmt -> type ID ( params ) { · statements }, (
declstmt -> type ID ( params ) { · statements }, this
declstmt -> type ID ( params ) { · statements }, new
declstmt -> type ID ( params ) { · statements }, LITINT
declstmt -> type ID ( params ) { · statements }, LITFLOAT
declstmt -> type ID ( params ) { · statements }, LITSTRING
declstmt -> type ID ( params ) { · statements }, LITBOOL
declstmt -> type ID ( params ) { · statements }, null
declstmt -> type ID ( params ) { · statements }, ++
declstmt -> type ID ( params ) { · statements }, --
declstmt -> type ID ( params ) { · statements }, break
declstmt -> type ID ( params ) { · statements }, return
declstmt -> type ID ( params ) { · statements }, delete
declstmt -> type ID ( params ) { · statements }, while
declstmt -> type ID ( params ) { · statements }, for
declstmt -> type ID ( params ) { · statements }, if
statements -> · statements stmt, }
statements -> · stmt, }
statements -> ·, }
statements -> · statements stmt, namespace
statements -> · statements stmt, {
statements -> · statements stmt, ID
statements -> · statements stmt, void
statements -> · statements stmt, bool
statements -> · statements stmt, int
statements -> · statements stmt, float
statements -> · statements stmt, string
statements -> · statements stmt, extern
statements -> · statements stmt, class
statements -> · statements stmt, (
statements -> · statements stmt, this
statements -> · statements stmt, new
statements -> · statements stmt, LITINT
statements -> · statements stmt, LITFLOAT
statements -> · statements stmt, LITSTRING
statements -> · statements stmt, LITBOOL
statements -> · statements stmt, null
statements -> · statements stmt, ++
statements -> · statements stmt, --
statements -> · statements stmt, break
statements -> · statements stmt, return
statements -> · statements stmt, delete
statements -> · statements stmt, while
statements -> · statements stmt, for
statements -> · statements stmt, if
statements -> · stmt, namespace
statements -> · stmt, {
statements -> · stmt, ID
statements -> · stmt, void
statements -> · stmt, bool
statements -> · stmt, int
statements -> · stmt, float
statements -> · stmt, string
statements -> · stmt, extern
statements -> · stmt, class
statements -> · stmt, (
statements -> · stmt, this
statements -> · stmt, new
statements -> · stmt, LITINT
statements -> · stmt, LITFLOAT
statements -> · stmt, LITSTRING
statements -> · stmt, LITBOOL
statements -> · stmt, null
statements -> · stmt, ++
statements -> · stmt, --
statements -> · stmt, break
statements -> · stmt, return
statements -> · stmt, delete
statements -> · stmt, while
statements -> · stmt, for
statements -> · stmt, if
statements -> ·, namespace
statements -> ·, {
statements -> ·, ID
statements -> ·, void
statements -> ·, bool
statements -> ·, int
statements -> ·, float
statements -> ·, string
statements -> ·, extern
statements -> ·, class
statements -> ·, (
statements -> ·, this
statements -> ·, new
statements -> ·, LITINT
statements -> ·, LITFLOAT
statements -> ·, LITSTRING
statements -> ·, LITBOOL
statements -> ·, null
statements -> ·, ++
statements -> ·, --
statements -> ·, break
statements -> ·, return
statements -> ·, delete
statements -> ·, while
statements -> ·, for
statements -> ·, if
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · string, ID
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
declstmt -> type ID ( params ) { · statements }, }
declstmt -> type ID ( params ) { · statements }, &&
declstmt -> type ID ( params ) { · statements }, ||
declstmt -> type ID ( params ) { · statements }, +
declstmt -> type ID ( params ) { · statements }, -
declstmt -> type ID ( params ) { · statements }, *
declstmt -> type ID ( params ) { · statements }, /
declstmt -> type ID ( params ) { · statements }, !
declstmt -> type ID ( params ) { · statements }, else
***EndSet***
***EndState***
***State***
214
I_1101_1294_1337_1412_1423_1447_1453
***Set***
declstmt -> extern type ID ( params ) ; ·, $
declstmt -> extern type ID ( params ) ; ·, namespace
declstmt -> extern type ID ( params ) ; ·, {
declstmt -> extern type ID ( params ) ; ·, ID
declstmt -> extern type ID ( params ) ; ·, void
declstmt -> extern type ID ( params ) ; ·, bool
declstmt -> extern type ID ( params ) ; ·, int
declstmt -> extern type ID ( params ) ; ·, float
declstmt -> extern type ID ( params ) ; ·, string
declstmt -> extern type ID ( params ) ; ·, extern
declstmt -> extern type ID ( params ) ; ·, class
declstmt -> extern type ID ( params ) ; ·, (
declstmt -> extern type ID ( params ) ; ·, this
declstmt -> extern type ID ( params ) ; ·, new
declstmt -> extern type ID ( params ) ; ·, LITINT
declstmt -> extern type ID ( params ) ; ·, LITFLOAT
declstmt -> extern type ID ( params ) ; ·, LITSTRING
declstmt -> extern type ID ( params ) ; ·, LITBOOL
declstmt -> extern type ID ( params ) ; ·, null
declstmt -> extern type ID ( params ) ; ·, ++
declstmt -> extern type ID ( params ) ; ·, --
declstmt -> extern type ID ( params ) ; ·, break
declstmt -> extern type ID ( params ) ; ·, return
declstmt -> extern type ID ( params ) ; ·, delete
declstmt -> extern type ID ( params ) ; ·, while
declstmt -> extern type ID ( params ) ; ·, for
declstmt -> extern type ID ( params ) ; ·, if
declstmt -> extern type ID ( params ) ; ·, }
declstmt -> extern type ID ( params ) ; ·, &&
declstmt -> extern type ID ( params ) ; ·, ||
declstmt -> extern type ID ( params ) ; ·, +
declstmt -> extern type ID ( params ) ; ·, -
declstmt -> extern type ID ( params ) ; ·, *
declstmt -> extern type ID ( params ) ; ·, /
declstmt -> extern type ID ( params ) ; ·, !
declstmt -> extern type ID ( params ) ; ·, else
***EndSet***
***EndState***
***State***
215
I_1166_1295_1338_1424_1448_1454
***Set***
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, $
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, namespace
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, {
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, ID
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, void
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, bool
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, int
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, float
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, string
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, extern
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, class
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, (
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, this
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, new
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, LITINT
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, LITFLOAT
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, LITSTRING
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, LITBOOL
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, null
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, ++
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, --
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, break
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, return
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, delete
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, while
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, for
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, if
stmt -> · namespaceblock, $
stmt -> · statementblock, $
stmt -> · declstmt, $
stmt -> · stmtexpr ;, $
stmt -> · break ;, $
stmt -> · return expr ;, $
stmt -> · return ;, $
stmt -> · delete expr ;, $
stmt -> · while ( expr ) stmt, $
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, $
stmt -> · if ( expr ) stmt elifclauselist elseclause, $
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, $
statementblock -> · { statements }, $
declstmt -> · type ID = expr ;, $
declstmt -> · type ID ( params ) { statements }, $
declstmt -> · extern type ID ( params ) ;, $
declstmt -> · class ID inherit { declstatements }, $
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · string, ID
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, }
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, &&
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, ||
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, +
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, -
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, *
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, /
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, !
stmt -> · namespaceblock, &&
stmt -> · statementblock, &&
stmt -> · declstmt, &&
stmt -> · stmtexpr ;, &&
stmt -> · break ;, &&
stmt -> · return expr ;, &&
stmt -> · return ;, &&
stmt -> · delete expr ;, &&
stmt -> · while ( expr ) stmt, &&
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, &&
stmt -> · if ( expr ) stmt elifclauselist elseclause, &&
stmt -> · namespaceblock, ||
stmt -> · statementblock, ||
stmt -> · declstmt, ||
stmt -> · stmtexpr ;, ||
stmt -> · break ;, ||
stmt -> · return expr ;, ||
stmt -> · return ;, ||
stmt -> · delete expr ;, ||
stmt -> · while ( expr ) stmt, ||
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ||
stmt -> · if ( expr ) stmt elifclauselist elseclause, ||
stmt -> · namespaceblock, +
stmt -> · statementblock, +
stmt -> · declstmt, +
stmt -> · stmtexpr ;, +
stmt -> · break ;, +
stmt -> · return expr ;, +
stmt -> · return ;, +
stmt -> · delete expr ;, +
stmt -> · while ( expr ) stmt, +
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, +
stmt -> · if ( expr ) stmt elifclauselist elseclause, +
stmt -> · namespaceblock, -
stmt -> · statementblock, -
stmt -> · declstmt, -
stmt -> · stmtexpr ;, -
stmt -> · break ;, -
stmt -> · return expr ;, -
stmt -> · return ;, -
stmt -> · delete expr ;, -
stmt -> · while ( expr ) stmt, -
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, -
stmt -> · if ( expr ) stmt elifclauselist elseclause, -
stmt -> · namespaceblock, *
stmt -> · statementblock, *
stmt -> · declstmt, *
stmt -> · stmtexpr ;, *
stmt -> · break ;, *
stmt -> · return expr ;, *
stmt -> · return ;, *
stmt -> · delete expr ;, *
stmt -> · while ( expr ) stmt, *
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, *
stmt -> · if ( expr ) stmt elifclauselist elseclause, *
stmt -> · namespaceblock, /
stmt -> · statementblock, /
stmt -> · declstmt, /
stmt -> · stmtexpr ;, /
stmt -> · break ;, /
stmt -> · return expr ;, /
stmt -> · return ;, /
stmt -> · delete expr ;, /
stmt -> · while ( expr ) stmt, /
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, /
stmt -> · if ( expr ) stmt elifclauselist elseclause, /
stmt -> · namespaceblock, !
stmt -> · statementblock, !
stmt -> · declstmt, !
stmt -> · stmtexpr ;, !
stmt -> · break ;, !
stmt -> · return expr ;, !
stmt -> · return ;, !
stmt -> · delete expr ;, !
stmt -> · while ( expr ) stmt, !
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, !
stmt -> · if ( expr ) stmt elifclauselist elseclause, !
namespaceblock -> · namespace ID { statements }, &&
statementblock -> · { statements }, &&
declstmt -> · type ID = expr ;, &&
declstmt -> · type ID ( params ) { statements }, &&
declstmt -> · extern type ID ( params ) ;, &&
declstmt -> · class ID inherit { declstatements }, &&
namespaceblock -> · namespace ID { statements }, ||
statementblock -> · { statements }, ||
declstmt -> · type ID = expr ;, ||
declstmt -> · type ID ( params ) { statements }, ||
declstmt -> · extern type ID ( params ) ;, ||
declstmt -> · class ID inherit { declstatements }, ||
namespaceblock -> · namespace ID { statements }, +
statementblock -> · { statements }, +
declstmt -> · type ID = expr ;, +
declstmt -> · type ID ( params ) { statements }, +
declstmt -> · extern type ID ( params ) ;, +
declstmt -> · class ID inherit { declstatements }, +
namespaceblock -> · namespace ID { statements }, -
statementblock -> · { statements }, -
declstmt -> · type ID = expr ;, -
declstmt -> · type ID ( params ) { statements }, -
declstmt -> · extern type ID ( params ) ;, -
declstmt -> · class ID inherit { declstatements }, -
namespaceblock -> · namespace ID { statements }, *
statementblock -> · { statements }, *
declstmt -> · type ID = expr ;, *
declstmt -> · type ID ( params ) { statements }, *
declstmt -> · extern type ID ( params ) ;, *
declstmt -> · class ID inherit { declstatements }, *
namespaceblock -> · namespace ID { statements }, /
statementblock -> · { statements }, /
declstmt -> · type ID = expr ;, /
declstmt -> · type ID ( params ) { statements }, /
declstmt -> · extern type ID ( params ) ;, /
declstmt -> · class ID inherit { declstatements }, /
namespaceblock -> · namespace ID { statements }, !
statementblock -> · { statements }, !
declstmt -> · type ID = expr ;, !
declstmt -> · type ID ( params ) { statements }, !
declstmt -> · extern type ID ( params ) ;, !
declstmt -> · class ID inherit { declstatements }, !
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, else
stmt -> · namespaceblock, else
stmt -> · statementblock, else
stmt -> · declstmt, else
stmt -> · stmtexpr ;, else
stmt -> · break ;, else
stmt -> · return expr ;, else
stmt -> · return ;, else
stmt -> · delete expr ;, else
stmt -> · while ( expr ) stmt, else
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, else
stmt -> · if ( expr ) stmt elifclauselist elseclause, else
namespaceblock -> · namespace ID { statements }, else
statementblock -> · { statements }, else
declstmt -> · type ID = expr ;, else
declstmt -> · type ID ( params ) { statements }, else
declstmt -> · extern type ID ( params ) ;, else
declstmt -> · class ID inherit { declstatements }, else
***EndSet***
***EndState***
***State***
216
I_1179_1305_1348_1425_1449_1455
***Set***
elseclause -> else · stmt, $
elseclause -> else · stmt, namespace
elseclause -> else · stmt, {
elseclause -> else · stmt, ID
elseclause -> else · stmt, void
elseclause -> else · stmt, bool
elseclause -> else · stmt, int
elseclause -> else · stmt, float
elseclause -> else · stmt, string
elseclause -> else · stmt, extern
elseclause -> else · stmt, class
elseclause -> else · stmt, (
elseclause -> else · stmt, this
elseclause -> else · stmt, new
elseclause -> else · stmt, LITINT
elseclause -> else · stmt, LITFLOAT
elseclause -> else · stmt, LITSTRING
elseclause -> else · stmt, LITBOOL
elseclause -> else · stmt, null
elseclause -> else · stmt, ++
elseclause -> else · stmt, --
elseclause -> else · stmt, break
elseclause -> else · stmt, return
elseclause -> else · stmt, delete
elseclause -> else · stmt, while
elseclause -> else · stmt, for
elseclause -> else · stmt, if
elifclause -> else · if ( expr ) stmt, else
elifclause -> else · if ( expr ) stmt, $
elifclause -> else · if ( expr ) stmt, namespace
elifclause -> else · if ( expr ) stmt, {
elifclause -> else · if ( expr ) stmt, ID
elifclause -> else · if ( expr ) stmt, void
elifclause -> else · if ( expr ) stmt, bool
elifclause -> else · if ( expr ) stmt, int
elifclause -> else · if ( expr ) stmt, float
elifclause -> else · if ( expr ) stmt, string
elifclause -> else · if ( expr ) stmt, extern
elifclause -> else · if ( expr ) stmt, class
elifclause -> else · if ( expr ) stmt, (
elifclause -> else · if ( expr ) stmt, this
elifclause -> else · if ( expr ) stmt, new
elifclause -> else · if ( expr ) stmt, LITINT
elifclause -> else · if ( expr ) stmt, LITFLOAT
elifclause -> else · if ( expr ) stmt, LITSTRING
elifclause -> else · if ( expr ) stmt, LITBOOL
elifclause -> else · if ( expr ) stmt, null
elifclause -> else · if ( expr ) stmt, ++
elifclause -> else · if ( expr ) stmt, --
elifclause -> else · if ( expr ) stmt, break
elifclause -> else · if ( expr ) stmt, return
elifclause -> else · if ( expr ) stmt, delete
elifclause -> else · if ( expr ) stmt, while
elifclause -> else · if ( expr ) stmt, for
elifclause -> else · if ( expr ) stmt, if
stmt -> · namespaceblock, $
stmt -> · statementblock, $
stmt -> · declstmt, $
stmt -> · stmtexpr ;, $
stmt -> · break ;, $
stmt -> · return expr ;, $
stmt -> · return ;, $
stmt -> · delete expr ;, $
stmt -> · while ( expr ) stmt, $
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, $
stmt -> · if ( expr ) stmt elifclauselist elseclause, $
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, $
statementblock -> · { statements }, $
declstmt -> · type ID = expr ;, $
declstmt -> · type ID ( params ) { statements }, $
declstmt -> · extern type ID ( params ) ;, $
declstmt -> · class ID inherit { declstatements }, $
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · string, ID
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
elseclause -> else · stmt, }
elifclause -> else · if ( expr ) stmt, }
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
elseclause -> else · stmt, &&
elseclause -> else · stmt, ||
elseclause -> else · stmt, +
elseclause -> else · stmt, -
elseclause -> else · stmt, *
elseclause -> else · stmt, /
elseclause -> else · stmt, !
elifclause -> else · if ( expr ) stmt, &&
elifclause -> else · if ( expr ) stmt, ||
elifclause -> else · if ( expr ) stmt, +
elifclause -> else · if ( expr ) stmt, -
elifclause -> else · if ( expr ) stmt, *
elifclause -> else · if ( expr ) stmt, /
elifclause -> else · if ( expr ) stmt, !
stmt -> · namespaceblock, &&
stmt -> · statementblock, &&
stmt -> · declstmt, &&
stmt -> · stmtexpr ;, &&
stmt -> · break ;, &&
stmt -> · return expr ;, &&
stmt -> · return ;, &&
stmt -> · delete expr ;, &&
stmt -> · while ( expr ) stmt, &&
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, &&
stmt -> · if ( expr ) stmt elifclauselist elseclause, &&
stmt -> · namespaceblock, ||
stmt -> · statementblock, ||
stmt -> · declstmt, ||
stmt -> · stmtexpr ;, ||
stmt -> · break ;, ||
stmt -> · return expr ;, ||
stmt -> · return ;, ||
stmt -> · delete expr ;, ||
stmt -> · while ( expr ) stmt, ||
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ||
stmt -> · if ( expr ) stmt elifclauselist elseclause, ||
stmt -> · namespaceblock, +
stmt -> · statementblock, +
stmt -> · declstmt, +
stmt -> · stmtexpr ;, +
stmt -> · break ;, +
stmt -> · return expr ;, +
stmt -> · return ;, +
stmt -> · delete expr ;, +
stmt -> · while ( expr ) stmt, +
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, +
stmt -> · if ( expr ) stmt elifclauselist elseclause, +
stmt -> · namespaceblock, -
stmt -> · statementblock, -
stmt -> · declstmt, -
stmt -> · stmtexpr ;, -
stmt -> · break ;, -
stmt -> · return expr ;, -
stmt -> · return ;, -
stmt -> · delete expr ;, -
stmt -> · while ( expr ) stmt, -
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, -
stmt -> · if ( expr ) stmt elifclauselist elseclause, -
stmt -> · namespaceblock, *
stmt -> · statementblock, *
stmt -> · declstmt, *
stmt -> · stmtexpr ;, *
stmt -> · break ;, *
stmt -> · return expr ;, *
stmt -> · return ;, *
stmt -> · delete expr ;, *
stmt -> · while ( expr ) stmt, *
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, *
stmt -> · if ( expr ) stmt elifclauselist elseclause, *
stmt -> · namespaceblock, /
stmt -> · statementblock, /
stmt -> · declstmt, /
stmt -> · stmtexpr ;, /
stmt -> · break ;, /
stmt -> · return expr ;, /
stmt -> · return ;, /
stmt -> · delete expr ;, /
stmt -> · while ( expr ) stmt, /
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, /
stmt -> · if ( expr ) stmt elifclauselist elseclause, /
stmt -> · namespaceblock, !
stmt -> · statementblock, !
stmt -> · declstmt, !
stmt -> · stmtexpr ;, !
stmt -> · break ;, !
stmt -> · return expr ;, !
stmt -> · return ;, !
stmt -> · delete expr ;, !
stmt -> · while ( expr ) stmt, !
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, !
stmt -> · if ( expr ) stmt elifclauselist elseclause, !
namespaceblock -> · namespace ID { statements }, &&
statementblock -> · { statements }, &&
declstmt -> · type ID = expr ;, &&
declstmt -> · type ID ( params ) { statements }, &&
declstmt -> · extern type ID ( params ) ;, &&
declstmt -> · class ID inherit { declstatements }, &&
namespaceblock -> · namespace ID { statements }, ||
statementblock -> · { statements }, ||
declstmt -> · type ID = expr ;, ||
declstmt -> · type ID ( params ) { statements }, ||
declstmt -> · extern type ID ( params ) ;, ||
declstmt -> · class ID inherit { declstatements }, ||
namespaceblock -> · namespace ID { statements }, +
statementblock -> · { statements }, +
declstmt -> · type ID = expr ;, +
declstmt -> · type ID ( params ) { statements }, +
declstmt -> · extern type ID ( params ) ;, +
declstmt -> · class ID inherit { declstatements }, +
namespaceblock -> · namespace ID { statements }, -
statementblock -> · { statements }, -
declstmt -> · type ID = expr ;, -
declstmt -> · type ID ( params ) { statements }, -
declstmt -> · extern type ID ( params ) ;, -
declstmt -> · class ID inherit { declstatements }, -
namespaceblock -> · namespace ID { statements }, *
statementblock -> · { statements }, *
declstmt -> · type ID = expr ;, *
declstmt -> · type ID ( params ) { statements }, *
declstmt -> · extern type ID ( params ) ;, *
declstmt -> · class ID inherit { declstatements }, *
namespaceblock -> · namespace ID { statements }, /
statementblock -> · { statements }, /
declstmt -> · type ID = expr ;, /
declstmt -> · type ID ( params ) { statements }, /
declstmt -> · extern type ID ( params ) ;, /
declstmt -> · class ID inherit { declstatements }, /
namespaceblock -> · namespace ID { statements }, !
statementblock -> · { statements }, !
declstmt -> · type ID = expr ;, !
declstmt -> · type ID ( params ) { statements }, !
declstmt -> · extern type ID ( params ) ;, !
declstmt -> · class ID inherit { declstatements }, !
elseclause -> else · stmt, else
stmt -> · namespaceblock, else
stmt -> · statementblock, else
stmt -> · declstmt, else
stmt -> · stmtexpr ;, else
stmt -> · break ;, else
stmt -> · return expr ;, else
stmt -> · return ;, else
stmt -> · delete expr ;, else
stmt -> · while ( expr ) stmt, else
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, else
stmt -> · if ( expr ) stmt elifclauselist elseclause, else
namespaceblock -> · namespace ID { statements }, else
statementblock -> · { statements }, else
declstmt -> · type ID = expr ;, else
declstmt -> · type ID ( params ) { statements }, else
declstmt -> · extern type ID ( params ) ;, else
declstmt -> · class ID inherit { declstatements }, else
***EndSet***
***EndState***
***State***
217
I_1180_1306_1349
***Set***
elifclauselist -> elifclauselist elifclause ·, else
elifclauselist -> elifclauselist elifclause ·, $
elifclauselist -> elifclauselist elifclause ·, namespace
elifclauselist -> elifclauselist elifclause ·, {
elifclauselist -> elifclauselist elifclause ·, ID
elifclauselist -> elifclauselist elifclause ·, void
elifclauselist -> elifclauselist elifclause ·, bool
elifclauselist -> elifclauselist elifclause ·, int
elifclauselist -> elifclauselist elifclause ·, float
elifclauselist -> elifclauselist elifclause ·, string
elifclauselist -> elifclauselist elifclause ·, extern
elifclauselist -> elifclauselist elifclause ·, class
elifclauselist -> elifclauselist elifclause ·, (
elifclauselist -> elifclauselist elifclause ·, this
elifclauselist -> elifclauselist elifclause ·, new
elifclauselist -> elifclauselist elifclause ·, LITINT
elifclauselist -> elifclauselist elifclause ·, LITFLOAT
elifclauselist -> elifclauselist elifclause ·, LITSTRING
elifclauselist -> elifclauselist elifclause ·, LITBOOL
elifclauselist -> elifclauselist elifclause ·, null
elifclauselist -> elifclauselist elifclause ·, ++
elifclauselist -> elifclauselist elifclause ·, --
elifclauselist -> elifclauselist elifclause ·, break
elifclauselist -> elifclauselist elifclause ·, return
elifclauselist -> elifclauselist elifclause ·, delete
elifclauselist -> elifclauselist elifclause ·, while
elifclauselist -> elifclauselist elifclause ·, for
elifclauselist -> elifclauselist elifclause ·, if
elifclauselist -> elifclauselist elifclause ·, }
elifclauselist -> elifclauselist elifclause ·, &&
elifclauselist -> elifclauselist elifclause ·, ||
elifclauselist -> elifclauselist elifclause ·, +
elifclauselist -> elifclauselist elifclause ·, -
elifclauselist -> elifclauselist elifclause ·, *
elifclauselist -> elifclauselist elifclause ·, /
elifclauselist -> elifclauselist elifclause ·, !
***EndSet***
***EndState***
***State***
218
I_1181_1307_1350_1426_1450_1456
***Set***
stmt -> if ( expr ) stmt elifclauselist elseclause ·, $
stmt -> if ( expr ) stmt elifclauselist elseclause ·, namespace
stmt -> if ( expr ) stmt elifclauselist elseclause ·, {
stmt -> if ( expr ) stmt elifclauselist elseclause ·, ID
stmt -> if ( expr ) stmt elifclauselist elseclause ·, void
stmt -> if ( expr ) stmt elifclauselist elseclause ·, bool
stmt -> if ( expr ) stmt elifclauselist elseclause ·, int
stmt -> if ( expr ) stmt elifclauselist elseclause ·, float
stmt -> if ( expr ) stmt elifclauselist elseclause ·, string
stmt -> if ( expr ) stmt elifclauselist elseclause ·, extern
stmt -> if ( expr ) stmt elifclauselist elseclause ·, class
stmt -> if ( expr ) stmt elifclauselist elseclause ·, (
stmt -> if ( expr ) stmt elifclauselist elseclause ·, this
stmt -> if ( expr ) stmt elifclauselist elseclause ·, new
stmt -> if ( expr ) stmt elifclauselist elseclause ·, LITINT
stmt -> if ( expr ) stmt elifclauselist elseclause ·, LITFLOAT
stmt -> if ( expr ) stmt elifclauselist elseclause ·, LITSTRING
stmt -> if ( expr ) stmt elifclauselist elseclause ·, LITBOOL
stmt -> if ( expr ) stmt elifclauselist elseclause ·, null
stmt -> if ( expr ) stmt elifclauselist elseclause ·, ++
stmt -> if ( expr ) stmt elifclauselist elseclause ·, --
stmt -> if ( expr ) stmt elifclauselist elseclause ·, break
stmt -> if ( expr ) stmt elifclauselist elseclause ·, return
stmt -> if ( expr ) stmt elifclauselist elseclause ·, delete
stmt -> if ( expr ) stmt elifclauselist elseclause ·, while
stmt -> if ( expr ) stmt elifclauselist elseclause ·, for
stmt -> if ( expr ) stmt elifclauselist elseclause ·, if
stmt -> if ( expr ) stmt elifclauselist elseclause ·, }
stmt -> if ( expr ) stmt elifclauselist elseclause ·, &&
stmt -> if ( expr ) stmt elifclauselist elseclause ·, ||
stmt -> if ( expr ) stmt elifclauselist elseclause ·, +
stmt -> if ( expr ) stmt elifclauselist elseclause ·, -
stmt -> if ( expr ) stmt elifclauselist elseclause ·, *
stmt -> if ( expr ) stmt elifclauselist elseclause ·, /
stmt -> if ( expr ) stmt elifclauselist elseclause ·, !
stmt -> if ( expr ) stmt elifclauselist elseclause ·, else
***EndSet***
***EndState***
***State***
219
I_1243_1310_1357_1413_1428_1452_1458
***Set***
declstmt -> type ID ( params ) { statements · }, $
declstmt -> type ID ( params ) { statements · }, namespace
declstmt -> type ID ( params ) { statements · }, {
declstmt -> type ID ( params ) { statements · }, ID
declstmt -> type ID ( params ) { statements · }, void
declstmt -> type ID ( params ) { statements · }, bool
declstmt -> type ID ( params ) { statements · }, int
declstmt -> type ID ( params ) { statements · }, float
declstmt -> type ID ( params ) { statements · }, string
declstmt -> type ID ( params ) { statements · }, extern
declstmt -> type ID ( params ) { statements · }, class
declstmt -> type ID ( params ) { statements · }, (
declstmt -> type ID ( params ) { statements · }, this
declstmt -> type ID ( params ) { statements · }, new
declstmt -> type ID ( params ) { statements · }, LITINT
declstmt -> type ID ( params ) { statements · }, LITFLOAT
declstmt -> type ID ( params ) { statements · }, LITSTRING
declstmt -> type ID ( params ) { statements · }, LITBOOL
declstmt -> type ID ( params ) { statements · }, null
declstmt -> type ID ( params ) { statements · }, ++
declstmt -> type ID ( params ) { statements · }, --
declstmt -> type ID ( params ) { statements · }, break
declstmt -> type ID ( params ) { statements · }, return
declstmt -> type ID ( params ) { statements · }, delete
declstmt -> type ID ( params ) { statements · }, while
declstmt -> type ID ( params ) { statements · }, for
declstmt -> type ID ( params ) { statements · }, if
statements -> statements · stmt, }
statements -> statements · stmt, namespace
statements -> statements · stmt, {
statements -> statements · stmt, ID
statements -> statements · stmt, void
statements -> statements · stmt, bool
statements -> statements · stmt, int
statements -> statements · stmt, float
statements -> statements · stmt, string
statements -> statements · stmt, extern
statements -> statements · stmt, class
statements -> statements · stmt, (
statements -> statements · stmt, this
statements -> statements · stmt, new
statements -> statements · stmt, LITINT
statements -> statements · stmt, LITFLOAT
statements -> statements · stmt, LITSTRING
statements -> statements · stmt, LITBOOL
statements -> statements · stmt, null
statements -> statements · stmt, ++
statements -> statements · stmt, --
statements -> statements · stmt, break
statements -> statements · stmt, return
statements -> statements · stmt, delete
statements -> statements · stmt, while
statements -> statements · stmt, for
statements -> statements · stmt, if
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · string, ID
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
declstmt -> type ID ( params ) { statements · }, }
declstmt -> type ID ( params ) { statements · }, &&
declstmt -> type ID ( params ) { statements · }, ||
declstmt -> type ID ( params ) { statements · }, +
declstmt -> type ID ( params ) { statements · }, -
declstmt -> type ID ( params ) { statements · }, *
declstmt -> type ID ( params ) { statements · }, /
declstmt -> type ID ( params ) { statements · }, !
declstmt -> type ID ( params ) { statements · }, else
***EndSet***
***EndState***
***State***
220
I_1279_1367_1385_1442_1460_1465
***Set***
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, $
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, namespace
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, {
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, ID
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, void
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, bool
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, int
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, float
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, string
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, extern
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, class
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, (
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, this
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, new
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, LITINT
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, LITFLOAT
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, LITSTRING
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, LITBOOL
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, null
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, ++
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, --
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, break
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, return
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, delete
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, while
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, for
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, if
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, }
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, &&
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, ||
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, +
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, -
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, *
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, /
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, !
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, else
***EndSet***
***EndState***
***State***
221
I_1288_1374_1392_1443_1461_1466
***Set***
elifclause -> else if · ( expr ) stmt, else
elifclause -> else if · ( expr ) stmt, $
elifclause -> else if · ( expr ) stmt, namespace
elifclause -> else if · ( expr ) stmt, {
elifclause -> else if · ( expr ) stmt, ID
elifclause -> else if · ( expr ) stmt, void
elifclause -> else if · ( expr ) stmt, bool
elifclause -> else if · ( expr ) stmt, int
elifclause -> else if · ( expr ) stmt, float
elifclause -> else if · ( expr ) stmt, string
elifclause -> else if · ( expr ) stmt, extern
elifclause -> else if · ( expr ) stmt, class
elifclause -> else if · ( expr ) stmt, (
elifclause -> else if · ( expr ) stmt, this
elifclause -> else if · ( expr ) stmt, new
elifclause -> else if · ( expr ) stmt, LITINT
elifclause -> else if · ( expr ) stmt, LITFLOAT
elifclause -> else if · ( expr ) stmt, LITSTRING
elifclause -> else if · ( expr ) stmt, LITBOOL
elifclause -> else if · ( expr ) stmt, null
elifclause -> else if · ( expr ) stmt, ++
elifclause -> else if · ( expr ) stmt, --
elifclause -> else if · ( expr ) stmt, break
elifclause -> else if · ( expr ) stmt, return
elifclause -> else if · ( expr ) stmt, delete
elifclause -> else if · ( expr ) stmt, while
elifclause -> else if · ( expr ) stmt, for
elifclause -> else if · ( expr ) stmt, if
stmt -> if · ( expr ) stmt elifclauselist elseclause, $
stmt -> if · ( expr ) stmt elifclauselist elseclause, namespace
stmt -> if · ( expr ) stmt elifclauselist elseclause, {
stmt -> if · ( expr ) stmt elifclauselist elseclause, ID
stmt -> if · ( expr ) stmt elifclauselist elseclause, void
stmt -> if · ( expr ) stmt elifclauselist elseclause, bool
stmt -> if · ( expr ) stmt elifclauselist elseclause, int
stmt -> if · ( expr ) stmt elifclauselist elseclause, float
stmt -> if · ( expr ) stmt elifclauselist elseclause, string
stmt -> if · ( expr ) stmt elifclauselist elseclause, extern
stmt -> if · ( expr ) stmt elifclauselist elseclause, class
stmt -> if · ( expr ) stmt elifclauselist elseclause, (
stmt -> if · ( expr ) stmt elifclauselist elseclause, this
stmt -> if · ( expr ) stmt elifclauselist elseclause, new
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> if · ( expr ) stmt elifclauselist elseclause, null
stmt -> if · ( expr ) stmt elifclauselist elseclause, ++
stmt -> if · ( expr ) stmt elifclauselist elseclause, --
stmt -> if · ( expr ) stmt elifclauselist elseclause, break
stmt -> if · ( expr ) stmt elifclauselist elseclause, return
stmt -> if · ( expr ) stmt elifclauselist elseclause, delete
stmt -> if · ( expr ) stmt elifclauselist elseclause, while
stmt -> if · ( expr ) stmt elifclauselist elseclause, for
stmt -> if · ( expr ) stmt elifclauselist elseclause, if
elifclause -> else if · ( expr ) stmt, }
stmt -> if · ( expr ) stmt elifclauselist elseclause, }
elifclause -> else if · ( expr ) stmt, &&
elifclause -> else if · ( expr ) stmt, ||
elifclause -> else if · ( expr ) stmt, +
elifclause -> else if · ( expr ) stmt, -
elifclause -> else if · ( expr ) stmt, *
elifclause -> else if · ( expr ) stmt, /
elifclause -> else if · ( expr ) stmt, !
stmt -> if · ( expr ) stmt elifclauselist elseclause, &&
stmt -> if · ( expr ) stmt elifclauselist elseclause, ||
stmt -> if · ( expr ) stmt elifclauselist elseclause, +
stmt -> if · ( expr ) stmt elifclauselist elseclause, -
stmt -> if · ( expr ) stmt elifclauselist elseclause, *
stmt -> if · ( expr ) stmt elifclauselist elseclause, /
stmt -> if · ( expr ) stmt elifclauselist elseclause, !
stmt -> if · ( expr ) stmt elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
222
I_1289_1375_1393_1444_1462_1467
***Set***
elseclause -> else stmt ·, $
elseclause -> else stmt ·, namespace
elseclause -> else stmt ·, {
elseclause -> else stmt ·, ID
elseclause -> else stmt ·, void
elseclause -> else stmt ·, bool
elseclause -> else stmt ·, int
elseclause -> else stmt ·, float
elseclause -> else stmt ·, string
elseclause -> else stmt ·, extern
elseclause -> else stmt ·, class
elseclause -> else stmt ·, (
elseclause -> else stmt ·, this
elseclause -> else stmt ·, new
elseclause -> else stmt ·, LITINT
elseclause -> else stmt ·, LITFLOAT
elseclause -> else stmt ·, LITSTRING
elseclause -> else stmt ·, LITBOOL
elseclause -> else stmt ·, null
elseclause -> else stmt ·, ++
elseclause -> else stmt ·, --
elseclause -> else stmt ·, break
elseclause -> else stmt ·, return
elseclause -> else stmt ·, delete
elseclause -> else stmt ·, while
elseclause -> else stmt ·, for
elseclause -> else stmt ·, if
elseclause -> else stmt ·, }
elseclause -> else stmt ·, &&
elseclause -> else stmt ·, ||
elseclause -> else stmt ·, +
elseclause -> else stmt ·, -
elseclause -> else stmt ·, *
elseclause -> else stmt ·, /
elseclause -> else stmt ·, !
elseclause -> else stmt ·, else
***EndSet***
***EndState***
***State***
223
I_1325_1378_1396_1435_1446_1464_1469
***Set***
declstmt -> type ID ( params ) { statements } ·, $
declstmt -> type ID ( params ) { statements } ·, namespace
declstmt -> type ID ( params ) { statements } ·, {
declstmt -> type ID ( params ) { statements } ·, ID
declstmt -> type ID ( params ) { statements } ·, void
declstmt -> type ID ( params ) { statements } ·, bool
declstmt -> type ID ( params ) { statements } ·, int
declstmt -> type ID ( params ) { statements } ·, float
declstmt -> type ID ( params ) { statements } ·, string
declstmt -> type ID ( params ) { statements } ·, extern
declstmt -> type ID ( params ) { statements } ·, class
declstmt -> type ID ( params ) { statements } ·, (
declstmt -> type ID ( params ) { statements } ·, this
declstmt -> type ID ( params ) { statements } ·, new
declstmt -> type ID ( params ) { statements } ·, LITINT
declstmt -> type ID ( params ) { statements } ·, LITFLOAT
declstmt -> type ID ( params ) { statements } ·, LITSTRING
declstmt -> type ID ( params ) { statements } ·, LITBOOL
declstmt -> type ID ( params ) { statements } ·, null
declstmt -> type ID ( params ) { statements } ·, ++
declstmt -> type ID ( params ) { statements } ·, --
declstmt -> type ID ( params ) { statements } ·, break
declstmt -> type ID ( params ) { statements } ·, return
declstmt -> type ID ( params ) { statements } ·, delete
declstmt -> type ID ( params ) { statements } ·, while
declstmt -> type ID ( params ) { statements } ·, for
declstmt -> type ID ( params ) { statements } ·, if
declstmt -> type ID ( params ) { statements } ·, }
declstmt -> type ID ( params ) { statements } ·, &&
declstmt -> type ID ( params ) { statements } ·, ||
declstmt -> type ID ( params ) { statements } ·, +
declstmt -> type ID ( params ) { statements } ·, -
declstmt -> type ID ( params ) { statements } ·, *
declstmt -> type ID ( params ) { statements } ·, /
declstmt -> type ID ( params ) { statements } ·, !
declstmt -> type ID ( params ) { statements } ·, else
***EndSet***
***EndState***
***State***
224
I_1364_1409_1420_1459_1471_1472
***Set***
elifclause -> else if ( · expr ) stmt, else
elifclause -> else if ( · expr ) stmt, $
elifclause -> else if ( · expr ) stmt, namespace
elifclause -> else if ( · expr ) stmt, {
elifclause -> else if ( · expr ) stmt, ID
elifclause -> else if ( · expr ) stmt, void
elifclause -> else if ( · expr ) stmt, bool
elifclause -> else if ( · expr ) stmt, int
elifclause -> else if ( · expr ) stmt, float
elifclause -> else if ( · expr ) stmt, string
elifclause -> else if ( · expr ) stmt, extern
elifclause -> else if ( · expr ) stmt, class
elifclause -> else if ( · expr ) stmt, (
elifclause -> else if ( · expr ) stmt, this
elifclause -> else if ( · expr ) stmt, new
elifclause -> else if ( · expr ) stmt, LITINT
elifclause -> else if ( · expr ) stmt, LITFLOAT
elifclause -> else if ( · expr ) stmt, LITSTRING
elifclause -> else if ( · expr ) stmt, LITBOOL
elifclause -> else if ( · expr ) stmt, null
elifclause -> else if ( · expr ) stmt, ++
elifclause -> else if ( · expr ) stmt, --
elifclause -> else if ( · expr ) stmt, break
elifclause -> else if ( · expr ) stmt, return
elifclause -> else if ( · expr ) stmt, delete
elifclause -> else if ( · expr ) stmt, while
elifclause -> else if ( · expr ) stmt, for
elifclause -> else if ( · expr ) stmt, if
stmt -> if ( · expr ) stmt elifclauselist elseclause, $
stmt -> if ( · expr ) stmt elifclauselist elseclause, namespace
stmt -> if ( · expr ) stmt elifclauselist elseclause, {
stmt -> if ( · expr ) stmt elifclauselist elseclause, ID
stmt -> if ( · expr ) stmt elifclauselist elseclause, void
stmt -> if ( · expr ) stmt elifclauselist elseclause, bool
stmt -> if ( · expr ) stmt elifclauselist elseclause, int
stmt -> if ( · expr ) stmt elifclauselist elseclause, float
stmt -> if ( · expr ) stmt elifclauselist elseclause, string
stmt -> if ( · expr ) stmt elifclauselist elseclause, extern
stmt -> if ( · expr ) stmt elifclauselist elseclause, class
stmt -> if ( · expr ) stmt elifclauselist elseclause, (
stmt -> if ( · expr ) stmt elifclauselist elseclause, this
stmt -> if ( · expr ) stmt elifclauselist elseclause, new
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITINT
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> if ( · expr ) stmt elifclauselist elseclause, null
stmt -> if ( · expr ) stmt elifclauselist elseclause, ++
stmt -> if ( · expr ) stmt elifclauselist elseclause, --
stmt -> if ( · expr ) stmt elifclauselist elseclause, break
stmt -> if ( · expr ) stmt elifclauselist elseclause, return
stmt -> if ( · expr ) stmt elifclauselist elseclause, delete
stmt -> if ( · expr ) stmt elifclauselist elseclause, while
stmt -> if ( · expr ) stmt elifclauselist elseclause, for
stmt -> if ( · expr ) stmt elifclauselist elseclause, if
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITSTRING, )
lit -> · LITBOOL, )
lit -> · null, )
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITSTRING, &&
lit -> · LITBOOL, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITSTRING, ||
lit -> · LITBOOL, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], )
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITSTRING, >
lit -> · LITBOOL, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITSTRING, <
lit -> · LITBOOL, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITSTRING, >=
lit -> · LITBOOL, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITSTRING, <=
lit -> · LITBOOL, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITSTRING, ==
lit -> · LITBOOL, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITSTRING, !=
lit -> · LITBOOL, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITSTRING, +
lit -> · LITBOOL, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITSTRING, -
lit -> · LITBOOL, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITSTRING, *
lit -> · LITBOOL, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITSTRING, /
lit -> · LITBOOL, /
lit -> · null, /
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
elifclause -> else if ( · expr ) stmt, }
stmt -> if ( · expr ) stmt elifclauselist elseclause, }
elifclause -> else if ( · expr ) stmt, &&
elifclause -> else if ( · expr ) stmt, ||
elifclause -> else if ( · expr ) stmt, +
elifclause -> else if ( · expr ) stmt, -
elifclause -> else if ( · expr ) stmt, *
elifclause -> else if ( · expr ) stmt, /
elifclause -> else if ( · expr ) stmt, !
stmt -> if ( · expr ) stmt elifclauselist elseclause, &&
stmt -> if ( · expr ) stmt elifclauselist elseclause, ||
stmt -> if ( · expr ) stmt elifclauselist elseclause, +
stmt -> if ( · expr ) stmt elifclauselist elseclause, -
stmt -> if ( · expr ) stmt elifclauselist elseclause, *
stmt -> if ( · expr ) stmt elifclauselist elseclause, /
stmt -> if ( · expr ) stmt elifclauselist elseclause, !
stmt -> if ( · expr ) stmt elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
225
I_1401_1433_1440_1470_1474_1475
***Set***
elifclause -> else if ( expr · ) stmt, else
elifclause -> else if ( expr · ) stmt, $
elifclause -> else if ( expr · ) stmt, namespace
elifclause -> else if ( expr · ) stmt, {
elifclause -> else if ( expr · ) stmt, ID
elifclause -> else if ( expr · ) stmt, void
elifclause -> else if ( expr · ) stmt, bool
elifclause -> else if ( expr · ) stmt, int
elifclause -> else if ( expr · ) stmt, float
elifclause -> else if ( expr · ) stmt, string
elifclause -> else if ( expr · ) stmt, extern
elifclause -> else if ( expr · ) stmt, class
elifclause -> else if ( expr · ) stmt, (
elifclause -> else if ( expr · ) stmt, this
elifclause -> else if ( expr · ) stmt, new
elifclause -> else if ( expr · ) stmt, LITINT
elifclause -> else if ( expr · ) stmt, LITFLOAT
elifclause -> else if ( expr · ) stmt, LITSTRING
elifclause -> else if ( expr · ) stmt, LITBOOL
elifclause -> else if ( expr · ) stmt, null
elifclause -> else if ( expr · ) stmt, ++
elifclause -> else if ( expr · ) stmt, --
elifclause -> else if ( expr · ) stmt, break
elifclause -> else if ( expr · ) stmt, return
elifclause -> else if ( expr · ) stmt, delete
elifclause -> else if ( expr · ) stmt, while
elifclause -> else if ( expr · ) stmt, for
elifclause -> else if ( expr · ) stmt, if
stmt -> if ( expr · ) stmt elifclauselist elseclause, $
stmt -> if ( expr · ) stmt elifclauselist elseclause, namespace
stmt -> if ( expr · ) stmt elifclauselist elseclause, {
stmt -> if ( expr · ) stmt elifclauselist elseclause, ID
stmt -> if ( expr · ) stmt elifclauselist elseclause, void
stmt -> if ( expr · ) stmt elifclauselist elseclause, bool
stmt -> if ( expr · ) stmt elifclauselist elseclause, int
stmt -> if ( expr · ) stmt elifclauselist elseclause, float
stmt -> if ( expr · ) stmt elifclauselist elseclause, string
stmt -> if ( expr · ) stmt elifclauselist elseclause, extern
stmt -> if ( expr · ) stmt elifclauselist elseclause, class
stmt -> if ( expr · ) stmt elifclauselist elseclause, (
stmt -> if ( expr · ) stmt elifclauselist elseclause, this
stmt -> if ( expr · ) stmt elifclauselist elseclause, new
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITINT
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITFLOAT
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITSTRING
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITBOOL
stmt -> if ( expr · ) stmt elifclauselist elseclause, null
stmt -> if ( expr · ) stmt elifclauselist elseclause, ++
stmt -> if ( expr · ) stmt elifclauselist elseclause, --
stmt -> if ( expr · ) stmt elifclauselist elseclause, break
stmt -> if ( expr · ) stmt elifclauselist elseclause, return
stmt -> if ( expr · ) stmt elifclauselist elseclause, delete
stmt -> if ( expr · ) stmt elifclauselist elseclause, while
stmt -> if ( expr · ) stmt elifclauselist elseclause, for
stmt -> if ( expr · ) stmt elifclauselist elseclause, if
elifclause -> else if ( expr · ) stmt, }
stmt -> if ( expr · ) stmt elifclauselist elseclause, }
elifclause -> else if ( expr · ) stmt, &&
elifclause -> else if ( expr · ) stmt, ||
elifclause -> else if ( expr · ) stmt, +
elifclause -> else if ( expr · ) stmt, -
elifclause -> else if ( expr · ) stmt, *
elifclause -> else if ( expr · ) stmt, /
elifclause -> else if ( expr · ) stmt, !
stmt -> if ( expr · ) stmt elifclauselist elseclause, &&
stmt -> if ( expr · ) stmt elifclauselist elseclause, ||
stmt -> if ( expr · ) stmt elifclauselist elseclause, +
stmt -> if ( expr · ) stmt elifclauselist elseclause, -
stmt -> if ( expr · ) stmt elifclauselist elseclause, *
stmt -> if ( expr · ) stmt elifclauselist elseclause, /
stmt -> if ( expr · ) stmt elifclauselist elseclause, !
stmt -> if ( expr · ) stmt elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
226
I_1427_1451_1457_1473_1477_1478
***Set***
elifclause -> else if ( expr ) · stmt, else
elifclause -> else if ( expr ) · stmt, $
elifclause -> else if ( expr ) · stmt, namespace
elifclause -> else if ( expr ) · stmt, {
elifclause -> else if ( expr ) · stmt, ID
elifclause -> else if ( expr ) · stmt, void
elifclause -> else if ( expr ) · stmt, bool
elifclause -> else if ( expr ) · stmt, int
elifclause -> else if ( expr ) · stmt, float
elifclause -> else if ( expr ) · stmt, string
elifclause -> else if ( expr ) · stmt, extern
elifclause -> else if ( expr ) · stmt, class
elifclause -> else if ( expr ) · stmt, (
elifclause -> else if ( expr ) · stmt, this
elifclause -> else if ( expr ) · stmt, new
elifclause -> else if ( expr ) · stmt, LITINT
elifclause -> else if ( expr ) · stmt, LITFLOAT
elifclause -> else if ( expr ) · stmt, LITSTRING
elifclause -> else if ( expr ) · stmt, LITBOOL
elifclause -> else if ( expr ) · stmt, null
elifclause -> else if ( expr ) · stmt, ++
elifclause -> else if ( expr ) · stmt, --
elifclause -> else if ( expr ) · stmt, break
elifclause -> else if ( expr ) · stmt, return
elifclause -> else if ( expr ) · stmt, delete
elifclause -> else if ( expr ) · stmt, while
elifclause -> else if ( expr ) · stmt, for
elifclause -> else if ( expr ) · stmt, if
stmt -> if ( expr ) · stmt elifclauselist elseclause, $
stmt -> if ( expr ) · stmt elifclauselist elseclause, namespace
stmt -> if ( expr ) · stmt elifclauselist elseclause, {
stmt -> if ( expr ) · stmt elifclauselist elseclause, ID
stmt -> if ( expr ) · stmt elifclauselist elseclause, void
stmt -> if ( expr ) · stmt elifclauselist elseclause, bool
stmt -> if ( expr ) · stmt elifclauselist elseclause, int
stmt -> if ( expr ) · stmt elifclauselist elseclause, float
stmt -> if ( expr ) · stmt elifclauselist elseclause, string
stmt -> if ( expr ) · stmt elifclauselist elseclause, extern
stmt -> if ( expr ) · stmt elifclauselist elseclause, class
stmt -> if ( expr ) · stmt elifclauselist elseclause, (
stmt -> if ( expr ) · stmt elifclauselist elseclause, this
stmt -> if ( expr ) · stmt elifclauselist elseclause, new
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITINT
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITFLOAT
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITSTRING
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITBOOL
stmt -> if ( expr ) · stmt elifclauselist elseclause, null
stmt -> if ( expr ) · stmt elifclauselist elseclause, ++
stmt -> if ( expr ) · stmt elifclauselist elseclause, --
stmt -> if ( expr ) · stmt elifclauselist elseclause, break
stmt -> if ( expr ) · stmt elifclauselist elseclause, return
stmt -> if ( expr ) · stmt elifclauselist elseclause, delete
stmt -> if ( expr ) · stmt elifclauselist elseclause, while
stmt -> if ( expr ) · stmt elifclauselist elseclause, for
stmt -> if ( expr ) · stmt elifclauselist elseclause, if
stmt -> · namespaceblock, else
stmt -> · statementblock, else
stmt -> · declstmt, else
stmt -> · stmtexpr ;, else
stmt -> · break ;, else
stmt -> · return expr ;, else
stmt -> · return ;, else
stmt -> · delete expr ;, else
stmt -> · while ( expr ) stmt, else
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, else
stmt -> · if ( expr ) stmt elifclauselist elseclause, else
stmt -> · namespaceblock, $
stmt -> · statementblock, $
stmt -> · declstmt, $
stmt -> · stmtexpr ;, $
stmt -> · break ;, $
stmt -> · return expr ;, $
stmt -> · return ;, $
stmt -> · delete expr ;, $
stmt -> · while ( expr ) stmt, $
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, $
stmt -> · if ( expr ) stmt elifclauselist elseclause, $
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, else
statementblock -> · { statements }, else
declstmt -> · type ID = expr ;, else
declstmt -> · type ID ( params ) { statements }, else
declstmt -> · extern type ID ( params ) ;, else
declstmt -> · class ID inherit { declstatements }, else
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, $
statementblock -> · { statements }, $
declstmt -> · type ID = expr ;, $
declstmt -> · type ID ( params ) { statements }, $
declstmt -> · extern type ID ( params ) ;, $
declstmt -> · class ID inherit { declstatements }, $
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · string, ID
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITSTRING, .
lit -> · LITBOOL, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
elifclause -> else if ( expr ) · stmt, }
stmt -> if ( expr ) · stmt elifclauselist elseclause, }
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
elifclause -> else if ( expr ) · stmt, &&
elifclause -> else if ( expr ) · stmt, ||
elifclause -> else if ( expr ) · stmt, +
elifclause -> else if ( expr ) · stmt, -
elifclause -> else if ( expr ) · stmt, *
elifclause -> else if ( expr ) · stmt, /
elifclause -> else if ( expr ) · stmt, !
stmt -> if ( expr ) · stmt elifclauselist elseclause, &&
stmt -> if ( expr ) · stmt elifclauselist elseclause, ||
stmt -> if ( expr ) · stmt elifclauselist elseclause, +
stmt -> if ( expr ) · stmt elifclauselist elseclause, -
stmt -> if ( expr ) · stmt elifclauselist elseclause, *
stmt -> if ( expr ) · stmt elifclauselist elseclause, /
stmt -> if ( expr ) · stmt elifclauselist elseclause, !
stmt -> · namespaceblock, &&
stmt -> · statementblock, &&
stmt -> · declstmt, &&
stmt -> · stmtexpr ;, &&
stmt -> · break ;, &&
stmt -> · return expr ;, &&
stmt -> · return ;, &&
stmt -> · delete expr ;, &&
stmt -> · while ( expr ) stmt, &&
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, &&
stmt -> · if ( expr ) stmt elifclauselist elseclause, &&
stmt -> · namespaceblock, ||
stmt -> · statementblock, ||
stmt -> · declstmt, ||
stmt -> · stmtexpr ;, ||
stmt -> · break ;, ||
stmt -> · return expr ;, ||
stmt -> · return ;, ||
stmt -> · delete expr ;, ||
stmt -> · while ( expr ) stmt, ||
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ||
stmt -> · if ( expr ) stmt elifclauselist elseclause, ||
stmt -> · namespaceblock, +
stmt -> · statementblock, +
stmt -> · declstmt, +
stmt -> · stmtexpr ;, +
stmt -> · break ;, +
stmt -> · return expr ;, +
stmt -> · return ;, +
stmt -> · delete expr ;, +
stmt -> · while ( expr ) stmt, +
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, +
stmt -> · if ( expr ) stmt elifclauselist elseclause, +
stmt -> · namespaceblock, -
stmt -> · statementblock, -
stmt -> · declstmt, -
stmt -> · stmtexpr ;, -
stmt -> · break ;, -
stmt -> · return expr ;, -
stmt -> · return ;, -
stmt -> · delete expr ;, -
stmt -> · while ( expr ) stmt, -
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, -
stmt -> · if ( expr ) stmt elifclauselist elseclause, -
stmt -> · namespaceblock, *
stmt -> · statementblock, *
stmt -> · declstmt, *
stmt -> · stmtexpr ;, *
stmt -> · break ;, *
stmt -> · return expr ;, *
stmt -> · return ;, *
stmt -> · delete expr ;, *
stmt -> · while ( expr ) stmt, *
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, *
stmt -> · if ( expr ) stmt elifclauselist elseclause, *
stmt -> · namespaceblock, /
stmt -> · statementblock, /
stmt -> · declstmt, /
stmt -> · stmtexpr ;, /
stmt -> · break ;, /
stmt -> · return expr ;, /
stmt -> · return ;, /
stmt -> · delete expr ;, /
stmt -> · while ( expr ) stmt, /
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, /
stmt -> · if ( expr ) stmt elifclauselist elseclause, /
stmt -> · namespaceblock, !
stmt -> · statementblock, !
stmt -> · declstmt, !
stmt -> · stmtexpr ;, !
stmt -> · break ;, !
stmt -> · return expr ;, !
stmt -> · return ;, !
stmt -> · delete expr ;, !
stmt -> · while ( expr ) stmt, !
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, !
stmt -> · if ( expr ) stmt elifclauselist elseclause, !
namespaceblock -> · namespace ID { statements }, &&
statementblock -> · { statements }, &&
declstmt -> · type ID = expr ;, &&
declstmt -> · type ID ( params ) { statements }, &&
declstmt -> · extern type ID ( params ) ;, &&
declstmt -> · class ID inherit { declstatements }, &&
namespaceblock -> · namespace ID { statements }, ||
statementblock -> · { statements }, ||
declstmt -> · type ID = expr ;, ||
declstmt -> · type ID ( params ) { statements }, ||
declstmt -> · extern type ID ( params ) ;, ||
declstmt -> · class ID inherit { declstatements }, ||
namespaceblock -> · namespace ID { statements }, +
statementblock -> · { statements }, +
declstmt -> · type ID = expr ;, +
declstmt -> · type ID ( params ) { statements }, +
declstmt -> · extern type ID ( params ) ;, +
declstmt -> · class ID inherit { declstatements }, +
namespaceblock -> · namespace ID { statements }, -
statementblock -> · { statements }, -
declstmt -> · type ID = expr ;, -
declstmt -> · type ID ( params ) { statements }, -
declstmt -> · extern type ID ( params ) ;, -
declstmt -> · class ID inherit { declstatements }, -
namespaceblock -> · namespace ID { statements }, *
statementblock -> · { statements }, *
declstmt -> · type ID = expr ;, *
declstmt -> · type ID ( params ) { statements }, *
declstmt -> · extern type ID ( params ) ;, *
declstmt -> · class ID inherit { declstatements }, *
namespaceblock -> · namespace ID { statements }, /
statementblock -> · { statements }, /
declstmt -> · type ID = expr ;, /
declstmt -> · type ID ( params ) { statements }, /
declstmt -> · extern type ID ( params ) ;, /
declstmt -> · class ID inherit { declstatements }, /
namespaceblock -> · namespace ID { statements }, !
statementblock -> · { statements }, !
declstmt -> · type ID = expr ;, !
declstmt -> · type ID ( params ) { statements }, !
declstmt -> · extern type ID ( params ) ;, !
declstmt -> · class ID inherit { declstatements }, !
stmt -> if ( expr ) · stmt elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
227
I_1445_1463_1468_1476_1479_1480
***Set***
elifclause -> else if ( expr ) stmt ·, else
elifclause -> else if ( expr ) stmt ·, $
elifclause -> else if ( expr ) stmt ·, namespace
elifclause -> else if ( expr ) stmt ·, {
elifclause -> else if ( expr ) stmt ·, ID
elifclause -> else if ( expr ) stmt ·, void
elifclause -> else if ( expr ) stmt ·, bool
elifclause -> else if ( expr ) stmt ·, int
elifclause -> else if ( expr ) stmt ·, float
elifclause -> else if ( expr ) stmt ·, string
elifclause -> else if ( expr ) stmt ·, extern
elifclause -> else if ( expr ) stmt ·, class
elifclause -> else if ( expr ) stmt ·, (
elifclause -> else if ( expr ) stmt ·, this
elifclause -> else if ( expr ) stmt ·, new
elifclause -> else if ( expr ) stmt ·, LITINT
elifclause -> else if ( expr ) stmt ·, LITFLOAT
elifclause -> else if ( expr ) stmt ·, LITSTRING
elifclause -> else if ( expr ) stmt ·, LITBOOL
elifclause -> else if ( expr ) stmt ·, null
elifclause -> else if ( expr ) stmt ·, ++
elifclause -> else if ( expr ) stmt ·, --
elifclause -> else if ( expr ) stmt ·, break
elifclause -> else if ( expr ) stmt ·, return
elifclause -> else if ( expr ) stmt ·, delete
elifclause -> else if ( expr ) stmt ·, while
elifclause -> else if ( expr ) stmt ·, for
elifclause -> else if ( expr ) stmt ·, if
stmt -> if ( expr ) stmt · elifclauselist elseclause, $
stmt -> if ( expr ) stmt · elifclauselist elseclause, namespace
stmt -> if ( expr ) stmt · elifclauselist elseclause, {
stmt -> if ( expr ) stmt · elifclauselist elseclause, ID
stmt -> if ( expr ) stmt · elifclauselist elseclause, void
stmt -> if ( expr ) stmt · elifclauselist elseclause, bool
stmt -> if ( expr ) stmt · elifclauselist elseclause, int
stmt -> if ( expr ) stmt · elifclauselist elseclause, float
stmt -> if ( expr ) stmt · elifclauselist elseclause, string
stmt -> if ( expr ) stmt · elifclauselist elseclause, extern
stmt -> if ( expr ) stmt · elifclauselist elseclause, class
stmt -> if ( expr ) stmt · elifclauselist elseclause, (
stmt -> if ( expr ) stmt · elifclauselist elseclause, this
stmt -> if ( expr ) stmt · elifclauselist elseclause, new
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITINT
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITFLOAT
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITSTRING
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITBOOL
stmt -> if ( expr ) stmt · elifclauselist elseclause, null
stmt -> if ( expr ) stmt · elifclauselist elseclause, ++
stmt -> if ( expr ) stmt · elifclauselist elseclause, --
stmt -> if ( expr ) stmt · elifclauselist elseclause, break
stmt -> if ( expr ) stmt · elifclauselist elseclause, return
stmt -> if ( expr ) stmt · elifclauselist elseclause, delete
stmt -> if ( expr ) stmt · elifclauselist elseclause, while
stmt -> if ( expr ) stmt · elifclauselist elseclause, for
stmt -> if ( expr ) stmt · elifclauselist elseclause, if
elifclauselist -> ·, else
elifclauselist -> ·, $
elifclauselist -> · elifclauselist elifclause, else
elifclauselist -> · elifclauselist elifclause, $
elifclauselist -> ·, namespace
elifclauselist -> · elifclauselist elifclause, namespace
elifclauselist -> ·, {
elifclauselist -> · elifclauselist elifclause, {
elifclauselist -> ·, ID
elifclauselist -> · elifclauselist elifclause, ID
elifclauselist -> ·, void
elifclauselist -> · elifclauselist elifclause, void
elifclauselist -> ·, bool
elifclauselist -> · elifclauselist elifclause, bool
elifclauselist -> ·, int
elifclauselist -> · elifclauselist elifclause, int
elifclauselist -> ·, float
elifclauselist -> · elifclauselist elifclause, float
elifclauselist -> ·, string
elifclauselist -> · elifclauselist elifclause, string
elifclauselist -> ·, extern
elifclauselist -> · elifclauselist elifclause, extern
elifclauselist -> ·, class
elifclauselist -> · elifclauselist elifclause, class
elifclauselist -> ·, (
elifclauselist -> · elifclauselist elifclause, (
elifclauselist -> ·, this
elifclauselist -> · elifclauselist elifclause, this
elifclauselist -> ·, new
elifclauselist -> · elifclauselist elifclause, new
elifclauselist -> ·, LITINT
elifclauselist -> · elifclauselist elifclause, LITINT
elifclauselist -> ·, LITFLOAT
elifclauselist -> · elifclauselist elifclause, LITFLOAT
elifclauselist -> ·, LITSTRING
elifclauselist -> · elifclauselist elifclause, LITSTRING
elifclauselist -> ·, LITBOOL
elifclauselist -> · elifclauselist elifclause, LITBOOL
elifclauselist -> ·, null
elifclauselist -> · elifclauselist elifclause, null
elifclauselist -> ·, ++
elifclauselist -> · elifclauselist elifclause, ++
elifclauselist -> ·, --
elifclauselist -> · elifclauselist elifclause, --
elifclauselist -> ·, break
elifclauselist -> · elifclauselist elifclause, break
elifclauselist -> ·, return
elifclauselist -> · elifclauselist elifclause, return
elifclauselist -> ·, delete
elifclauselist -> · elifclauselist elifclause, delete
elifclauselist -> ·, while
elifclauselist -> · elifclauselist elifclause, while
elifclauselist -> ·, for
elifclauselist -> · elifclauselist elifclause, for
elifclauselist -> ·, if
elifclauselist -> · elifclauselist elifclause, if
elifclause -> else if ( expr ) stmt ·, }
stmt -> if ( expr ) stmt · elifclauselist elseclause, }
elifclauselist -> ·, }
elifclauselist -> · elifclauselist elifclause, }
elifclause -> else if ( expr ) stmt ·, &&
elifclause -> else if ( expr ) stmt ·, ||
elifclause -> else if ( expr ) stmt ·, +
elifclause -> else if ( expr ) stmt ·, -
elifclause -> else if ( expr ) stmt ·, *
elifclause -> else if ( expr ) stmt ·, /
elifclause -> else if ( expr ) stmt ·, !
stmt -> if ( expr ) stmt · elifclauselist elseclause, &&
stmt -> if ( expr ) stmt · elifclauselist elseclause, ||
stmt -> if ( expr ) stmt · elifclauselist elseclause, +
stmt -> if ( expr ) stmt · elifclauselist elseclause, -
stmt -> if ( expr ) stmt · elifclauselist elseclause, *
stmt -> if ( expr ) stmt · elifclauselist elseclause, /
stmt -> if ( expr ) stmt · elifclauselist elseclause, !
elifclauselist -> ·, &&
elifclauselist -> · elifclauselist elifclause, &&
elifclauselist -> ·, ||
elifclauselist -> · elifclauselist elifclause, ||
elifclauselist -> ·, +
elifclauselist -> · elifclauselist elifclause, +
elifclauselist -> ·, -
elifclauselist -> · elifclauselist elifclause, -
elifclauselist -> ·, *
elifclauselist -> · elifclauselist elifclause, *
elifclauselist -> ·, /
elifclauselist -> · elifclauselist elifclause, /
elifclauselist -> ·, !
elifclauselist -> · elifclauselist elifclause, !
stmt -> if ( expr ) stmt · elifclauselist elseclause, else
***EndSet***
***EndState***
***Table***
ACTION_TABLE
0
r4,r4,r4,r4,,r4,r4,r4,r4,r4,r4,r4,,,r4,r4,r4,r4,r4,,r4,r4,r4,r4,,,,r4,,,,,,,,r4,r4,,,,,,,,,,,,,,,,,,r4,r4,r4,r4,r4,r4
1
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s5,,,,,,,,,,,,,,,,,
2
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,acc
3
s1,r8,r8,r8,,r8,r8,r8,r8,r8,r8,r8,,,r8,r8,r8,r8,r8,,r8,r8,r8,r8,,,,r8,,,,,,,,r8,r8,,,,,,,,,,,,,,,,,,r8,r8,r8,r8,r8,r8
4
r3,r3,r3,r3,,r3,r3,r3,r3,r3,r3,r3,,,r3,r3,r3,r3,r3,,r3,r3,r3,r3,,,,r3,,,,,,,,r3,r3,,,,,,,,,,,,,,,,,,r3,r3,r3,r3,r3,r3
5
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s10,,
6
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s11,
7
r2,r2,r2,r2,,r2,r2,r2,r2,r2,r2,r2,,,r2,r2,r2,r2,r2,,r2,r2,r2,r2,,,,r2,,,,,,,,r2,r2,,,,,,,,,,,,,,,,,,r2,r2,r2,r2,r2,r2
8
,s6,r12,r12,,r12,r12,r12,r12,r12,r12,r12,,,r12,r12,r12,r12,r12,,r12,r12,r12,r12,,,,r12,,,,,,,,r12,r12,,,,,,,,,,,,,,,,,,r12,r12,r12,r12,r12,r12
9
,r7,r7,r7,,r7,r7,r7,r7,r7,r7,r7,,,r7,r7,r7,r7,r7,,r7,r7,r7,r7,,,,r7,,,,,,,,r7,r7,,,,,,,,,,,,,,,,,,r7,r7,r7,r7,r7,r7
10
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s62,,,,,,,,,,,,,,,,,,
11
,,,,,,,,,,,,,s63,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
12
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s64,
13
,,,,,,s15,s16,s17,s18,s19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s65,
14
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s68,
15
,,,,,,,,,,,,,,,,,,,,,,,,r52,r52,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r52,
16
,,,,,,,,,,,,,,,,,,,,,,,,r53,r53,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r53,
17
,,,,,,,,,,,,,,,,,,,,,,,,r54,r54,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r54,
18
,,,,,,,,,,,,,,,,,,,,,,,,r55,r55,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r55,
19
,,,,,,,,,,,,,,,,,,,,,,,,r56,r56,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r56,
20
,,,,,,,,,,,,r110,r110,,,,,,,,,,,r110,,r110,,,,,,,,,,,r110,r110,r110,r110,r110,r110,r110,r110,r110,r110,,r110,r110,,,,r110,,,,,,
21
,,,,,,s15,s16,s17,s18,s19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s69,
22
,,,,,,,,,,,s20,,,s21,,,,,,,,s28,s72,,,,,,,,,,,,s31,s32,,,,,,,,s73,,,,,,s74,,,,s33,s34,s35,s36,s75,
23
,,,,,,,,,,,,,,,,,,,,,,,s89,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
24
,,,,,,,,,,,,,,,,,,,,,,,s90,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
25
,,,,,,,,,,,,,,,,,,,,,,,s91,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
26
,,,,,,,,,,,,,s92,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
27
,,,,,,,,,,,s20,,s93,s21,,,,,,,,s28,s72,,,,,,,,,,,,s31,s32,,,,,,,,s73,,,,,,s74,,,,s33,s34,s35,s36,s75,
28
,,,,,,,,,,,,r87,r87,,,,,,,,,,,r87,,r87,,,,,,,,,,,r87,r87,r87,r87,r87,r87,r87,r87,r87,r87,,r87,r87,,,,r87,,,,,,
29
,,,,,,,,,,,s20,,,s21,,,,,,,,s28,s72,,,,,,,,,,,,s31,s32,,,,,,,,s73,,,,,,s74,,,,s33,s34,s35,s36,s75,
30
,,r12,r12,,r12,r12,r12,r12,r12,r12,r12,,,r12,r12,r12,r12,r12,,r12,r12,r12,r12,,,,r12,r12,,,,,,,r12,r12,,,,,,,,,,,,,,,,,,r12,r12,r12,r12,r12,
31
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s97,
32
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s98,
33
,,,,,,,,,,,,r109,r109,,,,,,,,,,,r109,,r109,,,,,,,,,,,r109,r109,r109,r109,r109,r109,r109,r109,r109,r109,,r109,r109,,,,r109,,,,,,
34
,,,,,,,,,,,,r106,r106,,,,,,,,,,,r106,,r106,,,,,,,,,,,r106,r106,r106,r106,r106,r106,r106,r106,r106,r106,,r106,r106,,,,r106,,,,,,
35
,,,,,,,,,,,,r107,r107,,,,,,,,,,,r107,,r107,,,,,,,,,,,r107,r107,r107,r107,r107,r107,r107,r107,r107,r107,,r107,r107,,,,r107,,,,,,
36
,,,,,,,,,,,,r108,r108,,,,,,,,,,,r108,,r108,,,,,,,,,,,r108,r108,r108,r108,r108,r108,r108,r108,r108,r108,,r108,r108,,,,r108,,,,,,
37
,,,,,,,,,,,,,,,,,,,,,,,s99,r51,s100,,,,r44,r44,r44,r44,r44,r44,s101,s102,r86,r86,r86,r86,r86,r86,r86,r86,r86,r86,,r86,r86,,,,r86,,,,,r51,
38
,r6,r6,r6,,r6,r6,r6,r6,r6,r6,r6,,,r6,r6,r6,r6,r6,,r6,r6,r6,r6,,,,r6,,,,,,,,r6,r6,,,,,,,,,,,,,,,,,,r6,r6,r6,r6,r6,r6
39
,,s12,s13,,s14,s15,s16,s17,s18,s19,s20,,,s21,s22,s23,s24,s25,,s26,s27,s28,s29,,,,s30,,,,,,,,s31,s32,,,,,,,,,,,,,,,,,,s33,s34,s35,s36,s37,r1
40
,,r18,r18,,r18,r18,r18,r18,r18,r18,r18,,,r18,r18,r18,r18,r18,r18,r18,r18,r18,r18,,,,r18,r18,,,,,,,r18,r18,,,,,,,r18,r18,r18,r18,,r18,r18,r18,,,,r18,r18,r18,r18,r18,r18
41
,,r19,r19,,r19,r19,r19,r19,r19,r19,r19,,,r19,r19,r19,r19,r19,r19,r19,r19,r19,r19,,,,r19,r19,,,,,,,r19,r19,,,,,,,r19,r19,r19,r19,,r19,r19,r19,,,,r19,r19,r19,r19,r19,r19
42
,,r11,r11,,r11,r11,r11,r11,r11,r11,r11,,,r11,r11,r11,r11,r11,,r11,r11,r11,r11,,,,r11,r11,,,,,,,r11,r11,,,,,,,,,,,,,,,,,,r11,r11,r11,r11,r11,r11
43
,,r20,r20,,r20,r20,r20,r20,r20,r20,r20,,,r20,r20,r20,r20,r20,r20,r20,r20,r20,r20,,,,r20,r20,,,,,,,r20,r20,,,,,,,r20,r20,r20,r20,,r20,r20,r20,,,,r20,r20,r20,r20,r20,r20
44
,,,,,,,,,,,,,s104,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
45
,,,,,,,,,,,,,r59,,,,,,,,,,,r59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
46
,,,,,,,,,,,,,r60,,,,,,,,,,,r60,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r90,,,,,,
47
,,,,,,,,,,,,r89,r89,,,,,,,,,,,r89,,,,,r46,r46,r46,r46,r46,r46,,,r89,r89,r89,r89,r89,r89,r89,r89,r89,r89,,r89,r89,,,,r89,,,,,,
48
,,,,,,,,,,,,,r62,,,,,,,,,,,r62,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r91,,,,,,
49
,,,,,,,,,,,,r92,r92,,,,,,,,,,,r92,,r92,,,,,,,,,,,r92,r92,r92,r92,r92,r92,r92,r92,r92,r92,,r92,r92,,,,r92,,,,,,
50
,,,,,,,,,,,,,r61,,,,,,,,,,,r61,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
51
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s105,
52
,,,,,,,,,,,,,,,,,,,,,,,,r48,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r48,
53
,,,,,,,,,,,,,,,,,,,,,,,,r47,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r47,
54
,,,,,,,,,,,,,,,,,,,,,,,,r50,s106,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r50,
55
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s107,,,,,,
56
,,,,,,,,,,,,r93,r93,,,,,,,,,,,r93,,r93,,,,,,,,,,,r93,r93,r93,r93,r93,r93,r93,r93,r93,r93,,r93,r93,,,,r93,,,,,,
57
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s108,s109,s110,s111,s112,s113,,,,,,,,,,,,,,,,,,,,,,,,,
58
,,,,,,,,,,,,r88,r88,,,,,,,,,,s114,r88,s115,,,,r45,r45,r45,r45,r45,r45,,,r88,r88,r88,r88,r88,r88,r88,r88,r88,r88,,r88,r88,,,,r88,,,,,,
59
,,,,,,,,,,,,,,,,,,,,,,,,r49,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r49,
60
,,,,,,,,,,,,,,,,,,,,,,,,r117,,,,,r100,r100,r100,r100,r100,r100,,,r100,r100,r100,r100,r100,r100,r100,r100,r100,r100,,r100,r100,,,,r100,,,,,r117,
61
,,,,,,,,,,,,r118,r118,,,,,,,,,,,r118,,r118,,,,,,,,,,,r118,r118,r118,r118,r118,r118,r118,r118,r118,r118,,r118,r118,,,,r118,,,,,r118,
62
r5,r5,r5,r5,,r5,r5,r5,r5,r5,r5,r5,,,r5,r5,r5,r5,r5,,r5,r5,r5,r5,,,,r5,,,,,,,,r5,r5,,,,,,,,,,,,,,,,,,r5,r5,r5,r5,r5,r5
63
,r9,r9,r9,,r9,r9,r9,r9,r9,r9,r9,,,r9,r9,r9,r9,r9,,r9,r9,r9,r9,,,,r9,,,,,,,,r9,r9,,,,,,,,,,,,,,,,,,r9,r9,r9,r9,r9,r9
64
,,,,,,,,,,,,,,,,,,,,,,,,,,,s116,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
65
,,,,,,,,,,,,,,,,,,,,,,,,,s100,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r51,
66
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s117,
67
,,,,,,,,,,,,r117,r117,,,,,,,,,,,r117,,r117,,,,,,,,,,,r117,r117,r117,r117,r117,r117,r117,r117,r117,r117,,r117,r117,,,,r117,,,,,r117,
68
,,,,,,,,,,,,,,,,,,,,,,,,,,,r124,,,,,,,,,,,,,,,,,,,,,,,,s118,,,,,,,,
69
,,,,,,,,,,,,,,,,,,,,,,,s120,,s100,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
70
,,,,,,,,,,,,,,,,,,,,,,,,,s106,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
71
,,,,,,,,,,,,r103,r103,,,,,,,,,,,r103,,r103,,,,,,,,,,,r103,r103,r103,r103,r103,r103,r103,r103,r103,r103,,r103,r103,,,,r103,,,,,,
72
,,,,,,s15,s16,s17,s18,s19,s20,,,s21,,,,,,,,s28,s72,,,,,,,,,,,,s31,s32,,,,,,,,s73,,,,,,s74,,,,s33,s34,s35,s36,s37,
73
,,,,,,,,,,,s20,,,s21,,,,,,,,s28,s72,,,,,,,,,,,,s31,s32,,,,,,,,s73,,,,,,s74,,,,s33,s34,s35,s36,s122,
74
,,,,,,,,,,,s20,,,s21,,,,,,,,s28,s72,,,,,,,,,,,,s31,s32,,,,,,,,s73,,,,,,s74,,,,s33,s34,s35,s36,s122,
75
,,,,,,,,,,,,r86,r86,,,,,,,,,,s99,r86,s100,,,,r44,r44,r44,r44,r44,r44,s101,s102,r86,r86,r86,r86,r86,r86,r86,r86,r86,r86,,r86,r86,,,,r86,,,,,,
76
,,,,,,,,,,,,r57,r57,,,,,,,,,,,r57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
77
,,,,,,,,,,,,r90,r90,,,,,,,,,,,r90,,r90,,,,,,,,,,,r90,r90,r90,r90,r90,r90,r90,r90,r90,r90,,r90,r90,,,,r90,,,,,,
78
,,,,,,,,,,,,r91,r91,,,,,,,,,,,r91,,r91,,,,,,,,,,,r91,r91,r91,r91,r91,r91,r91,r91,r91,r91,,r91,r91,,,,r91,,,,,,
79
,,,,,,,,,,,,r80,r80,,,,,,,,,,,r80,,r80,,,,,,,,,,,r80,r80,r80,r80,r80,r80,r80,r80,r80,r80,,r80,r80,,,,,,,,,,
80
,,,,,,,,,,,,,s127,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
81
,,,,,,,,,,,,r58,r58,,,,,,,,,,,r58,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
82
,,,,,,,,,,,,r63,r63,,,,,,,,,,,r63,,,,,,,,,,,,,,,,,,,,,,,,s128,s129,,,,,,,,,,
83
,,,,,,,,,,,,r64,r64,,,,,,,,,,,r64,,,,,,,,,,,,,s130,s131,s132,s133,s134,s135,s136,s137,,,,,,,,,,,,,,,
84
,,,,,,,,,,,,r76,r76,,,,,,,,,,,r76,,r76,,,,,,,,,,,r76,r76,r76,r76,r76,r76,r76,r76,s138,s139,,r76,r76,,,,,,,,,,
85
,,,,,,,,,,,,r73,r73,,,,,,,,,,,r73,,,,,,,,,,,,,r79,r79,r79,r79,r79,r79,r79,r79,r79,r79,,r73,r73,,,,,,,,,,
86
,,,,,,,,,,,,r84,r84,,,,,,,,,,,r84,,r84,,,,,,,,,,,r84,r84,r84,r84,r84,r84,r84,r84,r84,r84,,r84,r84,,,,s107,,,,,,
87
,,,,,,,,,,,,r83,r83,,,,,,,,,,,r83,,r83,,,,,,,,,,,r83,r83,r83,r83,r83,r83,r83,r83,r83,r83,,r83,r83,,,,,,,,,,
88
,,,,,,,,,,,,r100,r100,,,,,,,,,,,r100,,r100,,,r100,r100,r100,r100,r100,r100,,,r100,r100,r100,r100,r100,r100,r100,r100,r100,r100,,r100,r100,,,,r100,,,,,,
89
,,,,,,,,,,,s20,,,s21,,,,,,,,s28,s72,,,,,,,,,,,,s31,s32,,,,,,,,s73,,,,,,s74,,,,s33,s34,s35,s36,s75,
90
,,s12,s13,,s14,s15,s16,s17,s18,s19,s20,,,s21,s22,s23,s24,s25,,s26,s27,s28,s29,,,,s30,,,,,,,,s31,s32,,,,,,,,,,,,,,,,,,s33,s34,s35,s36,s37,
91
,,,,,,,,,,,s20,,,s21,,,,,,,,s28,s72,,,,,,,,,,,,s31,s32,,,,,,,,s73,,,,,,s74,,,,s33,s34,s35,s36,s75,
92
,,r22,r22,,r22,r22,r22,r22,r22,r22,r22,,,r22,r22,r22,r22,r22,r22,r22,r22,r22,r22,,,,r22,r22,,,,,,,r22,r22,,,,,,,r22,r22,r22,r22,,r22,r22,r22,,,,r22,r22,r22,r22,r22,r22
93
,,r24,r24,,r24,r24,r24,r24,r24,r24,r24,,,r24,r24,r24,r24,r24,r24,r24,r24,r24,r24,,,,r24,r24,,,,,,,r24,r24,,,,,,,r24,r24,r24,r24,,r24,r24,r24,,,,r24,r24,r24,r24,r24,r24
94
,,,,,,,,,,,,,s143,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
95
,,,,,,,,,,,,,,,,,,,,,,,,s144,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
96
,,s12,s13,,s14,s15,s16,s17,s18,s19,s20,,,s21,s22,s23,s24,s25,,s26,s27,s28,s29,,,,s30,s145,,,,,,,s31,s32,,,,,,,,,,,,,,,,,,s33,s34,s35,s36,s37,
97
,,,,,,,,,,,,r95,r95,,,,,,,,,,,r95,,r95,,,,,,,,,,,r95,r95,r95,r95,r95,r95,r95,r95,r95,r95,,r95,r95,,,,,,,,,,
98
,,,,,,,,,,,,r94,r94,,,,,,,,,,,r94,,r94,,,,,,,,,,,r94,r94,r94,r94,r94,r94,r94,r94,r94,r94,,r94,r94,,,,,,,,,,
99
,,,,,,,,,,,s20,r114,,s21,,,,,,,,s28,s72,r114,,,,,,,,,,,s31,s32,,,,,,,,s73,,,,,,s74,,,,s33,s34,s35,s36,s75,
100
,,,,,,,,,,,s20,,,s21,,,,,,,,s28,s72,,,r122,,,,,,,,,s31,s32,,,,,,,,s73,,,,,,s74,,,,s33,s34,s35,s36,s122,
101
,,,,,,,,,,,,r97,r97,,,,,,,,,,,r97,,r97,,,,,,,,,,,r97,r97,r97,r97,r97,r97,r97,r97,r97,r97,,r97,r97,,,,,,,,,,
102
,,,,,,,,,,,,r96,r96,,,,,,,,,,,r96,,r96,,,,,,,,,,,r96,r96,r96,r96,r96,r96,r96,r96,r96,r96,,r96,r96,,,,,,,,,,
103
,,r10,r10,,r10,r10,r10,r10,r10,r10,r10,,,r10,r10,r10,r10,r10,,r10,r10,r10,r10,,,,r10,r10,,,,,,,r10,r10,,,,,,,,,,,,,,,,,,r10,r10,r10,r10,r10,r10
104
,,r21,r21,,r21,r21,r21,r21,r21,r21,r21,,,r21,r21,r21,r21,r21,r21,r21,r21,r21,r21,,,,r21,r21,,,,,,,r21,r21,,,,,,,r21,r21,r21,r21,,r21,r21,r21,,,,r21,r21,r21,r21,r21,r21
105
,,,,,,,,,,,,,,,,,,,,,,,s151,,,,,,s152,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
106
,,,,,,,,,,,s20,,,s21,,,,,,,,s28,s72,,,r122,,,,,,,,,s31,s32,,,,,,,,s73,,,,,,s74,,,,s33,s34,s35,s36,s122,
107
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s154,
108
,,,,,,,,,,,s20,,,s21,,,,,,,,s28,s72,,,,,,,,,,,,s31,s32,,,,,,,,s73,,,,,,s74,,,,s33,s34,s35,s36,s75,
109
,,,,,,,,,,,s20,,,s21,,,,,,,,s28,s72,,,,,,,,,,,,s31,s32,,,,,,,,s73,,,,,,s74,,,,s33,s34,s35,s36,s75,
110
,,,,,,,,,,,s20,,,s21,,,,,,,,s28,s72,,,,,,,,,,,,s31,s32,,,,,,,,s73,,,,,,s74,,,,s33,s34,s35,s36,s75,
111
,,,,,,,,,,,s20,,,s21,,,,,,,,s28,s72,,,,,,,,,,,,s31,s32,,,,,,,,s73,,,,,,s74,,,,s33,s34,s35,s36,s75,
112
,,,,,,,,,,,s20,,,s21,,,,,,,,s28,s72,,,,,,,,,,,,s31,s32,,,,,,,,s73,,,,,,s74,,,,s33,s34,s35,s36,s75,
113
,,,,,,,,,,,s20,,,s21,,,,,,,,s28,s72,,,,,,,,,,,,s31,s32,,,,,,,,s73,,,,,,s74,,,,s33,s34,s35,s36,s75,
114
,,,,,,,,,,,s20,r114,,s21,,,,,,,,s28,s72,r114,,,,,,,,,,,s31,s32,,,,,,,,s73,,,,,,s74,,,,s33,s34,s35,s36,s75,
115
,,,,,,,,,,,s20,,,s21,,,,,,,,s28,s72,,,,,,,,,,,,s31,s32,,,,,,,,s73,,,,,,s74,,,,s33,s34,s35,s36,s122,
116
,,r12,r12,,r12,r12,r12,r12,r12,r12,r12,,,r12,r12,r12,r12,r12,,r12,r12,r12,r12,,,,r12,r12,,,,,,,r12,r12,,,,,,,,,,,,,,,,,,r12,r12,r12,r12,r12,
117
,,,,,,,,,,,,,,,,,,,,,,,s164,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
118
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s165,
119
,,,,,,,,,,,,,,,,,,,,,,,,,,,s166,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
120
,,,,,,,,,,,,,,,,,,,,,,,,s167,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
121
,,,,,,,,,,,,,,,,,,,,,,,,s168,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
122
,,,,,,,,,,,,r86,r86,,,,,,,,,,s99,r86,s100,r86,,,,,,,,,s101,s102,r86,r86,r86,r86,r86,r86,r86,r86,r86,r86,,r86,r86,,,,r86,,,,,,
123
,,,,,,,,,,,,r89,r89,,,,,,,,,,,r89,,r89,,,,,,,,,,,r89,r89,r89,r89,r89,r89,r89,r89,r89,r89,,r89,r89,,,,r89,,,,,,
124
,,,,,,,,,,,,r82,r82,,,,,,,,,,,r82,,r82,,,,,,,,,,,r82,r82,r82,r82,r82,r82,r82,r82,r82,r82,,r82,r82,,,,,,,,,,
125
,,,,,,,,,,,,r88,r88,,,,,,,,,,s114,r88,s115,r88,,,,,,,,,,,r88,r88,r88,r88,r88,r88,r88,r88,r88,r88,,r88,r88,,,,r88,,,,,,
126
,,,,,,,,,,,,r81,r81,,,,,,,,,,,r81,,r81,,,,,,,,,,,r81,r81,r81,r81,r81,r81,r81,r81,r81,r81,,r81,r81,,,,,,,,,,
127
,,r25,r25,,r25,r25,r25,r25,r25,r25,r25,,,r25,r25,r25,r25,r25,r25,r25,r25,r25,r25,,,,r25,r25,,,,,,,r25,r25,,,,,,,r25,r25,r25,r25,,r25,r25,r25,,,,r25,r25,r25,r25,r25,r25
128
,,,,,,,,,,,s20,,,s21,,,,,,,,s28,s72,,,,,,,,,,,,s31,s32,,,,,,,,s73,,,,,,s74,,,,s33,s34,s35,s36,s122,
129
,,,,,,,,,,,s20,,,s21,,,,,,,,s28,s72,,,,,,,,,,,,s31,s32,,,,,,,,s73,,,,,,s74,,,,s33,s34,s35,s36,s122,
130
,,,,,,,,,,,s20,,,s21,,,,,,,,s28,s72,,,,,,,,,,,,s31,s32,,,,,,,,s73,,,,,,s74,,,,s33,s34,s35,s36,s122,
131
,,,,,,,,,,,s20,,,s21,,,,,,,,s28,s72,,,,,,,,,,,,s31,s32,,,,,,,,s73,,,,,,s74,,,,s33,s34,s35,s36,s122,
132
,,,,,,,,,,,s20,,,s21,,,,,,,,s28,s72,,,,,,,,,,,,s31,s32,,,,,,,,s73,,,,,,s74,,,,s33,s34,s35,s36,s122,
133
,,,,,,,,,,,s20,,,s21,,,,,,,,s28,s72,,,,,,,,,,,,s31,s32,,,,,,,,s73,,,,,,s74,,,,s33,s34,s35,s36,s122,
134
,,,,,,,,,,,s20,,,s21,,,,,,,,s28,s72,,,,,,,,,,,,s31,s32,,,,,,,,s73,,,,,,s74,,,,s33,s34,s35,s36,s122,
135
,,,,,,,,,,,s20,,,s21,,,,,,,,s28,s72,,,,,,,,,,,,s31,s32,,,,,,,,s73,,,,,,s74,,,,s33,s34,s35,s36,s122,
136
,,,,,,,,,,,s20,,,s21,,,,,,,,s28,s72,,,,,,,,,,,,s31,s32,,,,,,,,s73,,,,,,s74,,,,s33,s34,s35,s36,s122,
137
,,,,,,,,,,,s20,,,s21,,,,,,,,s28,s72,,,,,,,,,,,,s31,s32,,,,,,,,s73,,,,,,s74,,,,s33,s34,s35,s36,s122,
138
,,,,,,,,,,,s20,,,s21,,,,,,,,s28,s72,,,,,,,,,,,,s31,s32,,,,,,,,s73,,,,,,s74,,,,s33,s34,s35,s36,s122,
139
,,,,,,,,,,,s20,,,s21,,,,,,,,s28,s72,,,,,,,,,,,,s31,s32,,,,,,,,s73,,,,,,s74,,,,s33,s34,s35,s36,s122,
140
,,,,,,,,,,,,,,,,,,,,,,,,s182,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
141
,,,,,,,,,,,s20,,,s21,,,,,,,,s28,s72,,,,,,,,,,,,s31,s32,,,,,,,,s73,,,,,,s74,,,,s33,s34,s35,s36,s122,
142
,,,,,,,,,,,,,,,,,,,,,,,,s184,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
143
,,r23,r23,,r23,r23,r23,r23,r23,r23,r23,,,r23,r23,r23,r23,r23,r23,r23,r23,r23,r23,,,,r23,r23,,,,,,,r23,r23,,,,,,,r23,r23,r23,r23,,r23,r23,r23,,,,r23,r23,r23,r23,r23,r23
144
,,,,,,,,,,,,r85,r85,,,,,,,,,,,r85,,r85,,,,,,,,,,,r85,r85,r85,r85,r85,r85,r85,r85,r85,r85,,r85,r85,,,,r85,,,,,,
145
,,r14,r14,,r14,r14,r14,r14,r14,r14,r14,,,r14,r14,r14,r14,r14,r14,r14,r14,r14,r14,,,,r14,r14,,,,,,,r14,r14,,,,,,,r14,r14,r14,r14,,r14,r14,r14,,,,r14,r14,r14,r14,r14,r14
146
,,,,,,,,,,,,r115,,,,,,,,,,,,r115,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
147
,,,,,,,,,,,,s185,,,,,,,,,,,,s186,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
148
,,,,,,,,,,,,,,,,,,,,,,,,,,r121,,,,,,,,,,,,,,,,,s136,s137,,,,,,,,,,,,,,,
149
,,,,,,,,,,,,r79,r79,,,,,,,,,,,r79,,r79,,,,,,,,,,,r79,r79,r79,r79,r79,r79,r79,r79,r79,r79,,r79,r79,,,,,,,,,,
150
,,,,,,,,,,,,,,,,,,,,,,,,,,s187,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
151
,,,,,,s15,s16,s17,s18,s19,,r111,,,,,,,,,,,,r111,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s65,
152
,,,,,,,,,,,s20,,,s21,,,,,,,,s28,s72,,,,,,,,,,,,s31,s32,,,,,,,,s73,,,,,,s74,,,,s33,s34,s35,s36,s75,
153
,,,,,,,,,,,,,,,,,,,,,,,,,,s191,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
154
,,,,,,,,,,,,r105,r105,,,,,,,,,,r105,r105,r105,r105,,,r105,r105,r105,r105,r105,r105,,,r105,r105,r105,r105,r105,r105,r105,r105,r105,r105,,r105,r105,,,,r105,,,,,,
155
,,,,,,,,,,,,r38,r38,,,,,,,,,,,r38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
156
,,,,,,,,,,,,r39,r39,,,,,,,,,,,r39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
157
,,,,,,,,,,,,r40,r40,,,,,,,,,,,r40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
158
,,,,,,,,,,,,r41,r41,,,,,,,,,,,r41,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
159
,,,,,,,,,,,,r42,r42,,,,,,,,,,,r42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
160
,,,,,,,,,,,,r43,r43,,,,,,,,,,,r43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
161
,,,,,,,,,,,,s185,,,,,,,,,,,,s192,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
162
,,,,,,,,,,,,,,,,,,,,,,,,,,s193,,,,,,,,,,,,,,,,,s136,s137,,,,,,,,,,,,,,,
163
,,s12,s13,,s14,s15,s16,s17,s18,s19,s20,,,s21,s22,s23,s24,s25,,s26,s27,s28,s29,,,,s30,s194,,,,,,,s31,s32,,,,,,,,,,,,,,,,,,s33,s34,s35,s36,s37,
164
,,,,,,s15,s16,s17,s18,s19,,r111,,,,,,,,,,,,r111,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s65,
165
,,,,,,,,,,,,,,,,,,,,,,,,,,,r123,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
166
,,,r17,,r17,r17,r17,r17,r17,r17,,,,,,,,,,,,,,,,,,r17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r17,
167
,,,,,,,,,,,,r102,r102,,,,,,,,,,,r102,,r102,,,,,,,,,,,r102,r102,r102,r102,r102,r102,r102,r102,r102,r102,,r102,r102,,,,r102,,,,,,
168
,,,,,,,,,,,s20,,,s21,,,,,,,,s28,s72,,,,,,,,,,,,s31,s32,,,,,,,,s73,,,,,,s74,,,,s33,s34,s35,s36,s122,
169
,,,,,,,,,,,,r66,r66,,,,,,,,,,,r66,,,,,,,,,,,,,,,,,,,,,,,,r66,r66,,,,,,,,,,
170
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s130,s131,s132,s133,s134,s135,s136,s137,,,,,,,,,,,,,,,
171
,,,,,,,,,,,,r65,r65,,,,,,,,,,,r65,,,,,,,,,,,,,,,,,,,,,,,,r65,r65,,,,,,,,,,
172
,,,,,,,,,,,,r71,r71,,,,,,,,,,,r71,,,,,,,,,,,,,,,,,,,s136,s137,,,,r71,r71,,,,,,,,,,
173
,,,,,,,,,,,,r72,r72,,,,,,,,,,,r72,,,,,,,,,,,,,,,,,,,s136,s137,,,,r72,r72,,,,,,,,,,
174
,,,,,,,,,,,,r70,r70,,,,,,,,,,,r70,,,,,,,,,,,,,,,,,,,s136,s137,,,,r70,r70,,,,,,,,,,
175
,,,,,,,,,,,,r69,r69,,,,,,,,,,,r69,,,,,,,,,,,,,,,,,,,s136,s137,,,,r69,r69,,,,,,,,,,
176
,,,,,,,,,,,,r67,r67,,,,,,,,,,,r67,,,,,,,,,,,,,,,,,,,s136,s137,,,,r67,r67,,,,,,,,,,
177
,,,,,,,,,,,,r68,r68,,,,,,,,,,,r68,,,,,,,,,,,,,,,,,,,s136,s137,,,,r68,r68,,,,,,,,,,
178
,,,,,,,,,,,,r74,r74,,,,,,,,,,,r74,,r74,,,,,,,,,,,r74,r74,r74,r74,r74,r74,r74,r74,s138,s139,,r74,r74,,,,,,,,,,
179
,,,,,,,,,,,,r75,r75,,,,,,,,,,,r75,,r75,,,,,,,,,,,r75,r75,r75,r75,r75,r75,r75,r75,s138,s139,,r75,r75,,,,,,,,,,
180
,,,,,,,,,,,,r77,r77,,,,,,,,,,,r77,,r77,,,,,,,,,,,r77,r77,r77,r77,r77,r77,r77,r77,r77,r77,,r77,r77,,,,,,,,,,
181
,,,,,,,,,,,,r78,r78,,,,,,,,,,,r78,,r78,,,,,,,,,,,r78,r78,r78,r78,r78,r78,r78,r78,r78,r78,,r78,r78,,,,,,,,,,
182
,,s12,s13,,s14,s15,s16,s17,s18,s19,s20,,,s21,s22,s23,s24,s25,,s26,s27,s28,s29,,,,s30,,,,,,,,s31,s32,,,,,,,,,,,,,,,,,,s33,s34,s35,s36,s37,
183
,,,,,,,,,,,,,s200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s128,s129,,,,,,,,,,
184
,,s12,s13,,s14,s15,s16,s17,s18,s19,s20,,,s21,s22,s23,s24,s25,,s26,s27,s28,s29,,,,s30,,,,,,,,s31,s32,,,,,,,,,,,,,,,,,,s33,s34,s35,s36,s37,
185
,,,,,,,,,,,s20,,,s21,,,,,,,,s28,s72,,,,,,,,,,,,s31,s32,,,,,,,,s73,,,,,,s74,,,,s33,s34,s35,s36,s75,
186
,,,,,,,,,,,,r98,r98,,,,,,,,,,,r98,,r98,,,,,,,,,,,r98,r98,r98,r98,r98,r98,r98,r98,r98,r98,,r98,r98,,,,r98,,,,,,
187
,,,,,,,,,,,,r119,r119,,,,,,,,,,,r119,,r119,,,r119,r119,r119,r119,r119,r119,,,r119,r119,r119,r119,r119,r119,r119,r119,r119,r119,,r119,r119,,,,r119,,,,,r119,
188
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s203,
189
,,,,,,,,,,,,s204,,,,,,,,,,,,s205,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
190
,,,,,,,,,,,,,s206,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
191
,,,,,,,,,,,,r120,r120,,,,,,,,,,,r120,,r120,,,,,,,,,,,r120,r120,r120,r120,r120,r120,r120,r120,r120,r120,,r120,r120,,,,r120,,,,,r120,
192
,,,,,,,,,,,,r99,r99,,,,,,,,,,,r99,,r99,,,,,,,,,,,r99,r99,r99,r99,r99,r99,r99,r99,r99,r99,,r99,r99,,,,r99,,,,,,
193
,,,,,,,,,,,,r101,r101,,,,,,,,,,,r101,,r101,,,r101,r101,r101,r101,r101,r101,,,r101,r101,r101,r101,r101,r101,r101,r101,r101,r101,,r101,r101,,,,r101,,,,,,
194
,,r13,r13,,r13,r13,r13,r13,r13,r13,r13,,,r13,r13,r13,r13,r13,r13,r13,r13,r13,r13,,,,r13,r13,,,,,,,r13,r13,,,,,,,r13,r13,r13,r13,,r13,r13,r13,,,,r13,r13,r13,r13,r13,r13
195
,,,,,,,,,,,,s204,,,,,,,,,,,,s207,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
196
,,,s13,,s14,s15,s16,s17,s18,s19,,,,,,,,,,,,,,,,,,s208,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s65,
197
,,,r16,,r16,r16,r16,r16,r16,r16,,,,,,,,,,,,,,,,,,r16,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r16,
198
,,,,,,,,,,,,r104,r104,,,,,,,,,,,r104,,r104,,,,,,,,,,,r104,r104,r104,r104,r104,r104,r104,r104,r104,r104,,r104,r104,,,,,,,,,,
199
,,r26,r26,,r26,r26,r26,r26,r26,r26,r26,,,r26,r26,r26,r26,r26,r26,r26,r26,r26,r26,,,,r26,r26,,,,,,,r26,r26,,,,,,,r26,r26,r26,r26,,r26,r26,r26,,,,r26,r26,r26,r26,r26,r26
200
,,,,,,,,,,,s20,,,s21,,,,,,,,s28,s29,,,,,,,,,,,,s31,s32,,,,,,,,,,,,,,,,,,s33,s34,s35,s36,s75,
201
,,r33,r33,,r33,r33,r33,r33,r33,r33,r33,,,r33,r33,r33,r33,r33,r33,r33,r33,r33,r33,,,,r33,r33,,,,,,,r33,r33,,,,,,,r33,r33,r33,r33,,r33,r33,r33,,,,r33,r33,r33,r33,r33,r33
202
,,,,,,,,,,,,r116,,,,,,,,,,,,r116,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
203
,,,,,,,,,,,,r112,,,,,,,,,,,,r112,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
204
,,,,,,s15,s16,s17,s18,s19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s65,
205
,,,,,,,,,,,,,,,,,,,,,,,,,,,s213,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
206
,,r29,r29,,r29,r29,r29,r29,r29,r29,r29,,,r29,r29,r29,r29,r29,r29,r29,r29,r29,r29,,,,r29,r29,,,,,,,r29,r29,,,,,,,r29,r29,r29,r29,,r29,r29,r29,,,,r29,r29,r29,r29,r29,r29
207
,,,,,,,,,,,,,s214,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
208
,,r32,r32,,r32,r32,r32,r32,r32,r32,r32,,,r32,r32,r32,r32,r32,r32,r32,r32,r32,r32,,,,r32,r32,,,,,,,r32,r32,,,,,,,r32,r32,r32,r32,,r32,r32,r32,,,,r32,r32,r32,r32,r32,r32
209
,,,r15,,r15,r15,r15,r15,r15,r15,,,,,,,,,,,,,,,,,,r15,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r15,
210
,,,,,,,,,,,,,,,,,,,,,,,,s215,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
211
,,r36,r36,,r36,r36,r36,r36,r36,r36,r36,,,r36,r36,r36,r36,r36,s216,r36,r36,r36,r36,,,,r36,r36,,,,,,,r36,r36,,,,,,,r36,r36,r36,r36,,r36,r36,r36,,,,r36,r36,r36,r36,r36,r36
212
,,,,,,,,,,,,r113,,,,,,,,,,,,r113,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s212,
213
,,r12,r12,,r12,r12,r12,r12,r12,r12,r12,,,r12,r12,r12,r12,r12,,r12,r12,r12,r12,,,,r12,r12,,,,,,,r12,r12,,,,,,,,,,,,,,,,,,r12,r12,r12,r12,r12,
214
,,r31,r31,,r31,r31,r31,r31,r31,r31,r31,,,r31,r31,r31,r31,r31,r31,r31,r31,r31,r31,,,,r31,r31,,,,,,,r31,r31,,,,,,,r31,r31,r31,r31,,r31,r31,r31,,,,r31,r31,r31,r31,r31,r31
215
,,s12,s13,,s14,s15,s16,s17,s18,s19,s20,,,s21,s22,s23,s24,s25,,s26,s27,s28,s29,,,,s30,,,,,,,,s31,s32,,,,,,,,,,,,,,,,,,s33,s34,s35,s36,s37,
216
,,s12,s13,,s14,s15,s16,s17,s18,s19,s20,,,s21,s22,s23,s24,s221,,s26,s27,s28,s29,,,,s30,,,,,,,,s31,s32,,,,,,,,,,,,,,,,,,s33,s34,s35,s36,s37,
217
,,r34,r34,,r34,r34,r34,r34,r34,r34,r34,,,r34,r34,r34,r34,r34,r34,r34,r34,r34,r34,,,,r34,r34,,,,,,,r34,r34,,,,,,,r34,r34,r34,r34,,r34,r34,r34,,,,r34,r34,r34,r34,r34,r34
218
,,r28,r28,,r28,r28,r28,r28,r28,r28,r28,,,r28,r28,r28,r28,r28,r28,r28,r28,r28,r28,,,,r28,r28,,,,,,,r28,r28,,,,,,,r28,r28,r28,r28,,r28,r28,r28,,,,r28,r28,r28,r28,r28,r28
219
,,s12,s13,,s14,s15,s16,s17,s18,s19,s20,,,s21,s22,s23,s24,s25,,s26,s27,s28,s29,,,,s30,s223,,,,,,,s31,s32,,,,,,,,,,,,,,,,,,s33,s34,s35,s36,s37,
220
,,r27,r27,,r27,r27,r27,r27,r27,r27,r27,,,r27,r27,r27,r27,r27,r27,r27,r27,r27,r27,,,,r27,r27,,,,,,,r27,r27,,,,,,,r27,r27,r27,r27,,r27,r27,r27,,,,r27,r27,r27,r27,r27,r27
221
,,,,,,,,,,,,,,,,,,,,,,,s224,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
222
,,r37,r37,,r37,r37,r37,r37,r37,r37,r37,,,r37,r37,r37,r37,r37,r37,r37,r37,r37,r37,,,,r37,r37,,,,,,,r37,r37,,,,,,,r37,r37,r37,r37,,r37,r37,r37,,,,r37,r37,r37,r37,r37,r37
223
,,r30,r30,,r30,r30,r30,r30,r30,r30,r30,,,r30,r30,r30,r30,r30,r30,r30,r30,r30,r30,,,,r30,r30,,,,,,,r30,r30,,,,,,,r30,r30,r30,r30,,r30,r30,r30,,,,r30,r30,r30,r30,r30,r30
224
,,,,,,,,,,,s20,,,s21,,,,,,,,s28,s72,,,,,,,,,,,,s31,s32,,,,,,,,s73,,,,,,s74,,,,s33,s34,s35,s36,s75,
225
,,,,,,,,,,,,,,,,,,,,,,,,s226,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
226
,,s12,s13,,s14,s15,s16,s17,s18,s19,s20,,,s21,s22,s23,s24,s25,,s26,s27,s28,s29,,,,s30,,,,,,,,s31,s32,,,,,,,,,,,,,,,,,,s33,s34,s35,s36,s37,
227
,,r35,r35,,r35,r35,r35,r35,r35,r35,r35,,,r35,r35,r35,r35,r35,r35,r35,r35,r35,r35,,,,r35,r35,,,,,,,r35,r35,,,,,,,r35,r35,r35,r35,,r35,r35,r35,,,,r35,r35,r35,r35,r35,r35
GOTO_TABLE
0
1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2,3,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
1
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
3
1,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,7,8,9,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
5
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,10,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
6
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,11,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
8
,6,12,13,,14,15,16,17,18,19,20,,,21,22,23,24,25,,26,27,28,29,,,,30,,,,,,,,31,32,,,,,,,,,,,,,,,,,,33,34,35,36,37,,,,,,38,39,40,41,,42,43,,,,44,45,46,47,48,49,50,51,52,53,54,,,,,,,55,56,,57,58,,,59,60,61,,,
10
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,62,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
11
,,,,,,,,,,,,,63,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
12
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,64,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
13
,,,,,,15,16,17,18,19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,65,,,,,,,,,,,,,,,,,,,,,,,66,52,53,54,,,,,,,,,,,,,,59,67,61,,,
14
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,68,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
21
,,,,,,15,16,17,18,19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,69,,,,,,,,,,,,,,,,,,,,,,,,,,70,,,,,,,,,,,,,,71,67,61,,,
22
,,,,,,,,,,,20,,,21,,,,,,,,28,72,,,,,,,,,,,,31,32,,,,,,,,73,,,,,,74,,,,33,34,35,36,75,,,,,,,,,,,,,,,,,76,77,47,78,49,79,,,,,80,81,82,83,84,85,86,56,87,57,58,,,,88,,,,
23
,,,,,,,,,,,,,,,,,,,,,,,89,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
24
,,,,,,,,,,,,,,,,,,,,,,,90,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
25
,,,,,,,,,,,,,,,,,,,,,,,91,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
26
,,,,,,,,,,,,,92,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
27
,,,,,,,,,,,20,,93,21,,,,,,,,28,72,,,,,,,,,,,,31,32,,,,,,,,73,,,,,,74,,,,33,34,35,36,75,,,,,,,,,,,,,,,,,76,77,47,78,49,79,,,,,94,81,82,83,84,85,86,56,87,57,58,,,,88,,,,
29
,,,,,,,,,,,20,,,21,,,,,,,,28,72,,,,,,,,,,,,31,32,,,,,,,,73,,,,,,74,,,,33,34,35,36,75,,,,,,,,,,,,,,,,,76,77,47,78,49,79,,,,,95,81,82,83,84,85,86,56,87,57,58,,,,88,,,,
30
,,12,13,,14,15,16,17,18,19,20,,,21,22,23,24,25,,26,27,28,29,,,,30,,,,,,,,31,32,,,,,,,,,,,,,,,,,,33,34,35,36,37,,,,,,,96,40,41,,42,43,,,,44,45,46,47,48,49,50,51,52,53,54,,,,,,,55,56,,57,58,,,59,60,61,,,
31
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,97,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
32
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,98,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
37
,,,,,,,,,,,,,,,,,,,,,,,99,,100,,,,,,,,,,101,102,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
39
,,12,13,,14,15,16,17,18,19,20,,,21,22,23,24,25,,26,27,28,29,,,,30,,,,,,,,31,32,,,,,,,,,,,,,,,,,,33,34,35,36,37,,,,,,,,40,41,,103,43,,,,44,45,46,47,48,49,50,51,52,53,54,,,,,,,55,56,,57,58,,,59,60,61,,,
44
,,,,,,,,,,,,,104,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
51
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,105,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
54
,,,,,,,,,,,,,,,,,,,,,,,,,106,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
55
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,107,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
57
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,108,109,110,111,112,113,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
58
,,,,,,,,,,,,,,,,,,,,,,,114,,115,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
64
,,,,,,,,,,,,,,,,,,,,,,,,,,,116,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
65
,,,,,,,,,,,,,,,,,,,,,,,,,100,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
66
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,117,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
68
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,118,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,119,
69
,,,,,,,,,,,,,,,,,,,,,,,120,,100,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
70
,,,,,,,,,,,,,,,,,,,,,,,,,106,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
72
,,,,,,15,16,17,18,19,20,,,21,,,,,,,,28,72,,,,,,,,,,,,31,32,,,,,,,,73,,,,,,74,,,,33,34,35,36,37,,,,,,,,,,,,,,,,,76,77,47,78,49,79,121,52,53,54,95,81,82,83,84,85,86,56,87,57,58,,,59,60,61,,,
73
,,,,,,,,,,,20,,,21,,,,,,,,28,72,,,,,,,,,,,,31,32,,,,,,,,73,,,,,,74,,,,33,34,35,36,122,,,,,,,,,,,,,,,,,,77,123,78,49,79,,,,,,,,,,124,86,56,87,,125,,,,88,,,,
74
,,,,,,,,,,,20,,,21,,,,,,,,28,72,,,,,,,,,,,,31,32,,,,,,,,73,,,,,,74,,,,33,34,35,36,122,,,,,,,,,,,,,,,,,,77,123,78,49,79,,,,,,,,,,126,86,56,87,,125,,,,88,,,,
75
,,,,,,,,,,,,,,,,,,,,,,,99,,100,,,,,,,,,,101,102,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
80
,,,,,,,,,,,,,127,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
82
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,128,129,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
83
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,130,131,132,133,134,135,136,137,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
84
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,138,139,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
86
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,107,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
89
,,,,,,,,,,,20,,,21,,,,,,,,28,72,,,,,,,,,,,,31,32,,,,,,,,73,,,,,,74,,,,33,34,35,36,75,,,,,,,,,,,,,,,,,76,77,47,78,49,79,,,,,140,81,82,83,84,85,86,56,87,57,58,,,,88,,,,
90
,,12,13,,14,15,16,17,18,19,20,,,21,22,23,24,25,,26,27,28,29,,,,30,,,,,,,,31,32,,,,,,,,,,,,,,,,,,33,34,35,36,37,,,,,,,,40,41,,141,43,,,,44,45,46,47,48,49,50,51,52,53,54,,,,,,,55,56,,57,58,,,59,60,61,,,
91
,,,,,,,,,,,20,,,21,,,,,,,,28,72,,,,,,,,,,,,31,32,,,,,,,,73,,,,,,74,,,,33,34,35,36,75,,,,,,,,,,,,,,,,,76,77,47,78,49,79,,,,,142,81,82,83,84,85,86,56,87,57,58,,,,88,,,,
94
,,,,,,,,,,,,,143,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
95
,,,,,,,,,,,,,,,,,,,,,,,,144,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
96
,,12,13,,14,15,16,17,18,19,20,,,21,22,23,24,25,,26,27,28,29,,,,30,145,,,,,,,31,32,,,,,,,,,,,,,,,,,,33,34,35,36,37,,,,,,,,40,41,,103,43,,,,44,45,46,47,48,49,50,51,52,53,54,,,,,,,55,56,,57,58,,,59,60,61,,,
99
,,,,,,,,,,,20,,,21,,,,,,,,28,72,,,,,,,,,,,,31,32,,,,,,,,73,,,,,,74,,,,33,34,35,36,75,,,,,,,,,,,,,,,,,76,77,47,78,49,79,,,,,146,81,82,83,84,85,86,56,87,57,58,,147,,88,,,,
100
,,,,,,,,,,,20,,,21,,,,,,,,28,72,,,,,,,,,,,,31,32,,,,,,,,73,,,,,,74,,,,33,34,35,36,122,,,,,,,,,,,,,,,,,,77,123,78,49,79,,,,,,,,148,84,149,86,56,87,,125,,,,88,,150,,
105
,,,,,,,,,,,,,,,,,,,,,,,151,,,,,,152,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
106
,,,,,,,,,,,20,,,21,,,,,,,,28,72,,,,,,,,,,,,31,32,,,,,,,,73,,,,,,74,,,,33,34,35,36,122,,,,,,,,,,,,,,,,,,77,123,78,49,79,,,,,,,,148,84,149,86,56,87,,125,,,,88,,153,,
107
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,154,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
108
,,,,,,,,,,,20,,,21,,,,,,,,28,72,,,,,,,,,,,,31,32,,,,,,,,73,,,,,,74,,,,33,34,35,36,75,,,,,,,,,,,,,,,,,76,77,47,78,49,79,,,,,155,81,82,83,84,85,86,56,87,57,58,,,,88,,,,
109
,,,,,,,,,,,20,,,21,,,,,,,,28,72,,,,,,,,,,,,31,32,,,,,,,,73,,,,,,74,,,,33,34,35,36,75,,,,,,,,,,,,,,,,,76,77,47,78,49,79,,,,,156,81,82,83,84,85,86,56,87,57,58,,,,88,,,,
110
,,,,,,,,,,,20,,,21,,,,,,,,28,72,,,,,,,,,,,,31,32,,,,,,,,73,,,,,,74,,,,33,34,35,36,75,,,,,,,,,,,,,,,,,76,77,47,78,49,79,,,,,157,81,82,83,84,85,86,56,87,57,58,,,,88,,,,
111
,,,,,,,,,,,20,,,21,,,,,,,,28,72,,,,,,,,,,,,31,32,,,,,,,,73,,,,,,74,,,,33,34,35,36,75,,,,,,,,,,,,,,,,,76,77,47,78,49,79,,,,,158,81,82,83,84,85,86,56,87,57,58,,,,88,,,,
112
,,,,,,,,,,,20,,,21,,,,,,,,28,72,,,,,,,,,,,,31,32,,,,,,,,73,,,,,,74,,,,33,34,35,36,75,,,,,,,,,,,,,,,,,76,77,47,78,49,79,,,,,159,81,82,83,84,85,86,56,87,57,58,,,,88,,,,
113
,,,,,,,,,,,20,,,21,,,,,,,,28,72,,,,,,,,,,,,31,32,,,,,,,,73,,,,,,74,,,,33,34,35,36,75,,,,,,,,,,,,,,,,,76,77,47,78,49,79,,,,,160,81,82,83,84,85,86,56,87,57,58,,,,88,,,,
114
,,,,,,,,,,,20,,,21,,,,,,,,28,72,,,,,,,,,,,,31,32,,,,,,,,73,,,,,,74,,,,33,34,35,36,75,,,,,,,,,,,,,,,,,76,77,47,78,49,79,,,,,146,81,82,83,84,85,86,56,87,57,58,,161,,88,,,,
115
,,,,,,,,,,,20,,,21,,,,,,,,28,72,,,,,,,,,,,,31,32,,,,,,,,73,,,,,,74,,,,33,34,35,36,122,,,,,,,,,,,,,,,,,,77,123,78,49,79,,,,,,,,162,84,149,86,56,87,,125,,,,88,,,,
116
,,12,13,,14,15,16,17,18,19,20,,,21,22,23,24,25,,26,27,28,29,,,,30,,,,,,,,31,32,,,,,,,,,,,,,,,,,,33,34,35,36,37,,,,,,,163,40,41,,42,43,,,,44,45,46,47,48,49,50,51,52,53,54,,,,,,,55,56,,57,58,,,59,60,61,,,
117
,,,,,,,,,,,,,,,,,,,,,,,164,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
118
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,165,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
119
,,,,,,,,,,,,,,,,,,,,,,,,,,,166,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
120
,,,,,,,,,,,,,,,,,,,,,,,,167,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
121
,,,,,,,,,,,,,,,,,,,,,,,,168,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
122
,,,,,,,,,,,,,,,,,,,,,,,99,,100,,,,,,,,,,101,102,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
125
,,,,,,,,,,,,,,,,,,,,,,,114,,115,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
128
,,,,,,,,,,,20,,,21,,,,,,,,28,72,,,,,,,,,,,,31,32,,,,,,,,73,,,,,,74,,,,33,34,35,36,122,,,,,,,,,,,,,,,,,,77,123,78,49,79,,,,,,,169,170,84,85,86,56,87,,125,,,,88,,,,
129
,,,,,,,,,,,20,,,21,,,,,,,,28,72,,,,,,,,,,,,31,32,,,,,,,,73,,,,,,74,,,,33,34,35,36,122,,,,,,,,,,,,,,,,,,77,123,78,49,79,,,,,,,171,170,84,85,86,56,87,,125,,,,88,,,,
130
,,,,,,,,,,,20,,,21,,,,,,,,28,72,,,,,,,,,,,,31,32,,,,,,,,73,,,,,,74,,,,33,34,35,36,122,,,,,,,,,,,,,,,,,,77,123,78,49,79,,,,,,,,172,84,149,86,56,87,,125,,,,88,,,,
131
,,,,,,,,,,,20,,,21,,,,,,,,28,72,,,,,,,,,,,,31,32,,,,,,,,73,,,,,,74,,,,33,34,35,36,122,,,,,,,,,,,,,,,,,,77,123,78,49,79,,,,,,,,173,84,149,86,56,87,,125,,,,88,,,,
132
,,,,,,,,,,,20,,,21,,,,,,,,28,72,,,,,,,,,,,,31,32,,,,,,,,73,,,,,,74,,,,33,34,35,36,122,,,,,,,,,,,,,,,,,,77,123,78,49,79,,,,,,,,174,84,149,86,56,87,,125,,,,88,,,,
133
,,,,,,,,,,,20,,,21,,,,,,,,28,72,,,,,,,,,,,,31,32,,,,,,,,73,,,,,,74,,,,33,34,35,36,122,,,,,,,,,,,,,,,,,,77,123,78,49,79,,,,,,,,175,84,149,86,56,87,,125,,,,88,,,,
134
,,,,,,,,,,,20,,,21,,,,,,,,28,72,,,,,,,,,,,,31,32,,,,,,,,73,,,,,,74,,,,33,34,35,36,122,,,,,,,,,,,,,,,,,,77,123,78,49,79,,,,,,,,176,84,149,86,56,87,,125,,,,88,,,,
135
,,,,,,,,,,,20,,,21,,,,,,,,28,72,,,,,,,,,,,,31,32,,,,,,,,73,,,,,,74,,,,33,34,35,36,122,,,,,,,,,,,,,,,,,,77,123,78,49,79,,,,,,,,177,84,149,86,56,87,,125,,,,88,,,,
136
,,,,,,,,,,,20,,,21,,,,,,,,28,72,,,,,,,,,,,,31,32,,,,,,,,73,,,,,,74,,,,33,34,35,36,122,,,,,,,,,,,,,,,,,,77,123,78,49,79,,,,,,,,,178,149,86,56,87,,125,,,,88,,,,
137
,,,,,,,,,,,20,,,21,,,,,,,,28,72,,,,,,,,,,,,31,32,,,,,,,,73,,,,,,74,,,,33,34,35,36,122,,,,,,,,,,,,,,,,,,77,123,78,49,79,,,,,,,,,179,149,86,56,87,,125,,,,88,,,,
138
,,,,,,,,,,,20,,,21,,,,,,,,28,72,,,,,,,,,,,,31,32,,,,,,,,73,,,,,,74,,,,33,34,35,36,122,,,,,,,,,,,,,,,,,,77,123,78,49,79,,,,,,,,,,180,86,56,87,,125,,,,88,,,,
139
,,,,,,,,,,,20,,,21,,,,,,,,28,72,,,,,,,,,,,,31,32,,,,,,,,73,,,,,,74,,,,33,34,35,36,122,,,,,,,,,,,,,,,,,,77,123,78,49,79,,,,,,,,,,181,86,56,87,,125,,,,88,,,,
140
,,,,,,,,,,,,,,,,,,,,,,,,182,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
141
,,,,,,,,,,,20,,,21,,,,,,,,28,72,,,,,,,,,,,,31,32,,,,,,,,73,,,,,,74,,,,33,34,35,36,122,,,,,,,,,,,,,,,,,,77,123,78,49,79,,,,,,,183,170,84,85,86,56,87,,125,,,,88,,,,
142
,,,,,,,,,,,,,,,,,,,,,,,,184,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
147
,,,,,,,,,,,,185,,,,,,,,,,,,186,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
148
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,136,137,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
150
,,,,,,,,,,,,,,,,,,,,,,,,,,187,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
151
,,,,,,15,16,17,18,19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,65,,,,,,,,,,,,,,,,,,,,,,,188,52,53,54,,,,,,,,,,,,189,,59,67,61,,,
152
,,,,,,,,,,,20,,,21,,,,,,,,28,72,,,,,,,,,,,,31,32,,,,,,,,73,,,,,,74,,,,33,34,35,36,75,,,,,,,,,,,,,,,,,76,77,47,78,49,79,,,,,190,81,82,83,84,85,86,56,87,57,58,,,,88,,,,
153
,,,,,,,,,,,,,,,,,,,,,,,,,,191,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
161
,,,,,,,,,,,,185,,,,,,,,,,,,192,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
162
,,,,,,,,,,,,,,,,,,,,,,,,,,193,,,,,,,,,,,,,,,,,136,137,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
163
,,12,13,,14,15,16,17,18,19,20,,,21,22,23,24,25,,26,27,28,29,,,,30,194,,,,,,,31,32,,,,,,,,,,,,,,,,,,33,34,35,36,37,,,,,,,,40,41,,103,43,,,,44,45,46,47,48,49,50,51,52,53,54,,,,,,,55,56,,57,58,,,59,60,61,,,
164
,,,,,,15,16,17,18,19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,65,,,,,,,,,,,,,,,,,,,,,,,188,52,53,54,,,,,,,,,,,,195,,59,67,61,,,
166
,,,13,,14,15,16,17,18,19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,65,,,,,,,,,,196,,197,,,,,,,,,,,51,52,53,54,,,,,,,,,,,,,,59,67,61,,,
168
,,,,,,,,,,,20,,,21,,,,,,,,28,72,,,,,,,,,,,,31,32,,,,,,,,73,,,,,,74,,,,33,34,35,36,122,,,,,,,,,,,,,,,,,,77,123,78,49,79,,,,,,,,,,198,86,56,87,,125,,,,88,,,,
169
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,128,129,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
170
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,130,131,132,133,134,135,136,137,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
171
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,128,129,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
172
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,136,137,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
173
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,136,137,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
174
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,136,137,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
175
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,136,137,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
176
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,136,137,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
177
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,136,137,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
178
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,138,139,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
179
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,138,139,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
182
,,12,13,,14,15,16,17,18,19,20,,,21,22,23,24,25,,26,27,28,29,,,,30,,,,,,,,31,32,,,,,,,,,,,,,,,,,,33,34,35,36,37,,,,,,,,40,41,,199,43,,,,44,45,46,47,48,49,50,51,52,53,54,,,,,,,55,56,,57,58,,,59,60,61,,,
183
,,,,,,,,,,,,,200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,128,129,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
184
,,12,13,,14,15,16,17,18,19,20,,,21,22,23,24,25,,26,27,28,29,,,,30,,,,,,,,31,32,,,,,,,,,,,,,,,,,,33,34,35,36,37,,,,,,,,40,41,,201,43,,,,44,45,46,47,48,49,50,51,52,53,54,,,,,,,55,56,,57,58,,,59,60,61,,,
185
,,,,,,,,,,,20,,,21,,,,,,,,28,72,,,,,,,,,,,,31,32,,,,,,,,73,,,,,,74,,,,33,34,35,36,75,,,,,,,,,,,,,,,,,76,77,47,78,49,79,,,,,202,81,82,83,84,85,86,56,87,57,58,,,,88,,,,
188
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,203,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
189
,,,,,,,,,,,,204,,,,,,,,,,,,205,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
190
,,,,,,,,,,,,,206,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
195
,,,,,,,,,,,,204,,,,,,,,,,,,207,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
196
,,,13,,14,15,16,17,18,19,,,,,,,,,,,,,,,,,,208,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,65,,,,,,,,,,,,209,,,,,,,,,,,51,52,53,54,,,,,,,,,,,,,,59,67,61,,,
200
,,,,,,,,,,,20,,,21,,,,,,,,28,29,,,,,,,,,,,,31,32,,,,,,,,,,,,,,,,,,33,34,35,36,75,,,,,,,,,,,,,,,,210,45,46,47,48,49,50,,,,,,,,,,,55,56,,57,58,,,,88,,,,
201
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,211,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
204
,,,,,,15,16,17,18,19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,65,,,,,,,,,,,,,,,,,,,,,,,212,52,53,54,,,,,,,,,,,,,,59,67,61,,,
205
,,,,,,,,,,,,,,,,,,,,,,,,,,,213,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
207
,,,,,,,,,,,,,214,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
210
,,,,,,,,,,,,,,,,,,,,,,,,215,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
211
,,,,,,,,,,,,,,,,,,,216,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,217,218,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
212
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,212,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
213
,,12,13,,14,15,16,17,18,19,20,,,21,22,23,24,25,,26,27,28,29,,,,30,,,,,,,,31,32,,,,,,,,,,,,,,,,,,33,34,35,36,37,,,,,,,219,40,41,,42,43,,,,44,45,46,47,48,49,50,51,52,53,54,,,,,,,55,56,,57,58,,,59,60,61,,,
215
,,12,13,,14,15,16,17,18,19,20,,,21,22,23,24,25,,26,27,28,29,,,,30,,,,,,,,31,32,,,,,,,,,,,,,,,,,,33,34,35,36,37,,,,,,,,40,41,,220,43,,,,44,45,46,47,48,49,50,51,52,53,54,,,,,,,55,56,,57,58,,,59,60,61,,,
216
,,12,13,,14,15,16,17,18,19,20,,,21,22,23,24,221,,26,27,28,29,,,,30,,,,,,,,31,32,,,,,,,,,,,,,,,,,,33,34,35,36,37,,,,,,,,40,41,,222,43,,,,44,45,46,47,48,49,50,51,52,53,54,,,,,,,55,56,,57,58,,,59,60,61,,,
219
,,12,13,,14,15,16,17,18,19,20,,,21,22,23,24,25,,26,27,28,29,,,,30,223,,,,,,,31,32,,,,,,,,,,,,,,,,,,33,34,35,36,37,,,,,,,,40,41,,103,43,,,,44,45,46,47,48,49,50,51,52,53,54,,,,,,,55,56,,57,58,,,59,60,61,,,
221
,,,,,,,,,,,,,,,,,,,,,,,224,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
224
,,,,,,,,,,,20,,,21,,,,,,,,28,72,,,,,,,,,,,,31,32,,,,,,,,73,,,,,,74,,,,33,34,35,36,75,,,,,,,,,,,,,,,,,76,77,47,78,49,79,,,,,225,81,82,83,84,85,86,56,87,57,58,,,,88,,,,
225
,,,,,,,,,,,,,,,,,,,,,,,,226,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
226
,,12,13,,14,15,16,17,18,19,20,,,21,22,23,24,25,,26,27,28,29,,,,30,,,,,,,,31,32,,,,,,,,,,,,,,,,,,33,34,35,36,37,,,,,,,,40,41,,227,43,,,,44,45,46,47,48,49,50,51,52,53,54,,,,,,,55,56,,57,58,,,59,60,61,,,
227
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,211,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ENDTABLE
