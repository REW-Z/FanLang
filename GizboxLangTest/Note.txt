
**** 中间代码相关 ****    

REW：运算/赋值的分量允许多层嵌套是必要的。（才能支持大型的嵌套的结构体高效运算）（临时复制-存回策略对于大型结构体会消耗大量性能）        

参考：给不同的东西赋值，LUA和C#都使用不同的中间代码指令：    

LUA中：    
变量赋值：
全局变量：SETGLOBAL
局部变量：SETLOCAL
对象成员赋值： SETTABLE
数组元素赋值：
单个索引：SETTABLE
多个索引：SETLIST

C#中：
给变量赋值使用 stloc 指令。
给对象成员赋值使用 stfld 指令。
给数组元素赋值使用 stelem 系列指令。  

REW：偏底层中间代码应该使用地址偏移（成员和元素）      



******* AOT ***********  

使用LLVM的原因：  
1. 编译器后端和编译器理论不搭边，很多内容跨学科。    
2. 各种不同的平台和硬件架构。自己弄很麻烦。    
3. Rust也是用LLVM。      




******* Current *******      

（DONE）常量指针跨单元。    

（DONE）IL序列化不包含其他库。（读取时初始化）  

Unity适配。    

******* Future *******      

泛型/模板。  泛型方案1：模板(基本类型) + 擦除(类对象)  

操作符重载。  应该在代码生成层面实现而不是解释器层面。        

******* 优化修改 *******    

执行过程避免字符串连接。    

