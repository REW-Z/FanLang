***Raw Terminals***
import
using
namespace
extern
var
class
void
bool
int
float
double
char
string
null
,
;
new
delete
while
for
if
else
break
return
this
(
)
[
]
{
}
=
+=
-=
*=
/=
%=
--
++
==
!=
<=
>=
>
<
+
-
*
/
%
||
&&
!
:
?
.
LITBOOL
LITINT
LITFLOAT
LITDOUBLE
LITCHAR
LITSTRING
ID
***Raw Nonterminals***
S
importations
importation
namespaceusings
namespaceusing
statements
namespaceblock
statementblock
declstatements
stmt
declstmt
elifclauselist
elifclause
elseclause
stmtexpr
assign
call
indexaccess
newobj
newarr
incdec
type
stype
arrtype
primitive
expr
nexpr
bexpr
aexpr
term
factor
primary
lit
cast
lvalue
memberaccess
params
args
stypeBracket
idBracket
primitiveBracket
optidx
inherit
***Raw Productions***
S -> importations namespaceusings statements
importations -> importations importation
importations -> importation
importations -> ε
importation -> import < LITSTRING >
namespaceusings -> namespaceusings namespaceusing
namespaceusings -> namespaceusing
namespaceusings -> ε
namespaceusing -> using ID ;
statements -> statements stmt
statements -> stmt
statements -> ε
namespaceblock -> namespace ID { statements }
statementblock -> { statements }
declstatements -> declstatements declstmt
declstatements -> declstmt
declstatements -> ε
stmt -> namespaceblock
stmt -> statementblock
stmt -> declstmt
stmt -> stmtexpr ;
stmt -> break ;
stmt -> return expr ;
stmt -> return ;
stmt -> delete expr ;
stmt -> while ( expr ) stmt
stmt -> for ( stmt bexpr ; stmtexpr ) stmt
stmt -> if ( expr ) stmt elifclauselist elseclause
declstmt -> type ID = expr ;
declstmt -> type ID ( params ) { statements }
declstmt -> extern type ID ( params ) ;
declstmt -> class ID inherit { declstatements }
elifclauselist -> ε
elifclauselist -> elifclauselist elifclause
elifclause -> else if ( expr ) stmt
elseclause -> ε
elseclause -> else stmt
assign -> lvalue = expr
assign -> lvalue += expr
assign -> lvalue -= expr
assign -> lvalue *= expr
assign -> lvalue /= expr
assign -> lvalue %= expr
lvalue -> ID
lvalue -> memberaccess
lvalue -> indexaccess
type -> arrtype
type -> stype
arrtype -> stypeBracket
stype -> primitive
stype -> ID
primitive -> void
primitive -> bool
primitive -> int
primitive -> float
primitive -> double
primitive -> char
primitive -> string
expr -> assign
expr -> nexpr
stmtexpr -> assign
stmtexpr -> call
stmtexpr -> incdec
stmtexpr -> newobj
nexpr -> bexpr
nexpr -> aexpr
bexpr -> bexpr && bexpr
bexpr -> bexpr || bexpr
bexpr -> aexpr > aexpr
bexpr -> aexpr < aexpr
bexpr -> aexpr >= aexpr
bexpr -> aexpr <= aexpr
bexpr -> aexpr == aexpr
bexpr -> aexpr != aexpr
bexpr -> factor
aexpr -> aexpr + term
aexpr -> aexpr - term
aexpr -> term
term -> term * factor
term -> term / factor
term -> factor
factor -> incdec
factor -> ! factor
factor -> - factor
factor -> cast
factor -> primary
primary -> ( expr )
primary -> ID
primary -> this
primary -> memberaccess
primary -> indexaccess
primary -> call
primary -> newobj
primary -> newarr
primary -> lit
incdec -> ++ ID
incdec -> -- ID
incdec -> ID ++
incdec -> ID --
call -> ID ( args )
call -> memberaccess ( args )
indexaccess -> idBracket
indexaccess -> memberaccess [ aexpr ]
newobj -> new ID ( )
newarr -> new stypeBracket
cast -> ( type ) factor
memberaccess -> primary . ID
lit -> LITBOOL
lit -> LITINT
lit -> LITFLOAT
lit -> LITDOUBLE
lit -> LITCHAR
lit -> LITSTRING
lit -> null
params -> ε
params -> type ID
params -> params , type ID
args -> ε
args -> expr
args -> args , expr
stypeBracket -> idBracket
stypeBracket -> primitiveBracket
idBracket -> ID [ optidx ]
primitiveBracket -> primitive [ optidx ]
optidx -> aexpr
optidx -> ε
inherit -> : ID
inherit -> ε



***Data***
***Terminals***
import
using
namespace
extern
var
class
void
bool
int
float
double
char
string
null
,
;
new
delete
while
for
if
else
break
return
this
(
)
[
]
{
}
=
+=
-=
*=
/=
%=
--
++
==
!=
<=
>=
>
<
+
-
*
/
%
||
&&
!
:
?
.
LITBOOL
LITINT
LITFLOAT
LITDOUBLE
LITCHAR
LITSTRING
ID
$
***Nonterminals***
S
importations
importation
namespaceusings
namespaceusing
statements
namespaceblock
statementblock
declstatements
stmt
declstmt
elifclauselist
elifclause
elseclause
stmtexpr
assign
call
indexaccess
newobj
newarr
incdec
type
stype
arrtype
primitive
expr
nexpr
bexpr
aexpr
term
factor
primary
lit
cast
lvalue
memberaccess
params
args
stypeBracket
idBracket
primitiveBracket
optidx
inherit
S'
***Productions***
S -> importations namespaceusings statements
importations -> importations importation
importations -> importation
importations -> ε
importation -> import < LITSTRING >
namespaceusings -> namespaceusings namespaceusing
namespaceusings -> namespaceusing
namespaceusings -> ε
namespaceusing -> using ID ;
statements -> statements stmt
statements -> stmt
statements -> ε
namespaceblock -> namespace ID { statements }
statementblock -> { statements }
declstatements -> declstatements declstmt
declstatements -> declstmt
declstatements -> ε
stmt -> namespaceblock
stmt -> statementblock
stmt -> declstmt
stmt -> stmtexpr ;
stmt -> break ;
stmt -> return expr ;
stmt -> return ;
stmt -> delete expr ;
stmt -> while ( expr ) stmt
stmt -> for ( stmt bexpr ; stmtexpr ) stmt
stmt -> if ( expr ) stmt elifclauselist elseclause
declstmt -> type ID = expr ;
declstmt -> type ID ( params ) { statements }
declstmt -> extern type ID ( params ) ;
declstmt -> class ID inherit { declstatements }
elifclauselist -> ε
elifclauselist -> elifclauselist elifclause
elifclause -> else if ( expr ) stmt
elseclause -> ε
elseclause -> else stmt
assign -> lvalue = expr
assign -> lvalue += expr
assign -> lvalue -= expr
assign -> lvalue *= expr
assign -> lvalue /= expr
assign -> lvalue %= expr
lvalue -> ID
lvalue -> memberaccess
lvalue -> indexaccess
type -> arrtype
type -> stype
arrtype -> stypeBracket
stype -> primitive
stype -> ID
primitive -> void
primitive -> bool
primitive -> int
primitive -> float
primitive -> double
primitive -> char
primitive -> string
expr -> assign
expr -> nexpr
stmtexpr -> assign
stmtexpr -> call
stmtexpr -> incdec
stmtexpr -> newobj
nexpr -> bexpr
nexpr -> aexpr
bexpr -> bexpr && bexpr
bexpr -> bexpr || bexpr
bexpr -> aexpr > aexpr
bexpr -> aexpr < aexpr
bexpr -> aexpr >= aexpr
bexpr -> aexpr <= aexpr
bexpr -> aexpr == aexpr
bexpr -> aexpr != aexpr
bexpr -> factor
aexpr -> aexpr + term
aexpr -> aexpr - term
aexpr -> term
term -> term * factor
term -> term / factor
term -> factor
factor -> incdec
factor -> ! factor
factor -> - factor
factor -> cast
factor -> primary
primary -> ( expr )
primary -> ID
primary -> this
primary -> memberaccess
primary -> indexaccess
primary -> call
primary -> newobj
primary -> newarr
primary -> lit
incdec -> ++ ID
incdec -> -- ID
incdec -> ID ++
incdec -> ID --
call -> ID ( args )
call -> memberaccess ( args )
indexaccess -> idBracket
indexaccess -> memberaccess [ aexpr ]
newobj -> new ID ( )
newarr -> new stypeBracket
cast -> ( type ) factor
memberaccess -> primary . ID
lit -> LITBOOL
lit -> LITINT
lit -> LITFLOAT
lit -> LITDOUBLE
lit -> LITCHAR
lit -> LITSTRING
lit -> null
params -> ε
params -> type ID
params -> params , type ID
args -> ε
args -> expr
args -> args , expr
stypeBracket -> idBracket
stypeBracket -> primitiveBracket
idBracket -> ID [ optidx ]
primitiveBracket -> primitive [ optidx ]
optidx -> aexpr
optidx -> ε
inherit -> : ID
inherit -> ε
S' -> S
***States***
***State***
0
I_0
***Set***
S' -> · S, $
S -> · importations namespaceusings statements, $
importations -> · importations importation, using
importations -> · importations importation, namespace
importations -> · importations importation, {
importations -> · importations importation, ID
importations -> · importations importation, void
importations -> · importations importation, bool
importations -> · importations importation, int
importations -> · importations importation, float
importations -> · importations importation, double
importations -> · importations importation, char
importations -> · importations importation, string
importations -> · importations importation, extern
importations -> · importations importation, class
importations -> · importations importation, (
importations -> · importations importation, this
importations -> · importations importation, new
importations -> · importations importation, LITBOOL
importations -> · importations importation, LITINT
importations -> · importations importation, LITFLOAT
importations -> · importations importation, LITDOUBLE
importations -> · importations importation, LITCHAR
importations -> · importations importation, LITSTRING
importations -> · importations importation, null
importations -> · importations importation, ++
importations -> · importations importation, --
importations -> · importations importation, break
importations -> · importations importation, return
importations -> · importations importation, delete
importations -> · importations importation, while
importations -> · importations importation, for
importations -> · importations importation, if
importations -> · importations importation, $
importations -> · importation, using
importations -> · importation, namespace
importations -> · importation, {
importations -> · importation, ID
importations -> · importation, void
importations -> · importation, bool
importations -> · importation, int
importations -> · importation, float
importations -> · importation, double
importations -> · importation, char
importations -> · importation, string
importations -> · importation, extern
importations -> · importation, class
importations -> · importation, (
importations -> · importation, this
importations -> · importation, new
importations -> · importation, LITBOOL
importations -> · importation, LITINT
importations -> · importation, LITFLOAT
importations -> · importation, LITDOUBLE
importations -> · importation, LITCHAR
importations -> · importation, LITSTRING
importations -> · importation, null
importations -> · importation, ++
importations -> · importation, --
importations -> · importation, break
importations -> · importation, return
importations -> · importation, delete
importations -> · importation, while
importations -> · importation, for
importations -> · importation, if
importations -> · importation, $
importations -> ·, using
importations -> ·, namespace
importations -> ·, {
importations -> ·, ID
importations -> ·, void
importations -> ·, bool
importations -> ·, int
importations -> ·, float
importations -> ·, double
importations -> ·, char
importations -> ·, string
importations -> ·, extern
importations -> ·, class
importations -> ·, (
importations -> ·, this
importations -> ·, new
importations -> ·, LITBOOL
importations -> ·, LITINT
importations -> ·, LITFLOAT
importations -> ·, LITDOUBLE
importations -> ·, LITCHAR
importations -> ·, LITSTRING
importations -> ·, null
importations -> ·, ++
importations -> ·, --
importations -> ·, break
importations -> ·, return
importations -> ·, delete
importations -> ·, while
importations -> ·, for
importations -> ·, if
importations -> ·, $
importations -> · importations importation, import
importations -> · importation, import
importations -> ·, import
importation -> · import < LITSTRING >, using
importation -> · import < LITSTRING >, namespace
importation -> · import < LITSTRING >, {
importation -> · import < LITSTRING >, ID
importation -> · import < LITSTRING >, void
importation -> · import < LITSTRING >, bool
importation -> · import < LITSTRING >, int
importation -> · import < LITSTRING >, float
importation -> · import < LITSTRING >, double
importation -> · import < LITSTRING >, char
importation -> · import < LITSTRING >, string
importation -> · import < LITSTRING >, extern
importation -> · import < LITSTRING >, class
importation -> · import < LITSTRING >, (
importation -> · import < LITSTRING >, this
importation -> · import < LITSTRING >, new
importation -> · import < LITSTRING >, LITBOOL
importation -> · import < LITSTRING >, LITINT
importation -> · import < LITSTRING >, LITFLOAT
importation -> · import < LITSTRING >, LITDOUBLE
importation -> · import < LITSTRING >, LITCHAR
importation -> · import < LITSTRING >, LITSTRING
importation -> · import < LITSTRING >, null
importation -> · import < LITSTRING >, ++
importation -> · import < LITSTRING >, --
importation -> · import < LITSTRING >, break
importation -> · import < LITSTRING >, return
importation -> · import < LITSTRING >, delete
importation -> · import < LITSTRING >, while
importation -> · import < LITSTRING >, for
importation -> · import < LITSTRING >, if
importation -> · import < LITSTRING >, $
importation -> · import < LITSTRING >, import
***EndSet***
***EndState***
***State***
1
I_1
***Set***
importation -> import · < LITSTRING >, using
importation -> import · < LITSTRING >, namespace
importation -> import · < LITSTRING >, {
importation -> import · < LITSTRING >, ID
importation -> import · < LITSTRING >, void
importation -> import · < LITSTRING >, bool
importation -> import · < LITSTRING >, int
importation -> import · < LITSTRING >, float
importation -> import · < LITSTRING >, double
importation -> import · < LITSTRING >, char
importation -> import · < LITSTRING >, string
importation -> import · < LITSTRING >, extern
importation -> import · < LITSTRING >, class
importation -> import · < LITSTRING >, (
importation -> import · < LITSTRING >, this
importation -> import · < LITSTRING >, new
importation -> import · < LITSTRING >, LITBOOL
importation -> import · < LITSTRING >, LITINT
importation -> import · < LITSTRING >, LITFLOAT
importation -> import · < LITSTRING >, LITDOUBLE
importation -> import · < LITSTRING >, LITCHAR
importation -> import · < LITSTRING >, LITSTRING
importation -> import · < LITSTRING >, null
importation -> import · < LITSTRING >, ++
importation -> import · < LITSTRING >, --
importation -> import · < LITSTRING >, break
importation -> import · < LITSTRING >, return
importation -> import · < LITSTRING >, delete
importation -> import · < LITSTRING >, while
importation -> import · < LITSTRING >, for
importation -> import · < LITSTRING >, if
importation -> import · < LITSTRING >, $
importation -> import · < LITSTRING >, import
***EndSet***
***EndState***
***State***
2
I_2
***Set***
S' -> S ·, $
***EndSet***
***EndState***
***State***
3
I_3
***Set***
S -> importations · namespaceusings statements, $
importations -> importations · importation, using
importations -> importations · importation, namespace
importations -> importations · importation, {
importations -> importations · importation, ID
importations -> importations · importation, void
importations -> importations · importation, bool
importations -> importations · importation, int
importations -> importations · importation, float
importations -> importations · importation, double
importations -> importations · importation, char
importations -> importations · importation, string
importations -> importations · importation, extern
importations -> importations · importation, class
importations -> importations · importation, (
importations -> importations · importation, this
importations -> importations · importation, new
importations -> importations · importation, LITBOOL
importations -> importations · importation, LITINT
importations -> importations · importation, LITFLOAT
importations -> importations · importation, LITDOUBLE
importations -> importations · importation, LITCHAR
importations -> importations · importation, LITSTRING
importations -> importations · importation, null
importations -> importations · importation, ++
importations -> importations · importation, --
importations -> importations · importation, break
importations -> importations · importation, return
importations -> importations · importation, delete
importations -> importations · importation, while
importations -> importations · importation, for
importations -> importations · importation, if
importations -> importations · importation, $
importations -> importations · importation, import
namespaceusings -> · namespaceusings namespaceusing, namespace
namespaceusings -> · namespaceusings namespaceusing, {
namespaceusings -> · namespaceusings namespaceusing, ID
namespaceusings -> · namespaceusings namespaceusing, void
namespaceusings -> · namespaceusings namespaceusing, bool
namespaceusings -> · namespaceusings namespaceusing, int
namespaceusings -> · namespaceusings namespaceusing, float
namespaceusings -> · namespaceusings namespaceusing, double
namespaceusings -> · namespaceusings namespaceusing, char
namespaceusings -> · namespaceusings namespaceusing, string
namespaceusings -> · namespaceusings namespaceusing, extern
namespaceusings -> · namespaceusings namespaceusing, class
namespaceusings -> · namespaceusings namespaceusing, (
namespaceusings -> · namespaceusings namespaceusing, this
namespaceusings -> · namespaceusings namespaceusing, new
namespaceusings -> · namespaceusings namespaceusing, LITBOOL
namespaceusings -> · namespaceusings namespaceusing, LITINT
namespaceusings -> · namespaceusings namespaceusing, LITFLOAT
namespaceusings -> · namespaceusings namespaceusing, LITDOUBLE
namespaceusings -> · namespaceusings namespaceusing, LITCHAR
namespaceusings -> · namespaceusings namespaceusing, LITSTRING
namespaceusings -> · namespaceusings namespaceusing, null
namespaceusings -> · namespaceusings namespaceusing, ++
namespaceusings -> · namespaceusings namespaceusing, --
namespaceusings -> · namespaceusings namespaceusing, break
namespaceusings -> · namespaceusings namespaceusing, return
namespaceusings -> · namespaceusings namespaceusing, delete
namespaceusings -> · namespaceusings namespaceusing, while
namespaceusings -> · namespaceusings namespaceusing, for
namespaceusings -> · namespaceusings namespaceusing, if
namespaceusings -> · namespaceusings namespaceusing, $
namespaceusings -> · namespaceusing, namespace
namespaceusings -> · namespaceusing, {
namespaceusings -> · namespaceusing, ID
namespaceusings -> · namespaceusing, void
namespaceusings -> · namespaceusing, bool
namespaceusings -> · namespaceusing, int
namespaceusings -> · namespaceusing, float
namespaceusings -> · namespaceusing, double
namespaceusings -> · namespaceusing, char
namespaceusings -> · namespaceusing, string
namespaceusings -> · namespaceusing, extern
namespaceusings -> · namespaceusing, class
namespaceusings -> · namespaceusing, (
namespaceusings -> · namespaceusing, this
namespaceusings -> · namespaceusing, new
namespaceusings -> · namespaceusing, LITBOOL
namespaceusings -> · namespaceusing, LITINT
namespaceusings -> · namespaceusing, LITFLOAT
namespaceusings -> · namespaceusing, LITDOUBLE
namespaceusings -> · namespaceusing, LITCHAR
namespaceusings -> · namespaceusing, LITSTRING
namespaceusings -> · namespaceusing, null
namespaceusings -> · namespaceusing, ++
namespaceusings -> · namespaceusing, --
namespaceusings -> · namespaceusing, break
namespaceusings -> · namespaceusing, return
namespaceusings -> · namespaceusing, delete
namespaceusings -> · namespaceusing, while
namespaceusings -> · namespaceusing, for
namespaceusings -> · namespaceusing, if
namespaceusings -> · namespaceusing, $
namespaceusings -> ·, namespace
namespaceusings -> ·, {
namespaceusings -> ·, ID
namespaceusings -> ·, void
namespaceusings -> ·, bool
namespaceusings -> ·, int
namespaceusings -> ·, float
namespaceusings -> ·, double
namespaceusings -> ·, char
namespaceusings -> ·, string
namespaceusings -> ·, extern
namespaceusings -> ·, class
namespaceusings -> ·, (
namespaceusings -> ·, this
namespaceusings -> ·, new
namespaceusings -> ·, LITBOOL
namespaceusings -> ·, LITINT
namespaceusings -> ·, LITFLOAT
namespaceusings -> ·, LITDOUBLE
namespaceusings -> ·, LITCHAR
namespaceusings -> ·, LITSTRING
namespaceusings -> ·, null
namespaceusings -> ·, ++
namespaceusings -> ·, --
namespaceusings -> ·, break
namespaceusings -> ·, return
namespaceusings -> ·, delete
namespaceusings -> ·, while
namespaceusings -> ·, for
namespaceusings -> ·, if
namespaceusings -> ·, $
importation -> · import < LITSTRING >, using
importation -> · import < LITSTRING >, namespace
importation -> · import < LITSTRING >, {
importation -> · import < LITSTRING >, ID
importation -> · import < LITSTRING >, void
importation -> · import < LITSTRING >, bool
importation -> · import < LITSTRING >, int
importation -> · import < LITSTRING >, float
importation -> · import < LITSTRING >, double
importation -> · import < LITSTRING >, char
importation -> · import < LITSTRING >, string
importation -> · import < LITSTRING >, extern
importation -> · import < LITSTRING >, class
importation -> · import < LITSTRING >, (
importation -> · import < LITSTRING >, this
importation -> · import < LITSTRING >, new
importation -> · import < LITSTRING >, LITBOOL
importation -> · import < LITSTRING >, LITINT
importation -> · import < LITSTRING >, LITFLOAT
importation -> · import < LITSTRING >, LITDOUBLE
importation -> · import < LITSTRING >, LITCHAR
importation -> · import < LITSTRING >, LITSTRING
importation -> · import < LITSTRING >, null
importation -> · import < LITSTRING >, ++
importation -> · import < LITSTRING >, --
importation -> · import < LITSTRING >, break
importation -> · import < LITSTRING >, return
importation -> · import < LITSTRING >, delete
importation -> · import < LITSTRING >, while
importation -> · import < LITSTRING >, for
importation -> · import < LITSTRING >, if
importation -> · import < LITSTRING >, $
importation -> · import < LITSTRING >, import
namespaceusings -> · namespaceusings namespaceusing, using
namespaceusings -> · namespaceusing, using
namespaceusings -> ·, using
namespaceusing -> · using ID ;, namespace
namespaceusing -> · using ID ;, {
namespaceusing -> · using ID ;, ID
namespaceusing -> · using ID ;, void
namespaceusing -> · using ID ;, bool
namespaceusing -> · using ID ;, int
namespaceusing -> · using ID ;, float
namespaceusing -> · using ID ;, double
namespaceusing -> · using ID ;, char
namespaceusing -> · using ID ;, string
namespaceusing -> · using ID ;, extern
namespaceusing -> · using ID ;, class
namespaceusing -> · using ID ;, (
namespaceusing -> · using ID ;, this
namespaceusing -> · using ID ;, new
namespaceusing -> · using ID ;, LITBOOL
namespaceusing -> · using ID ;, LITINT
namespaceusing -> · using ID ;, LITFLOAT
namespaceusing -> · using ID ;, LITDOUBLE
namespaceusing -> · using ID ;, LITCHAR
namespaceusing -> · using ID ;, LITSTRING
namespaceusing -> · using ID ;, null
namespaceusing -> · using ID ;, ++
namespaceusing -> · using ID ;, --
namespaceusing -> · using ID ;, break
namespaceusing -> · using ID ;, return
namespaceusing -> · using ID ;, delete
namespaceusing -> · using ID ;, while
namespaceusing -> · using ID ;, for
namespaceusing -> · using ID ;, if
namespaceusing -> · using ID ;, $
namespaceusing -> · using ID ;, using
***EndSet***
***EndState***
***State***
4
I_4
***Set***
importations -> importation ·, using
importations -> importation ·, namespace
importations -> importation ·, {
importations -> importation ·, ID
importations -> importation ·, void
importations -> importation ·, bool
importations -> importation ·, int
importations -> importation ·, float
importations -> importation ·, double
importations -> importation ·, char
importations -> importation ·, string
importations -> importation ·, extern
importations -> importation ·, class
importations -> importation ·, (
importations -> importation ·, this
importations -> importation ·, new
importations -> importation ·, LITBOOL
importations -> importation ·, LITINT
importations -> importation ·, LITFLOAT
importations -> importation ·, LITDOUBLE
importations -> importation ·, LITCHAR
importations -> importation ·, LITSTRING
importations -> importation ·, null
importations -> importation ·, ++
importations -> importation ·, --
importations -> importation ·, break
importations -> importation ·, return
importations -> importation ·, delete
importations -> importation ·, while
importations -> importation ·, for
importations -> importation ·, if
importations -> importation ·, $
importations -> importation ·, import
***EndSet***
***EndState***
***State***
5
I_5
***Set***
importation -> import < · LITSTRING >, using
importation -> import < · LITSTRING >, namespace
importation -> import < · LITSTRING >, {
importation -> import < · LITSTRING >, ID
importation -> import < · LITSTRING >, void
importation -> import < · LITSTRING >, bool
importation -> import < · LITSTRING >, int
importation -> import < · LITSTRING >, float
importation -> import < · LITSTRING >, double
importation -> import < · LITSTRING >, char
importation -> import < · LITSTRING >, string
importation -> import < · LITSTRING >, extern
importation -> import < · LITSTRING >, class
importation -> import < · LITSTRING >, (
importation -> import < · LITSTRING >, this
importation -> import < · LITSTRING >, new
importation -> import < · LITSTRING >, LITBOOL
importation -> import < · LITSTRING >, LITINT
importation -> import < · LITSTRING >, LITFLOAT
importation -> import < · LITSTRING >, LITDOUBLE
importation -> import < · LITSTRING >, LITCHAR
importation -> import < · LITSTRING >, LITSTRING
importation -> import < · LITSTRING >, null
importation -> import < · LITSTRING >, ++
importation -> import < · LITSTRING >, --
importation -> import < · LITSTRING >, break
importation -> import < · LITSTRING >, return
importation -> import < · LITSTRING >, delete
importation -> import < · LITSTRING >, while
importation -> import < · LITSTRING >, for
importation -> import < · LITSTRING >, if
importation -> import < · LITSTRING >, $
importation -> import < · LITSTRING >, import
***EndSet***
***EndState***
***State***
6
I_6
***Set***
namespaceusing -> using · ID ;, namespace
namespaceusing -> using · ID ;, {
namespaceusing -> using · ID ;, ID
namespaceusing -> using · ID ;, void
namespaceusing -> using · ID ;, bool
namespaceusing -> using · ID ;, int
namespaceusing -> using · ID ;, float
namespaceusing -> using · ID ;, double
namespaceusing -> using · ID ;, char
namespaceusing -> using · ID ;, string
namespaceusing -> using · ID ;, extern
namespaceusing -> using · ID ;, class
namespaceusing -> using · ID ;, (
namespaceusing -> using · ID ;, this
namespaceusing -> using · ID ;, new
namespaceusing -> using · ID ;, LITBOOL
namespaceusing -> using · ID ;, LITINT
namespaceusing -> using · ID ;, LITFLOAT
namespaceusing -> using · ID ;, LITDOUBLE
namespaceusing -> using · ID ;, LITCHAR
namespaceusing -> using · ID ;, LITSTRING
namespaceusing -> using · ID ;, null
namespaceusing -> using · ID ;, ++
namespaceusing -> using · ID ;, --
namespaceusing -> using · ID ;, break
namespaceusing -> using · ID ;, return
namespaceusing -> using · ID ;, delete
namespaceusing -> using · ID ;, while
namespaceusing -> using · ID ;, for
namespaceusing -> using · ID ;, if
namespaceusing -> using · ID ;, $
namespaceusing -> using · ID ;, using
***EndSet***
***EndState***
***State***
7
I_7
***Set***
importations -> importations importation ·, using
importations -> importations importation ·, namespace
importations -> importations importation ·, {
importations -> importations importation ·, ID
importations -> importations importation ·, void
importations -> importations importation ·, bool
importations -> importations importation ·, int
importations -> importations importation ·, float
importations -> importations importation ·, double
importations -> importations importation ·, char
importations -> importations importation ·, string
importations -> importations importation ·, extern
importations -> importations importation ·, class
importations -> importations importation ·, (
importations -> importations importation ·, this
importations -> importations importation ·, new
importations -> importations importation ·, LITBOOL
importations -> importations importation ·, LITINT
importations -> importations importation ·, LITFLOAT
importations -> importations importation ·, LITDOUBLE
importations -> importations importation ·, LITCHAR
importations -> importations importation ·, LITSTRING
importations -> importations importation ·, null
importations -> importations importation ·, ++
importations -> importations importation ·, --
importations -> importations importation ·, break
importations -> importations importation ·, return
importations -> importations importation ·, delete
importations -> importations importation ·, while
importations -> importations importation ·, for
importations -> importations importation ·, if
importations -> importations importation ·, $
importations -> importations importation ·, import
***EndSet***
***EndState***
***State***
8
I_8
***Set***
S -> importations namespaceusings · statements, $
namespaceusings -> namespaceusings · namespaceusing, namespace
namespaceusings -> namespaceusings · namespaceusing, {
namespaceusings -> namespaceusings · namespaceusing, ID
namespaceusings -> namespaceusings · namespaceusing, void
namespaceusings -> namespaceusings · namespaceusing, bool
namespaceusings -> namespaceusings · namespaceusing, int
namespaceusings -> namespaceusings · namespaceusing, float
namespaceusings -> namespaceusings · namespaceusing, double
namespaceusings -> namespaceusings · namespaceusing, char
namespaceusings -> namespaceusings · namespaceusing, string
namespaceusings -> namespaceusings · namespaceusing, extern
namespaceusings -> namespaceusings · namespaceusing, class
namespaceusings -> namespaceusings · namespaceusing, (
namespaceusings -> namespaceusings · namespaceusing, this
namespaceusings -> namespaceusings · namespaceusing, new
namespaceusings -> namespaceusings · namespaceusing, LITBOOL
namespaceusings -> namespaceusings · namespaceusing, LITINT
namespaceusings -> namespaceusings · namespaceusing, LITFLOAT
namespaceusings -> namespaceusings · namespaceusing, LITDOUBLE
namespaceusings -> namespaceusings · namespaceusing, LITCHAR
namespaceusings -> namespaceusings · namespaceusing, LITSTRING
namespaceusings -> namespaceusings · namespaceusing, null
namespaceusings -> namespaceusings · namespaceusing, ++
namespaceusings -> namespaceusings · namespaceusing, --
namespaceusings -> namespaceusings · namespaceusing, break
namespaceusings -> namespaceusings · namespaceusing, return
namespaceusings -> namespaceusings · namespaceusing, delete
namespaceusings -> namespaceusings · namespaceusing, while
namespaceusings -> namespaceusings · namespaceusing, for
namespaceusings -> namespaceusings · namespaceusing, if
namespaceusings -> namespaceusings · namespaceusing, $
namespaceusings -> namespaceusings · namespaceusing, using
statements -> · statements stmt, $
statements -> · stmt, $
statements -> ·, $
namespaceusing -> · using ID ;, namespace
namespaceusing -> · using ID ;, {
namespaceusing -> · using ID ;, ID
namespaceusing -> · using ID ;, void
namespaceusing -> · using ID ;, bool
namespaceusing -> · using ID ;, int
namespaceusing -> · using ID ;, float
namespaceusing -> · using ID ;, double
namespaceusing -> · using ID ;, char
namespaceusing -> · using ID ;, string
namespaceusing -> · using ID ;, extern
namespaceusing -> · using ID ;, class
namespaceusing -> · using ID ;, (
namespaceusing -> · using ID ;, this
namespaceusing -> · using ID ;, new
namespaceusing -> · using ID ;, LITBOOL
namespaceusing -> · using ID ;, LITINT
namespaceusing -> · using ID ;, LITFLOAT
namespaceusing -> · using ID ;, LITDOUBLE
namespaceusing -> · using ID ;, LITCHAR
namespaceusing -> · using ID ;, LITSTRING
namespaceusing -> · using ID ;, null
namespaceusing -> · using ID ;, ++
namespaceusing -> · using ID ;, --
namespaceusing -> · using ID ;, break
namespaceusing -> · using ID ;, return
namespaceusing -> · using ID ;, delete
namespaceusing -> · using ID ;, while
namespaceusing -> · using ID ;, for
namespaceusing -> · using ID ;, if
namespaceusing -> · using ID ;, $
namespaceusing -> · using ID ;, using
statements -> · statements stmt, namespace
statements -> · statements stmt, {
statements -> · statements stmt, ID
statements -> · statements stmt, void
statements -> · statements stmt, bool
statements -> · statements stmt, int
statements -> · statements stmt, float
statements -> · statements stmt, double
statements -> · statements stmt, char
statements -> · statements stmt, string
statements -> · statements stmt, extern
statements -> · statements stmt, class
statements -> · statements stmt, (
statements -> · statements stmt, this
statements -> · statements stmt, new
statements -> · statements stmt, LITBOOL
statements -> · statements stmt, LITINT
statements -> · statements stmt, LITFLOAT
statements -> · statements stmt, LITDOUBLE
statements -> · statements stmt, LITCHAR
statements -> · statements stmt, LITSTRING
statements -> · statements stmt, null
statements -> · statements stmt, ++
statements -> · statements stmt, --
statements -> · statements stmt, break
statements -> · statements stmt, return
statements -> · statements stmt, delete
statements -> · statements stmt, while
statements -> · statements stmt, for
statements -> · statements stmt, if
statements -> · stmt, namespace
statements -> · stmt, {
statements -> · stmt, ID
statements -> · stmt, void
statements -> · stmt, bool
statements -> · stmt, int
statements -> · stmt, float
statements -> · stmt, double
statements -> · stmt, char
statements -> · stmt, string
statements -> · stmt, extern
statements -> · stmt, class
statements -> · stmt, (
statements -> · stmt, this
statements -> · stmt, new
statements -> · stmt, LITBOOL
statements -> · stmt, LITINT
statements -> · stmt, LITFLOAT
statements -> · stmt, LITDOUBLE
statements -> · stmt, LITCHAR
statements -> · stmt, LITSTRING
statements -> · stmt, null
statements -> · stmt, ++
statements -> · stmt, --
statements -> · stmt, break
statements -> · stmt, return
statements -> · stmt, delete
statements -> · stmt, while
statements -> · stmt, for
statements -> · stmt, if
statements -> ·, namespace
statements -> ·, {
statements -> ·, ID
statements -> ·, void
statements -> ·, bool
statements -> ·, int
statements -> ·, float
statements -> ·, double
statements -> ·, char
statements -> ·, string
statements -> ·, extern
statements -> ·, class
statements -> ·, (
statements -> ·, this
statements -> ·, new
statements -> ·, LITBOOL
statements -> ·, LITINT
statements -> ·, LITFLOAT
statements -> ·, LITDOUBLE
statements -> ·, LITCHAR
statements -> ·, LITSTRING
statements -> ·, null
statements -> ·, ++
statements -> ·, --
statements -> ·, break
statements -> ·, return
statements -> ·, delete
statements -> ·, while
statements -> ·, for
statements -> ·, if
stmt -> · namespaceblock, $
stmt -> · statementblock, $
stmt -> · declstmt, $
stmt -> · stmtexpr ;, $
stmt -> · break ;, $
stmt -> · return expr ;, $
stmt -> · return ;, $
stmt -> · delete expr ;, $
stmt -> · while ( expr ) stmt, $
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, $
stmt -> · if ( expr ) stmt elifclauselist elseclause, $
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, $
statementblock -> · { statements }, $
declstmt -> · type ID = expr ;, $
declstmt -> · type ID ( params ) { statements }, $
declstmt -> · extern type ID ( params ) ;, $
declstmt -> · class ID inherit { declstatements }, $
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
***EndSet***
***EndState***
***State***
9
I_9
***Set***
namespaceusings -> namespaceusing ·, namespace
namespaceusings -> namespaceusing ·, {
namespaceusings -> namespaceusing ·, ID
namespaceusings -> namespaceusing ·, void
namespaceusings -> namespaceusing ·, bool
namespaceusings -> namespaceusing ·, int
namespaceusings -> namespaceusing ·, float
namespaceusings -> namespaceusing ·, double
namespaceusings -> namespaceusing ·, char
namespaceusings -> namespaceusing ·, string
namespaceusings -> namespaceusing ·, extern
namespaceusings -> namespaceusing ·, class
namespaceusings -> namespaceusing ·, (
namespaceusings -> namespaceusing ·, this
namespaceusings -> namespaceusing ·, new
namespaceusings -> namespaceusing ·, LITBOOL
namespaceusings -> namespaceusing ·, LITINT
namespaceusings -> namespaceusing ·, LITFLOAT
namespaceusings -> namespaceusing ·, LITDOUBLE
namespaceusings -> namespaceusing ·, LITCHAR
namespaceusings -> namespaceusing ·, LITSTRING
namespaceusings -> namespaceusing ·, null
namespaceusings -> namespaceusing ·, ++
namespaceusings -> namespaceusing ·, --
namespaceusings -> namespaceusing ·, break
namespaceusings -> namespaceusing ·, return
namespaceusings -> namespaceusing ·, delete
namespaceusings -> namespaceusing ·, while
namespaceusings -> namespaceusing ·, for
namespaceusings -> namespaceusing ·, if
namespaceusings -> namespaceusing ·, $
namespaceusings -> namespaceusing ·, using
***EndSet***
***EndState***
***State***
10
I_10
***Set***
importation -> import < LITSTRING · >, using
importation -> import < LITSTRING · >, namespace
importation -> import < LITSTRING · >, {
importation -> import < LITSTRING · >, ID
importation -> import < LITSTRING · >, void
importation -> import < LITSTRING · >, bool
importation -> import < LITSTRING · >, int
importation -> import < LITSTRING · >, float
importation -> import < LITSTRING · >, double
importation -> import < LITSTRING · >, char
importation -> import < LITSTRING · >, string
importation -> import < LITSTRING · >, extern
importation -> import < LITSTRING · >, class
importation -> import < LITSTRING · >, (
importation -> import < LITSTRING · >, this
importation -> import < LITSTRING · >, new
importation -> import < LITSTRING · >, LITBOOL
importation -> import < LITSTRING · >, LITINT
importation -> import < LITSTRING · >, LITFLOAT
importation -> import < LITSTRING · >, LITDOUBLE
importation -> import < LITSTRING · >, LITCHAR
importation -> import < LITSTRING · >, LITSTRING
importation -> import < LITSTRING · >, null
importation -> import < LITSTRING · >, ++
importation -> import < LITSTRING · >, --
importation -> import < LITSTRING · >, break
importation -> import < LITSTRING · >, return
importation -> import < LITSTRING · >, delete
importation -> import < LITSTRING · >, while
importation -> import < LITSTRING · >, for
importation -> import < LITSTRING · >, if
importation -> import < LITSTRING · >, $
importation -> import < LITSTRING · >, import
***EndSet***
***EndState***
***State***
11
I_11
***Set***
namespaceusing -> using ID · ;, namespace
namespaceusing -> using ID · ;, {
namespaceusing -> using ID · ;, ID
namespaceusing -> using ID · ;, void
namespaceusing -> using ID · ;, bool
namespaceusing -> using ID · ;, int
namespaceusing -> using ID · ;, float
namespaceusing -> using ID · ;, double
namespaceusing -> using ID · ;, char
namespaceusing -> using ID · ;, string
namespaceusing -> using ID · ;, extern
namespaceusing -> using ID · ;, class
namespaceusing -> using ID · ;, (
namespaceusing -> using ID · ;, this
namespaceusing -> using ID · ;, new
namespaceusing -> using ID · ;, LITBOOL
namespaceusing -> using ID · ;, LITINT
namespaceusing -> using ID · ;, LITFLOAT
namespaceusing -> using ID · ;, LITDOUBLE
namespaceusing -> using ID · ;, LITCHAR
namespaceusing -> using ID · ;, LITSTRING
namespaceusing -> using ID · ;, null
namespaceusing -> using ID · ;, ++
namespaceusing -> using ID · ;, --
namespaceusing -> using ID · ;, break
namespaceusing -> using ID · ;, return
namespaceusing -> using ID · ;, delete
namespaceusing -> using ID · ;, while
namespaceusing -> using ID · ;, for
namespaceusing -> using ID · ;, if
namespaceusing -> using ID · ;, $
namespaceusing -> using ID · ;, using
***EndSet***
***EndState***
***State***
12
I_12_156_251_752_1054_1173
***Set***
namespaceblock -> namespace · ID { statements }, $
namespaceblock -> namespace · ID { statements }, namespace
namespaceblock -> namespace · ID { statements }, {
namespaceblock -> namespace · ID { statements }, ID
namespaceblock -> namespace · ID { statements }, void
namespaceblock -> namespace · ID { statements }, bool
namespaceblock -> namespace · ID { statements }, int
namespaceblock -> namespace · ID { statements }, float
namespaceblock -> namespace · ID { statements }, double
namespaceblock -> namespace · ID { statements }, char
namespaceblock -> namespace · ID { statements }, string
namespaceblock -> namespace · ID { statements }, extern
namespaceblock -> namespace · ID { statements }, class
namespaceblock -> namespace · ID { statements }, (
namespaceblock -> namespace · ID { statements }, this
namespaceblock -> namespace · ID { statements }, new
namespaceblock -> namespace · ID { statements }, LITBOOL
namespaceblock -> namespace · ID { statements }, LITINT
namespaceblock -> namespace · ID { statements }, LITFLOAT
namespaceblock -> namespace · ID { statements }, LITDOUBLE
namespaceblock -> namespace · ID { statements }, LITCHAR
namespaceblock -> namespace · ID { statements }, LITSTRING
namespaceblock -> namespace · ID { statements }, null
namespaceblock -> namespace · ID { statements }, ++
namespaceblock -> namespace · ID { statements }, --
namespaceblock -> namespace · ID { statements }, break
namespaceblock -> namespace · ID { statements }, return
namespaceblock -> namespace · ID { statements }, delete
namespaceblock -> namespace · ID { statements }, while
namespaceblock -> namespace · ID { statements }, for
namespaceblock -> namespace · ID { statements }, if
namespaceblock -> namespace · ID { statements }, }
namespaceblock -> namespace · ID { statements }, &&
namespaceblock -> namespace · ID { statements }, ||
namespaceblock -> namespace · ID { statements }, +
namespaceblock -> namespace · ID { statements }, -
namespaceblock -> namespace · ID { statements }, *
namespaceblock -> namespace · ID { statements }, /
namespaceblock -> namespace · ID { statements }, !
namespaceblock -> namespace · ID { statements }, else
***EndSet***
***EndState***
***State***
13
I_13_157_252_677_753_1055_1174
***Set***
declstmt -> extern · type ID ( params ) ;, $
declstmt -> extern · type ID ( params ) ;, namespace
declstmt -> extern · type ID ( params ) ;, {
declstmt -> extern · type ID ( params ) ;, ID
declstmt -> extern · type ID ( params ) ;, void
declstmt -> extern · type ID ( params ) ;, bool
declstmt -> extern · type ID ( params ) ;, int
declstmt -> extern · type ID ( params ) ;, float
declstmt -> extern · type ID ( params ) ;, double
declstmt -> extern · type ID ( params ) ;, char
declstmt -> extern · type ID ( params ) ;, string
declstmt -> extern · type ID ( params ) ;, extern
declstmt -> extern · type ID ( params ) ;, class
declstmt -> extern · type ID ( params ) ;, (
declstmt -> extern · type ID ( params ) ;, this
declstmt -> extern · type ID ( params ) ;, new
declstmt -> extern · type ID ( params ) ;, LITBOOL
declstmt -> extern · type ID ( params ) ;, LITINT
declstmt -> extern · type ID ( params ) ;, LITFLOAT
declstmt -> extern · type ID ( params ) ;, LITDOUBLE
declstmt -> extern · type ID ( params ) ;, LITCHAR
declstmt -> extern · type ID ( params ) ;, LITSTRING
declstmt -> extern · type ID ( params ) ;, null
declstmt -> extern · type ID ( params ) ;, ++
declstmt -> extern · type ID ( params ) ;, --
declstmt -> extern · type ID ( params ) ;, break
declstmt -> extern · type ID ( params ) ;, return
declstmt -> extern · type ID ( params ) ;, delete
declstmt -> extern · type ID ( params ) ;, while
declstmt -> extern · type ID ( params ) ;, for
declstmt -> extern · type ID ( params ) ;, if
type -> · arrtype, ID
type -> · stype, ID
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
declstmt -> extern · type ID ( params ) ;, }
declstmt -> extern · type ID ( params ) ;, &&
declstmt -> extern · type ID ( params ) ;, ||
declstmt -> extern · type ID ( params ) ;, +
declstmt -> extern · type ID ( params ) ;, -
declstmt -> extern · type ID ( params ) ;, *
declstmt -> extern · type ID ( params ) ;, /
declstmt -> extern · type ID ( params ) ;, !
declstmt -> extern · type ID ( params ) ;, else
***EndSet***
***EndState***
***State***
14
I_14_158_253_678_754_1056_1175
***Set***
declstmt -> class · ID inherit { declstatements }, $
declstmt -> class · ID inherit { declstatements }, namespace
declstmt -> class · ID inherit { declstatements }, {
declstmt -> class · ID inherit { declstatements }, ID
declstmt -> class · ID inherit { declstatements }, void
declstmt -> class · ID inherit { declstatements }, bool
declstmt -> class · ID inherit { declstatements }, int
declstmt -> class · ID inherit { declstatements }, float
declstmt -> class · ID inherit { declstatements }, double
declstmt -> class · ID inherit { declstatements }, char
declstmt -> class · ID inherit { declstatements }, string
declstmt -> class · ID inherit { declstatements }, extern
declstmt -> class · ID inherit { declstatements }, class
declstmt -> class · ID inherit { declstatements }, (
declstmt -> class · ID inherit { declstatements }, this
declstmt -> class · ID inherit { declstatements }, new
declstmt -> class · ID inherit { declstatements }, LITBOOL
declstmt -> class · ID inherit { declstatements }, LITINT
declstmt -> class · ID inherit { declstatements }, LITFLOAT
declstmt -> class · ID inherit { declstatements }, LITDOUBLE
declstmt -> class · ID inherit { declstatements }, LITCHAR
declstmt -> class · ID inherit { declstatements }, LITSTRING
declstmt -> class · ID inherit { declstatements }, null
declstmt -> class · ID inherit { declstatements }, ++
declstmt -> class · ID inherit { declstatements }, --
declstmt -> class · ID inherit { declstatements }, break
declstmt -> class · ID inherit { declstatements }, return
declstmt -> class · ID inherit { declstatements }, delete
declstmt -> class · ID inherit { declstatements }, while
declstmt -> class · ID inherit { declstatements }, for
declstmt -> class · ID inherit { declstatements }, if
declstmt -> class · ID inherit { declstatements }, }
declstmt -> class · ID inherit { declstatements }, &&
declstmt -> class · ID inherit { declstatements }, ||
declstmt -> class · ID inherit { declstatements }, +
declstmt -> class · ID inherit { declstatements }, -
declstmt -> class · ID inherit { declstatements }, *
declstmt -> class · ID inherit { declstatements }, /
declstmt -> class · ID inherit { declstatements }, !
declstmt -> class · ID inherit { declstatements }, else
***EndSet***
***EndState***
***State***
15
I_15_73_205
***Set***
primitive -> void ·, ID
primitive -> void ·, [
primitive -> void ·, )
***EndSet***
***EndState***
***State***
16
I_16_74_206
***Set***
primitive -> bool ·, ID
primitive -> bool ·, [
primitive -> bool ·, )
***EndSet***
***EndState***
***State***
17
I_17_75_207
***Set***
primitive -> int ·, ID
primitive -> int ·, [
primitive -> int ·, )
***EndSet***
***EndState***
***State***
18
I_18_76_208
***Set***
primitive -> float ·, ID
primitive -> float ·, [
primitive -> float ·, )
***EndSet***
***EndState***
***State***
19
I_19_77_209
***Set***
primitive -> double ·, ID
primitive -> double ·, [
primitive -> double ·, )
***EndSet***
***EndState***
***State***
20
I_20_78_210
***Set***
primitive -> char ·, ID
primitive -> char ·, [
primitive -> char ·, )
***EndSet***
***EndState***
***State***
21
I_21_79_211
***Set***
primitive -> string ·, ID
primitive -> string ·, [
primitive -> string ·, )
***EndSet***
***EndState***
***State***
22
I_22_85_123_326_360_424_457_519_552_839_872_939
***Set***
lit -> null ·, .
lit -> null ·, ;
lit -> null ·, &&
lit -> null ·, ||
lit -> null ·, >
lit -> null ·, <
lit -> null ·, >=
lit -> null ·, <=
lit -> null ·, ==
lit -> null ·, !=
lit -> null ·, +
lit -> null ·, -
lit -> null ·, *
lit -> null ·, /
lit -> null ·, )
lit -> null ·, ,
lit -> null ·, ]
***EndSet***
***EndState***
***State***
23
I_23_86_124_327_361_425_458_520_553_840_873_940_997
***Set***
newobj -> new · ID ( ), ;
newobj -> new · ID ( ), .
newarr -> new · stypeBracket, .
stypeBracket -> · idBracket, .
stypeBracket -> · primitiveBracket, .
idBracket -> · ID [ optidx ], .
primitiveBracket -> · primitive [ optidx ], .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
newarr -> new · stypeBracket, ;
newobj -> new · ID ( ), &&
newarr -> new · stypeBracket, &&
newobj -> new · ID ( ), ||
newarr -> new · stypeBracket, ||
newobj -> new · ID ( ), >
newarr -> new · stypeBracket, >
newobj -> new · ID ( ), <
newarr -> new · stypeBracket, <
newobj -> new · ID ( ), >=
newarr -> new · stypeBracket, >=
newobj -> new · ID ( ), <=
newarr -> new · stypeBracket, <=
newobj -> new · ID ( ), ==
newarr -> new · stypeBracket, ==
newobj -> new · ID ( ), !=
newarr -> new · stypeBracket, !=
newobj -> new · ID ( ), +
newarr -> new · stypeBracket, +
newobj -> new · ID ( ), -
newarr -> new · stypeBracket, -
newobj -> new · ID ( ), *
newarr -> new · stypeBracket, *
newobj -> new · ID ( ), /
newarr -> new · stypeBracket, /
stypeBracket -> · idBracket, ;
stypeBracket -> · primitiveBracket, ;
stypeBracket -> · idBracket, &&
stypeBracket -> · primitiveBracket, &&
stypeBracket -> · idBracket, ||
stypeBracket -> · primitiveBracket, ||
stypeBracket -> · idBracket, >
stypeBracket -> · primitiveBracket, >
stypeBracket -> · idBracket, <
stypeBracket -> · primitiveBracket, <
stypeBracket -> · idBracket, >=
stypeBracket -> · primitiveBracket, >=
stypeBracket -> · idBracket, <=
stypeBracket -> · primitiveBracket, <=
stypeBracket -> · idBracket, ==
stypeBracket -> · primitiveBracket, ==
stypeBracket -> · idBracket, !=
stypeBracket -> · primitiveBracket, !=
stypeBracket -> · idBracket, +
stypeBracket -> · primitiveBracket, +
stypeBracket -> · idBracket, -
stypeBracket -> · primitiveBracket, -
stypeBracket -> · idBracket, *
stypeBracket -> · primitiveBracket, *
stypeBracket -> · idBracket, /
stypeBracket -> · primitiveBracket, /
idBracket -> · ID [ optidx ], ;
primitiveBracket -> · primitive [ optidx ], ;
idBracket -> · ID [ optidx ], &&
primitiveBracket -> · primitive [ optidx ], &&
idBracket -> · ID [ optidx ], ||
primitiveBracket -> · primitive [ optidx ], ||
idBracket -> · ID [ optidx ], >
primitiveBracket -> · primitive [ optidx ], >
idBracket -> · ID [ optidx ], <
primitiveBracket -> · primitive [ optidx ], <
idBracket -> · ID [ optidx ], >=
primitiveBracket -> · primitive [ optidx ], >=
idBracket -> · ID [ optidx ], <=
primitiveBracket -> · primitive [ optidx ], <=
idBracket -> · ID [ optidx ], ==
primitiveBracket -> · primitive [ optidx ], ==
idBracket -> · ID [ optidx ], !=
primitiveBracket -> · primitive [ optidx ], !=
idBracket -> · ID [ optidx ], +
primitiveBracket -> · primitive [ optidx ], +
idBracket -> · ID [ optidx ], -
primitiveBracket -> · primitive [ optidx ], -
idBracket -> · ID [ optidx ], *
primitiveBracket -> · primitive [ optidx ], *
idBracket -> · ID [ optidx ], /
primitiveBracket -> · primitive [ optidx ], /
newobj -> new · ID ( ), )
newarr -> new · stypeBracket, )
stypeBracket -> · idBracket, )
stypeBracket -> · primitiveBracket, )
idBracket -> · ID [ optidx ], )
primitiveBracket -> · primitive [ optidx ], )
newobj -> new · ID ( ), ,
newarr -> new · stypeBracket, ,
stypeBracket -> · idBracket, ,
stypeBracket -> · primitiveBracket, ,
idBracket -> · ID [ optidx ], ,
primitiveBracket -> · primitive [ optidx ], ,
newobj -> new · ID ( ), ]
newarr -> new · stypeBracket, ]
stypeBracket -> · idBracket, ]
stypeBracket -> · primitiveBracket, ]
idBracket -> · ID [ optidx ], ]
primitiveBracket -> · primitive [ optidx ], ]
***EndSet***
***EndState***
***State***
24
I_24_159_254_755_1057_1176
***Set***
stmt -> delete · expr ;, $
stmt -> delete · expr ;, namespace
stmt -> delete · expr ;, {
stmt -> delete · expr ;, ID
stmt -> delete · expr ;, void
stmt -> delete · expr ;, bool
stmt -> delete · expr ;, int
stmt -> delete · expr ;, float
stmt -> delete · expr ;, double
stmt -> delete · expr ;, char
stmt -> delete · expr ;, string
stmt -> delete · expr ;, extern
stmt -> delete · expr ;, class
stmt -> delete · expr ;, (
stmt -> delete · expr ;, this
stmt -> delete · expr ;, new
stmt -> delete · expr ;, LITBOOL
stmt -> delete · expr ;, LITINT
stmt -> delete · expr ;, LITFLOAT
stmt -> delete · expr ;, LITDOUBLE
stmt -> delete · expr ;, LITCHAR
stmt -> delete · expr ;, LITSTRING
stmt -> delete · expr ;, null
stmt -> delete · expr ;, ++
stmt -> delete · expr ;, --
stmt -> delete · expr ;, break
stmt -> delete · expr ;, return
stmt -> delete · expr ;, delete
stmt -> delete · expr ;, while
stmt -> delete · expr ;, for
stmt -> delete · expr ;, if
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
stmt -> delete · expr ;, }
stmt -> delete · expr ;, &&
stmt -> delete · expr ;, ||
stmt -> delete · expr ;, +
stmt -> delete · expr ;, -
stmt -> delete · expr ;, *
stmt -> delete · expr ;, /
stmt -> delete · expr ;, !
stmt -> delete · expr ;, else
***EndSet***
***EndState***
***State***
25
I_25_160_255_756_1058_1177
***Set***
stmt -> while · ( expr ) stmt, $
stmt -> while · ( expr ) stmt, namespace
stmt -> while · ( expr ) stmt, {
stmt -> while · ( expr ) stmt, ID
stmt -> while · ( expr ) stmt, void
stmt -> while · ( expr ) stmt, bool
stmt -> while · ( expr ) stmt, int
stmt -> while · ( expr ) stmt, float
stmt -> while · ( expr ) stmt, double
stmt -> while · ( expr ) stmt, char
stmt -> while · ( expr ) stmt, string
stmt -> while · ( expr ) stmt, extern
stmt -> while · ( expr ) stmt, class
stmt -> while · ( expr ) stmt, (
stmt -> while · ( expr ) stmt, this
stmt -> while · ( expr ) stmt, new
stmt -> while · ( expr ) stmt, LITBOOL
stmt -> while · ( expr ) stmt, LITINT
stmt -> while · ( expr ) stmt, LITFLOAT
stmt -> while · ( expr ) stmt, LITDOUBLE
stmt -> while · ( expr ) stmt, LITCHAR
stmt -> while · ( expr ) stmt, LITSTRING
stmt -> while · ( expr ) stmt, null
stmt -> while · ( expr ) stmt, ++
stmt -> while · ( expr ) stmt, --
stmt -> while · ( expr ) stmt, break
stmt -> while · ( expr ) stmt, return
stmt -> while · ( expr ) stmt, delete
stmt -> while · ( expr ) stmt, while
stmt -> while · ( expr ) stmt, for
stmt -> while · ( expr ) stmt, if
stmt -> while · ( expr ) stmt, }
stmt -> while · ( expr ) stmt, &&
stmt -> while · ( expr ) stmt, ||
stmt -> while · ( expr ) stmt, +
stmt -> while · ( expr ) stmt, -
stmt -> while · ( expr ) stmt, *
stmt -> while · ( expr ) stmt, /
stmt -> while · ( expr ) stmt, !
stmt -> while · ( expr ) stmt, else
***EndSet***
***EndState***
***State***
26
I_26_161_256_757_1059_1178
***Set***
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, $
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, &&
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, ||
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, +
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, -
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, *
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, /
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, !
stmt -> for · ( stmt bexpr ; stmtexpr ) stmt, else
***EndSet***
***EndState***
***State***
27
I_27_162_257_758_1060_1179
***Set***
stmt -> if · ( expr ) stmt elifclauselist elseclause, $
stmt -> if · ( expr ) stmt elifclauselist elseclause, namespace
stmt -> if · ( expr ) stmt elifclauselist elseclause, {
stmt -> if · ( expr ) stmt elifclauselist elseclause, ID
stmt -> if · ( expr ) stmt elifclauselist elseclause, void
stmt -> if · ( expr ) stmt elifclauselist elseclause, bool
stmt -> if · ( expr ) stmt elifclauselist elseclause, int
stmt -> if · ( expr ) stmt elifclauselist elseclause, float
stmt -> if · ( expr ) stmt elifclauselist elseclause, double
stmt -> if · ( expr ) stmt elifclauselist elseclause, char
stmt -> if · ( expr ) stmt elifclauselist elseclause, string
stmt -> if · ( expr ) stmt elifclauselist elseclause, extern
stmt -> if · ( expr ) stmt elifclauselist elseclause, class
stmt -> if · ( expr ) stmt elifclauselist elseclause, (
stmt -> if · ( expr ) stmt elifclauselist elseclause, this
stmt -> if · ( expr ) stmt elifclauselist elseclause, new
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> if · ( expr ) stmt elifclauselist elseclause, null
stmt -> if · ( expr ) stmt elifclauselist elseclause, ++
stmt -> if · ( expr ) stmt elifclauselist elseclause, --
stmt -> if · ( expr ) stmt elifclauselist elseclause, break
stmt -> if · ( expr ) stmt elifclauselist elseclause, return
stmt -> if · ( expr ) stmt elifclauselist elseclause, delete
stmt -> if · ( expr ) stmt elifclauselist elseclause, while
stmt -> if · ( expr ) stmt elifclauselist elseclause, for
stmt -> if · ( expr ) stmt elifclauselist elseclause, if
stmt -> if · ( expr ) stmt elifclauselist elseclause, }
stmt -> if · ( expr ) stmt elifclauselist elseclause, &&
stmt -> if · ( expr ) stmt elifclauselist elseclause, ||
stmt -> if · ( expr ) stmt elifclauselist elseclause, +
stmt -> if · ( expr ) stmt elifclauselist elseclause, -
stmt -> if · ( expr ) stmt elifclauselist elseclause, *
stmt -> if · ( expr ) stmt elifclauselist elseclause, /
stmt -> if · ( expr ) stmt elifclauselist elseclause, !
stmt -> if · ( expr ) stmt elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
28
I_28_163_258_759_1061_1180
***Set***
stmt -> break · ;, $
stmt -> break · ;, namespace
stmt -> break · ;, {
stmt -> break · ;, ID
stmt -> break · ;, void
stmt -> break · ;, bool
stmt -> break · ;, int
stmt -> break · ;, float
stmt -> break · ;, double
stmt -> break · ;, char
stmt -> break · ;, string
stmt -> break · ;, extern
stmt -> break · ;, class
stmt -> break · ;, (
stmt -> break · ;, this
stmt -> break · ;, new
stmt -> break · ;, LITBOOL
stmt -> break · ;, LITINT
stmt -> break · ;, LITFLOAT
stmt -> break · ;, LITDOUBLE
stmt -> break · ;, LITCHAR
stmt -> break · ;, LITSTRING
stmt -> break · ;, null
stmt -> break · ;, ++
stmt -> break · ;, --
stmt -> break · ;, break
stmt -> break · ;, return
stmt -> break · ;, delete
stmt -> break · ;, while
stmt -> break · ;, for
stmt -> break · ;, if
stmt -> break · ;, }
stmt -> break · ;, &&
stmt -> break · ;, ||
stmt -> break · ;, +
stmt -> break · ;, -
stmt -> break · ;, *
stmt -> break · ;, /
stmt -> break · ;, !
stmt -> break · ;, else
***EndSet***
***EndState***
***State***
29
I_29_164_259_760_1062_1181
***Set***
stmt -> return · expr ;, $
stmt -> return · ;, $
stmt -> return · expr ;, namespace
stmt -> return · ;, namespace
stmt -> return · expr ;, {
stmt -> return · ;, {
stmt -> return · expr ;, ID
stmt -> return · ;, ID
stmt -> return · expr ;, void
stmt -> return · ;, void
stmt -> return · expr ;, bool
stmt -> return · ;, bool
stmt -> return · expr ;, int
stmt -> return · ;, int
stmt -> return · expr ;, float
stmt -> return · ;, float
stmt -> return · expr ;, double
stmt -> return · ;, double
stmt -> return · expr ;, char
stmt -> return · ;, char
stmt -> return · expr ;, string
stmt -> return · ;, string
stmt -> return · expr ;, extern
stmt -> return · ;, extern
stmt -> return · expr ;, class
stmt -> return · ;, class
stmt -> return · expr ;, (
stmt -> return · ;, (
stmt -> return · expr ;, this
stmt -> return · ;, this
stmt -> return · expr ;, new
stmt -> return · ;, new
stmt -> return · expr ;, LITBOOL
stmt -> return · ;, LITBOOL
stmt -> return · expr ;, LITINT
stmt -> return · ;, LITINT
stmt -> return · expr ;, LITFLOAT
stmt -> return · ;, LITFLOAT
stmt -> return · expr ;, LITDOUBLE
stmt -> return · ;, LITDOUBLE
stmt -> return · expr ;, LITCHAR
stmt -> return · ;, LITCHAR
stmt -> return · expr ;, LITSTRING
stmt -> return · ;, LITSTRING
stmt -> return · expr ;, null
stmt -> return · ;, null
stmt -> return · expr ;, ++
stmt -> return · ;, ++
stmt -> return · expr ;, --
stmt -> return · ;, --
stmt -> return · expr ;, break
stmt -> return · ;, break
stmt -> return · expr ;, return
stmt -> return · ;, return
stmt -> return · expr ;, delete
stmt -> return · ;, delete
stmt -> return · expr ;, while
stmt -> return · ;, while
stmt -> return · expr ;, for
stmt -> return · ;, for
stmt -> return · expr ;, if
stmt -> return · ;, if
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
stmt -> return · expr ;, }
stmt -> return · ;, }
stmt -> return · expr ;, &&
stmt -> return · expr ;, ||
stmt -> return · expr ;, +
stmt -> return · expr ;, -
stmt -> return · expr ;, *
stmt -> return · expr ;, /
stmt -> return · expr ;, !
stmt -> return · ;, &&
stmt -> return · ;, ||
stmt -> return · ;, +
stmt -> return · ;, -
stmt -> return · ;, *
stmt -> return · ;, /
stmt -> return · ;, !
stmt -> return · expr ;, else
stmt -> return · ;, else
***EndSet***
***EndState***
***State***
30
I_30_87_125_328_362_426_459_521_554_841_874_941
***Set***
primary -> this ·, .
primary -> this ·, ;
primary -> this ·, &&
primary -> this ·, ||
primary -> this ·, >
primary -> this ·, <
primary -> this ·, >=
primary -> this ·, <=
primary -> this ·, ==
primary -> this ·, !=
primary -> this ·, +
primary -> this ·, -
primary -> this ·, *
primary -> this ·, /
primary -> this ·, )
primary -> this ·, ,
primary -> this ·, ]
***EndSet***
***EndState***
***State***
31
I_31
***Set***
primary -> ( · expr ), .
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], )
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
***EndSet***
***EndState***
***State***
32
I_32_165_260_761_1063_1182
***Set***
statementblock -> { · statements }, $
statementblock -> { · statements }, namespace
statementblock -> { · statements }, {
statementblock -> { · statements }, ID
statementblock -> { · statements }, void
statementblock -> { · statements }, bool
statementblock -> { · statements }, int
statementblock -> { · statements }, float
statementblock -> { · statements }, double
statementblock -> { · statements }, char
statementblock -> { · statements }, string
statementblock -> { · statements }, extern
statementblock -> { · statements }, class
statementblock -> { · statements }, (
statementblock -> { · statements }, this
statementblock -> { · statements }, new
statementblock -> { · statements }, LITBOOL
statementblock -> { · statements }, LITINT
statementblock -> { · statements }, LITFLOAT
statementblock -> { · statements }, LITDOUBLE
statementblock -> { · statements }, LITCHAR
statementblock -> { · statements }, LITSTRING
statementblock -> { · statements }, null
statementblock -> { · statements }, ++
statementblock -> { · statements }, --
statementblock -> { · statements }, break
statementblock -> { · statements }, return
statementblock -> { · statements }, delete
statementblock -> { · statements }, while
statementblock -> { · statements }, for
statementblock -> { · statements }, if
statements -> · statements stmt, }
statements -> · stmt, }
statements -> ·, }
statements -> · statements stmt, namespace
statements -> · statements stmt, {
statements -> · statements stmt, ID
statements -> · statements stmt, void
statements -> · statements stmt, bool
statements -> · statements stmt, int
statements -> · statements stmt, float
statements -> · statements stmt, double
statements -> · statements stmt, char
statements -> · statements stmt, string
statements -> · statements stmt, extern
statements -> · statements stmt, class
statements -> · statements stmt, (
statements -> · statements stmt, this
statements -> · statements stmt, new
statements -> · statements stmt, LITBOOL
statements -> · statements stmt, LITINT
statements -> · statements stmt, LITFLOAT
statements -> · statements stmt, LITDOUBLE
statements -> · statements stmt, LITCHAR
statements -> · statements stmt, LITSTRING
statements -> · statements stmt, null
statements -> · statements stmt, ++
statements -> · statements stmt, --
statements -> · statements stmt, break
statements -> · statements stmt, return
statements -> · statements stmt, delete
statements -> · statements stmt, while
statements -> · statements stmt, for
statements -> · statements stmt, if
statements -> · stmt, namespace
statements -> · stmt, {
statements -> · stmt, ID
statements -> · stmt, void
statements -> · stmt, bool
statements -> · stmt, int
statements -> · stmt, float
statements -> · stmt, double
statements -> · stmt, char
statements -> · stmt, string
statements -> · stmt, extern
statements -> · stmt, class
statements -> · stmt, (
statements -> · stmt, this
statements -> · stmt, new
statements -> · stmt, LITBOOL
statements -> · stmt, LITINT
statements -> · stmt, LITFLOAT
statements -> · stmt, LITDOUBLE
statements -> · stmt, LITCHAR
statements -> · stmt, LITSTRING
statements -> · stmt, null
statements -> · stmt, ++
statements -> · stmt, --
statements -> · stmt, break
statements -> · stmt, return
statements -> · stmt, delete
statements -> · stmt, while
statements -> · stmt, for
statements -> · stmt, if
statements -> ·, namespace
statements -> ·, {
statements -> ·, ID
statements -> ·, void
statements -> ·, bool
statements -> ·, int
statements -> ·, float
statements -> ·, double
statements -> ·, char
statements -> ·, string
statements -> ·, extern
statements -> ·, class
statements -> ·, (
statements -> ·, this
statements -> ·, new
statements -> ·, LITBOOL
statements -> ·, LITINT
statements -> ·, LITFLOAT
statements -> ·, LITDOUBLE
statements -> ·, LITCHAR
statements -> ·, LITSTRING
statements -> ·, null
statements -> ·, ++
statements -> ·, --
statements -> ·, break
statements -> ·, return
statements -> ·, delete
statements -> ·, while
statements -> ·, for
statements -> ·, if
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
statementblock -> { · statements }, }
statementblock -> { · statements }, &&
statementblock -> { · statements }, ||
statementblock -> { · statements }, +
statementblock -> { · statements }, -
statementblock -> { · statements }, *
statementblock -> { · statements }, /
statementblock -> { · statements }, !
statementblock -> { · statements }, else
***EndSet***
***EndState***
***State***
33
I_33_89_127_330_364_428_461_523_556_843_876_943_998
***Set***
incdec -> -- · ID, ;
incdec -> -- · ID, &&
incdec -> -- · ID, ||
incdec -> -- · ID, >
incdec -> -- · ID, <
incdec -> -- · ID, >=
incdec -> -- · ID, <=
incdec -> -- · ID, ==
incdec -> -- · ID, !=
incdec -> -- · ID, +
incdec -> -- · ID, -
incdec -> -- · ID, *
incdec -> -- · ID, /
incdec -> -- · ID, )
incdec -> -- · ID, ,
incdec -> -- · ID, ]
***EndSet***
***EndState***
***State***
34
I_34_90_128_331_365_429_462_524_557_844_877_944_999
***Set***
incdec -> ++ · ID, ;
incdec -> ++ · ID, &&
incdec -> ++ · ID, ||
incdec -> ++ · ID, >
incdec -> ++ · ID, <
incdec -> ++ · ID, >=
incdec -> ++ · ID, <=
incdec -> ++ · ID, ==
incdec -> ++ · ID, !=
incdec -> ++ · ID, +
incdec -> ++ · ID, -
incdec -> ++ · ID, *
incdec -> ++ · ID, /
incdec -> ++ · ID, )
incdec -> ++ · ID, ,
incdec -> ++ · ID, ]
***EndSet***
***EndState***
***State***
35
I_35_93_131_334_368_432_465_527_560_847_880_947
***Set***
lit -> LITBOOL ·, .
lit -> LITBOOL ·, ;
lit -> LITBOOL ·, &&
lit -> LITBOOL ·, ||
lit -> LITBOOL ·, >
lit -> LITBOOL ·, <
lit -> LITBOOL ·, >=
lit -> LITBOOL ·, <=
lit -> LITBOOL ·, ==
lit -> LITBOOL ·, !=
lit -> LITBOOL ·, +
lit -> LITBOOL ·, -
lit -> LITBOOL ·, *
lit -> LITBOOL ·, /
lit -> LITBOOL ·, )
lit -> LITBOOL ·, ,
lit -> LITBOOL ·, ]
***EndSet***
***EndState***
***State***
36
I_36_94_132_335_369_433_466_528_561_848_881_948
***Set***
lit -> LITINT ·, .
lit -> LITINT ·, ;
lit -> LITINT ·, &&
lit -> LITINT ·, ||
lit -> LITINT ·, >
lit -> LITINT ·, <
lit -> LITINT ·, >=
lit -> LITINT ·, <=
lit -> LITINT ·, ==
lit -> LITINT ·, !=
lit -> LITINT ·, +
lit -> LITINT ·, -
lit -> LITINT ·, *
lit -> LITINT ·, /
lit -> LITINT ·, )
lit -> LITINT ·, ,
lit -> LITINT ·, ]
***EndSet***
***EndState***
***State***
37
I_37_95_133_336_370_434_467_529_562_849_882_949
***Set***
lit -> LITFLOAT ·, .
lit -> LITFLOAT ·, ;
lit -> LITFLOAT ·, &&
lit -> LITFLOAT ·, ||
lit -> LITFLOAT ·, >
lit -> LITFLOAT ·, <
lit -> LITFLOAT ·, >=
lit -> LITFLOAT ·, <=
lit -> LITFLOAT ·, ==
lit -> LITFLOAT ·, !=
lit -> LITFLOAT ·, +
lit -> LITFLOAT ·, -
lit -> LITFLOAT ·, *
lit -> LITFLOAT ·, /
lit -> LITFLOAT ·, )
lit -> LITFLOAT ·, ,
lit -> LITFLOAT ·, ]
***EndSet***
***EndState***
***State***
38
I_38_96_134_337_371_435_468_530_563_850_883_950
***Set***
lit -> LITDOUBLE ·, .
lit -> LITDOUBLE ·, ;
lit -> LITDOUBLE ·, &&
lit -> LITDOUBLE ·, ||
lit -> LITDOUBLE ·, >
lit -> LITDOUBLE ·, <
lit -> LITDOUBLE ·, >=
lit -> LITDOUBLE ·, <=
lit -> LITDOUBLE ·, ==
lit -> LITDOUBLE ·, !=
lit -> LITDOUBLE ·, +
lit -> LITDOUBLE ·, -
lit -> LITDOUBLE ·, *
lit -> LITDOUBLE ·, /
lit -> LITDOUBLE ·, )
lit -> LITDOUBLE ·, ,
lit -> LITDOUBLE ·, ]
***EndSet***
***EndState***
***State***
39
I_39_97_135_338_372_436_469_531_564_851_884_951
***Set***
lit -> LITCHAR ·, .
lit -> LITCHAR ·, ;
lit -> LITCHAR ·, &&
lit -> LITCHAR ·, ||
lit -> LITCHAR ·, >
lit -> LITCHAR ·, <
lit -> LITCHAR ·, >=
lit -> LITCHAR ·, <=
lit -> LITCHAR ·, ==
lit -> LITCHAR ·, !=
lit -> LITCHAR ·, +
lit -> LITCHAR ·, -
lit -> LITCHAR ·, *
lit -> LITCHAR ·, /
lit -> LITCHAR ·, )
lit -> LITCHAR ·, ,
lit -> LITCHAR ·, ]
***EndSet***
***EndState***
***State***
40
I_40_98_136_339_373_437_470_532_565_852_885_952
***Set***
lit -> LITSTRING ·, .
lit -> LITSTRING ·, ;
lit -> LITSTRING ·, &&
lit -> LITSTRING ·, ||
lit -> LITSTRING ·, >
lit -> LITSTRING ·, <
lit -> LITSTRING ·, >=
lit -> LITSTRING ·, <=
lit -> LITSTRING ·, ==
lit -> LITSTRING ·, !=
lit -> LITSTRING ·, +
lit -> LITSTRING ·, -
lit -> LITSTRING ·, *
lit -> LITSTRING ·, /
lit -> LITSTRING ·, )
lit -> LITSTRING ·, ,
lit -> LITSTRING ·, ]
***EndSet***
***EndState***
***State***
41
I_41_212
***Set***
call -> ID · ( args ), ;
incdec -> ID · ++, ;
incdec -> ID · --, ;
stype -> ID ·, ID
lvalue -> ID ·, =
lvalue -> ID ·, +=
lvalue -> ID ·, -=
lvalue -> ID ·, *=
lvalue -> ID ·, /=
lvalue -> ID ·, %=
primary -> ID ·, .
idBracket -> ID · [ optidx ], ID
idBracket -> ID · [ optidx ], =
idBracket -> ID · [ optidx ], +=
idBracket -> ID · [ optidx ], -=
idBracket -> ID · [ optidx ], *=
idBracket -> ID · [ optidx ], /=
idBracket -> ID · [ optidx ], %=
call -> ID · ( args ), .
idBracket -> ID · [ optidx ], .
stype -> ID ·, )
idBracket -> ID · [ optidx ], )
incdec -> ID · ++, )
incdec -> ID · --, )
primary -> ID ·, )
incdec -> ID · ++, &&
incdec -> ID · --, &&
primary -> ID ·, &&
incdec -> ID · ++, ||
incdec -> ID · --, ||
primary -> ID ·, ||
call -> ID · ( args ), )
call -> ID · ( args ), &&
call -> ID · ( args ), ||
incdec -> ID · ++, >
incdec -> ID · --, >
primary -> ID ·, >
incdec -> ID · ++, <
incdec -> ID · --, <
primary -> ID ·, <
incdec -> ID · ++, >=
incdec -> ID · --, >=
primary -> ID ·, >=
incdec -> ID · ++, <=
incdec -> ID · --, <=
primary -> ID ·, <=
incdec -> ID · ++, ==
incdec -> ID · --, ==
primary -> ID ·, ==
incdec -> ID · ++, !=
incdec -> ID · --, !=
primary -> ID ·, !=
incdec -> ID · ++, +
incdec -> ID · --, +
primary -> ID ·, +
incdec -> ID · ++, -
incdec -> ID · --, -
primary -> ID ·, -
incdec -> ID · ++, *
incdec -> ID · --, *
primary -> ID ·, *
incdec -> ID · ++, /
incdec -> ID · --, /
primary -> ID ·, /
idBracket -> ID · [ optidx ], &&
idBracket -> ID · [ optidx ], ||
call -> ID · ( args ), >
call -> ID · ( args ), <
call -> ID · ( args ), >=
call -> ID · ( args ), <=
call -> ID · ( args ), ==
call -> ID · ( args ), !=
call -> ID · ( args ), +
call -> ID · ( args ), -
call -> ID · ( args ), *
call -> ID · ( args ), /
idBracket -> ID · [ optidx ], >
idBracket -> ID · [ optidx ], <
idBracket -> ID · [ optidx ], >=
idBracket -> ID · [ optidx ], <=
idBracket -> ID · [ optidx ], ==
idBracket -> ID · [ optidx ], !=
idBracket -> ID · [ optidx ], +
idBracket -> ID · [ optidx ], -
idBracket -> ID · [ optidx ], *
idBracket -> ID · [ optidx ], /
***EndSet***
***EndState***
***State***
42
I_42
***Set***
namespaceusings -> namespaceusings namespaceusing ·, namespace
namespaceusings -> namespaceusings namespaceusing ·, {
namespaceusings -> namespaceusings namespaceusing ·, ID
namespaceusings -> namespaceusings namespaceusing ·, void
namespaceusings -> namespaceusings namespaceusing ·, bool
namespaceusings -> namespaceusings namespaceusing ·, int
namespaceusings -> namespaceusings namespaceusing ·, float
namespaceusings -> namespaceusings namespaceusing ·, double
namespaceusings -> namespaceusings namespaceusing ·, char
namespaceusings -> namespaceusings namespaceusing ·, string
namespaceusings -> namespaceusings namespaceusing ·, extern
namespaceusings -> namespaceusings namespaceusing ·, class
namespaceusings -> namespaceusings namespaceusing ·, (
namespaceusings -> namespaceusings namespaceusing ·, this
namespaceusings -> namespaceusings namespaceusing ·, new
namespaceusings -> namespaceusings namespaceusing ·, LITBOOL
namespaceusings -> namespaceusings namespaceusing ·, LITINT
namespaceusings -> namespaceusings namespaceusing ·, LITFLOAT
namespaceusings -> namespaceusings namespaceusing ·, LITDOUBLE
namespaceusings -> namespaceusings namespaceusing ·, LITCHAR
namespaceusings -> namespaceusings namespaceusing ·, LITSTRING
namespaceusings -> namespaceusings namespaceusing ·, null
namespaceusings -> namespaceusings namespaceusing ·, ++
namespaceusings -> namespaceusings namespaceusing ·, --
namespaceusings -> namespaceusings namespaceusing ·, break
namespaceusings -> namespaceusings namespaceusing ·, return
namespaceusings -> namespaceusings namespaceusing ·, delete
namespaceusings -> namespaceusings namespaceusing ·, while
namespaceusings -> namespaceusings namespaceusing ·, for
namespaceusings -> namespaceusings namespaceusing ·, if
namespaceusings -> namespaceusings namespaceusing ·, $
namespaceusings -> namespaceusings namespaceusing ·, using
***EndSet***
***EndState***
***State***
43
I_43
***Set***
S -> importations namespaceusings statements ·, $
statements -> statements · stmt, $
statements -> statements · stmt, namespace
statements -> statements · stmt, {
statements -> statements · stmt, ID
statements -> statements · stmt, void
statements -> statements · stmt, bool
statements -> statements · stmt, int
statements -> statements · stmt, float
statements -> statements · stmt, double
statements -> statements · stmt, char
statements -> statements · stmt, string
statements -> statements · stmt, extern
statements -> statements · stmt, class
statements -> statements · stmt, (
statements -> statements · stmt, this
statements -> statements · stmt, new
statements -> statements · stmt, LITBOOL
statements -> statements · stmt, LITINT
statements -> statements · stmt, LITFLOAT
statements -> statements · stmt, LITDOUBLE
statements -> statements · stmt, LITCHAR
statements -> statements · stmt, LITSTRING
statements -> statements · stmt, null
statements -> statements · stmt, ++
statements -> statements · stmt, --
statements -> statements · stmt, break
statements -> statements · stmt, return
statements -> statements · stmt, delete
statements -> statements · stmt, while
statements -> statements · stmt, for
statements -> statements · stmt, if
stmt -> · namespaceblock, $
stmt -> · statementblock, $
stmt -> · declstmt, $
stmt -> · stmtexpr ;, $
stmt -> · break ;, $
stmt -> · return expr ;, $
stmt -> · return ;, $
stmt -> · delete expr ;, $
stmt -> · while ( expr ) stmt, $
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, $
stmt -> · if ( expr ) stmt elifclauselist elseclause, $
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, $
statementblock -> · { statements }, $
declstmt -> · type ID = expr ;, $
declstmt -> · type ID ( params ) { statements }, $
declstmt -> · extern type ID ( params ) ;, $
declstmt -> · class ID inherit { declstatements }, $
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
***EndSet***
***EndState***
***State***
44
I_44_167_261_762_1064_1183
***Set***
stmt -> namespaceblock ·, $
stmt -> namespaceblock ·, namespace
stmt -> namespaceblock ·, {
stmt -> namespaceblock ·, ID
stmt -> namespaceblock ·, void
stmt -> namespaceblock ·, bool
stmt -> namespaceblock ·, int
stmt -> namespaceblock ·, float
stmt -> namespaceblock ·, double
stmt -> namespaceblock ·, char
stmt -> namespaceblock ·, string
stmt -> namespaceblock ·, extern
stmt -> namespaceblock ·, class
stmt -> namespaceblock ·, (
stmt -> namespaceblock ·, this
stmt -> namespaceblock ·, new
stmt -> namespaceblock ·, LITBOOL
stmt -> namespaceblock ·, LITINT
stmt -> namespaceblock ·, LITFLOAT
stmt -> namespaceblock ·, LITDOUBLE
stmt -> namespaceblock ·, LITCHAR
stmt -> namespaceblock ·, LITSTRING
stmt -> namespaceblock ·, null
stmt -> namespaceblock ·, ++
stmt -> namespaceblock ·, --
stmt -> namespaceblock ·, break
stmt -> namespaceblock ·, return
stmt -> namespaceblock ·, delete
stmt -> namespaceblock ·, while
stmt -> namespaceblock ·, for
stmt -> namespaceblock ·, if
stmt -> namespaceblock ·, }
stmt -> namespaceblock ·, &&
stmt -> namespaceblock ·, ||
stmt -> namespaceblock ·, +
stmt -> namespaceblock ·, -
stmt -> namespaceblock ·, *
stmt -> namespaceblock ·, /
stmt -> namespaceblock ·, !
stmt -> namespaceblock ·, else
***EndSet***
***EndState***
***State***
45
I_45_168_262_763_1065_1184
***Set***
stmt -> statementblock ·, $
stmt -> statementblock ·, namespace
stmt -> statementblock ·, {
stmt -> statementblock ·, ID
stmt -> statementblock ·, void
stmt -> statementblock ·, bool
stmt -> statementblock ·, int
stmt -> statementblock ·, float
stmt -> statementblock ·, double
stmt -> statementblock ·, char
stmt -> statementblock ·, string
stmt -> statementblock ·, extern
stmt -> statementblock ·, class
stmt -> statementblock ·, (
stmt -> statementblock ·, this
stmt -> statementblock ·, new
stmt -> statementblock ·, LITBOOL
stmt -> statementblock ·, LITINT
stmt -> statementblock ·, LITFLOAT
stmt -> statementblock ·, LITDOUBLE
stmt -> statementblock ·, LITCHAR
stmt -> statementblock ·, LITSTRING
stmt -> statementblock ·, null
stmt -> statementblock ·, ++
stmt -> statementblock ·, --
stmt -> statementblock ·, break
stmt -> statementblock ·, return
stmt -> statementblock ·, delete
stmt -> statementblock ·, while
stmt -> statementblock ·, for
stmt -> statementblock ·, if
stmt -> statementblock ·, }
stmt -> statementblock ·, &&
stmt -> statementblock ·, ||
stmt -> statementblock ·, +
stmt -> statementblock ·, -
stmt -> statementblock ·, *
stmt -> statementblock ·, /
stmt -> statementblock ·, !
stmt -> statementblock ·, else
***EndSet***
***EndState***
***State***
46
I_46_169
***Set***
statements -> stmt ·, $
statements -> stmt ·, namespace
statements -> stmt ·, {
statements -> stmt ·, ID
statements -> stmt ·, void
statements -> stmt ·, bool
statements -> stmt ·, int
statements -> stmt ·, float
statements -> stmt ·, double
statements -> stmt ·, char
statements -> stmt ·, string
statements -> stmt ·, extern
statements -> stmt ·, class
statements -> stmt ·, (
statements -> stmt ·, this
statements -> stmt ·, new
statements -> stmt ·, LITBOOL
statements -> stmt ·, LITINT
statements -> stmt ·, LITFLOAT
statements -> stmt ·, LITDOUBLE
statements -> stmt ·, LITCHAR
statements -> stmt ·, LITSTRING
statements -> stmt ·, null
statements -> stmt ·, ++
statements -> stmt ·, --
statements -> stmt ·, break
statements -> stmt ·, return
statements -> stmt ·, delete
statements -> stmt ·, while
statements -> stmt ·, for
statements -> stmt ·, if
statements -> stmt ·, }
***EndSet***
***EndState***
***State***
47
I_47_170_264_765_1067_1186
***Set***
stmt -> declstmt ·, $
stmt -> declstmt ·, namespace
stmt -> declstmt ·, {
stmt -> declstmt ·, ID
stmt -> declstmt ·, void
stmt -> declstmt ·, bool
stmt -> declstmt ·, int
stmt -> declstmt ·, float
stmt -> declstmt ·, double
stmt -> declstmt ·, char
stmt -> declstmt ·, string
stmt -> declstmt ·, extern
stmt -> declstmt ·, class
stmt -> declstmt ·, (
stmt -> declstmt ·, this
stmt -> declstmt ·, new
stmt -> declstmt ·, LITBOOL
stmt -> declstmt ·, LITINT
stmt -> declstmt ·, LITFLOAT
stmt -> declstmt ·, LITDOUBLE
stmt -> declstmt ·, LITCHAR
stmt -> declstmt ·, LITSTRING
stmt -> declstmt ·, null
stmt -> declstmt ·, ++
stmt -> declstmt ·, --
stmt -> declstmt ·, break
stmt -> declstmt ·, return
stmt -> declstmt ·, delete
stmt -> declstmt ·, while
stmt -> declstmt ·, for
stmt -> declstmt ·, if
stmt -> declstmt ·, }
stmt -> declstmt ·, &&
stmt -> declstmt ·, ||
stmt -> declstmt ·, +
stmt -> declstmt ·, -
stmt -> declstmt ·, *
stmt -> declstmt ·, /
stmt -> declstmt ·, !
stmt -> declstmt ·, else
***EndSet***
***EndState***
***State***
48
I_48_171_265_766_1068_1187
***Set***
stmt -> stmtexpr · ;, $
stmt -> stmtexpr · ;, namespace
stmt -> stmtexpr · ;, {
stmt -> stmtexpr · ;, ID
stmt -> stmtexpr · ;, void
stmt -> stmtexpr · ;, bool
stmt -> stmtexpr · ;, int
stmt -> stmtexpr · ;, float
stmt -> stmtexpr · ;, double
stmt -> stmtexpr · ;, char
stmt -> stmtexpr · ;, string
stmt -> stmtexpr · ;, extern
stmt -> stmtexpr · ;, class
stmt -> stmtexpr · ;, (
stmt -> stmtexpr · ;, this
stmt -> stmtexpr · ;, new
stmt -> stmtexpr · ;, LITBOOL
stmt -> stmtexpr · ;, LITINT
stmt -> stmtexpr · ;, LITFLOAT
stmt -> stmtexpr · ;, LITDOUBLE
stmt -> stmtexpr · ;, LITCHAR
stmt -> stmtexpr · ;, LITSTRING
stmt -> stmtexpr · ;, null
stmt -> stmtexpr · ;, ++
stmt -> stmtexpr · ;, --
stmt -> stmtexpr · ;, break
stmt -> stmtexpr · ;, return
stmt -> stmtexpr · ;, delete
stmt -> stmtexpr · ;, while
stmt -> stmtexpr · ;, for
stmt -> stmtexpr · ;, if
stmt -> stmtexpr · ;, }
stmt -> stmtexpr · ;, &&
stmt -> stmtexpr · ;, ||
stmt -> stmtexpr · ;, +
stmt -> stmtexpr · ;, -
stmt -> stmtexpr · ;, *
stmt -> stmtexpr · ;, /
stmt -> stmtexpr · ;, !
stmt -> stmtexpr · ;, else
***EndSet***
***EndState***
***State***
49
I_49_1002
***Set***
stmtexpr -> assign ·, ;
stmtexpr -> assign ·, )
***EndSet***
***EndState***
***State***
50
I_50_1003
***Set***
stmtexpr -> call ·, ;
primary -> call ·, .
stmtexpr -> call ·, )
***EndSet***
***EndState***
***State***
51
I_51_102_140_343
***Set***
lvalue -> indexaccess ·, =
lvalue -> indexaccess ·, +=
lvalue -> indexaccess ·, -=
lvalue -> indexaccess ·, *=
lvalue -> indexaccess ·, /=
lvalue -> indexaccess ·, %=
primary -> indexaccess ·, .
primary -> indexaccess ·, ;
primary -> indexaccess ·, &&
primary -> indexaccess ·, ||
primary -> indexaccess ·, >
primary -> indexaccess ·, <
primary -> indexaccess ·, >=
primary -> indexaccess ·, <=
primary -> indexaccess ·, ==
primary -> indexaccess ·, !=
primary -> indexaccess ·, +
primary -> indexaccess ·, -
primary -> indexaccess ·, *
primary -> indexaccess ·, /
primary -> indexaccess ·, )
primary -> indexaccess ·, ,
***EndSet***
***EndState***
***State***
52
I_52_1004
***Set***
stmtexpr -> newobj ·, ;
primary -> newobj ·, .
stmtexpr -> newobj ·, )
***EndSet***
***EndState***
***State***
53
I_53_104_142_345_378_442_475_537_570_857_890_957
***Set***
primary -> newarr ·, .
primary -> newarr ·, ;
primary -> newarr ·, &&
primary -> newarr ·, ||
primary -> newarr ·, >
primary -> newarr ·, <
primary -> newarr ·, >=
primary -> newarr ·, <=
primary -> newarr ·, ==
primary -> newarr ·, !=
primary -> newarr ·, +
primary -> newarr ·, -
primary -> newarr ·, *
primary -> newarr ·, /
primary -> newarr ·, )
primary -> newarr ·, ,
primary -> newarr ·, ]
***EndSet***
***EndState***
***State***
54
I_54_1005
***Set***
stmtexpr -> incdec ·, ;
stmtexpr -> incdec ·, )
***EndSet***
***EndState***
***State***
55
I_55_172_266_681_767_1069_1188
***Set***
declstmt -> type · ID = expr ;, $
declstmt -> type · ID ( params ) { statements }, $
declstmt -> type · ID = expr ;, namespace
declstmt -> type · ID ( params ) { statements }, namespace
declstmt -> type · ID = expr ;, {
declstmt -> type · ID ( params ) { statements }, {
declstmt -> type · ID = expr ;, ID
declstmt -> type · ID ( params ) { statements }, ID
declstmt -> type · ID = expr ;, void
declstmt -> type · ID ( params ) { statements }, void
declstmt -> type · ID = expr ;, bool
declstmt -> type · ID ( params ) { statements }, bool
declstmt -> type · ID = expr ;, int
declstmt -> type · ID ( params ) { statements }, int
declstmt -> type · ID = expr ;, float
declstmt -> type · ID ( params ) { statements }, float
declstmt -> type · ID = expr ;, double
declstmt -> type · ID ( params ) { statements }, double
declstmt -> type · ID = expr ;, char
declstmt -> type · ID ( params ) { statements }, char
declstmt -> type · ID = expr ;, string
declstmt -> type · ID ( params ) { statements }, string
declstmt -> type · ID = expr ;, extern
declstmt -> type · ID ( params ) { statements }, extern
declstmt -> type · ID = expr ;, class
declstmt -> type · ID ( params ) { statements }, class
declstmt -> type · ID = expr ;, (
declstmt -> type · ID ( params ) { statements }, (
declstmt -> type · ID = expr ;, this
declstmt -> type · ID ( params ) { statements }, this
declstmt -> type · ID = expr ;, new
declstmt -> type · ID ( params ) { statements }, new
declstmt -> type · ID = expr ;, LITBOOL
declstmt -> type · ID ( params ) { statements }, LITBOOL
declstmt -> type · ID = expr ;, LITINT
declstmt -> type · ID ( params ) { statements }, LITINT
declstmt -> type · ID = expr ;, LITFLOAT
declstmt -> type · ID ( params ) { statements }, LITFLOAT
declstmt -> type · ID = expr ;, LITDOUBLE
declstmt -> type · ID ( params ) { statements }, LITDOUBLE
declstmt -> type · ID = expr ;, LITCHAR
declstmt -> type · ID ( params ) { statements }, LITCHAR
declstmt -> type · ID = expr ;, LITSTRING
declstmt -> type · ID ( params ) { statements }, LITSTRING
declstmt -> type · ID = expr ;, null
declstmt -> type · ID ( params ) { statements }, null
declstmt -> type · ID = expr ;, ++
declstmt -> type · ID ( params ) { statements }, ++
declstmt -> type · ID = expr ;, --
declstmt -> type · ID ( params ) { statements }, --
declstmt -> type · ID = expr ;, break
declstmt -> type · ID ( params ) { statements }, break
declstmt -> type · ID = expr ;, return
declstmt -> type · ID ( params ) { statements }, return
declstmt -> type · ID = expr ;, delete
declstmt -> type · ID ( params ) { statements }, delete
declstmt -> type · ID = expr ;, while
declstmt -> type · ID ( params ) { statements }, while
declstmt -> type · ID = expr ;, for
declstmt -> type · ID ( params ) { statements }, for
declstmt -> type · ID = expr ;, if
declstmt -> type · ID ( params ) { statements }, if
declstmt -> type · ID = expr ;, }
declstmt -> type · ID ( params ) { statements }, }
declstmt -> type · ID = expr ;, &&
declstmt -> type · ID ( params ) { statements }, &&
declstmt -> type · ID = expr ;, ||
declstmt -> type · ID ( params ) { statements }, ||
declstmt -> type · ID = expr ;, +
declstmt -> type · ID ( params ) { statements }, +
declstmt -> type · ID = expr ;, -
declstmt -> type · ID ( params ) { statements }, -
declstmt -> type · ID = expr ;, *
declstmt -> type · ID ( params ) { statements }, *
declstmt -> type · ID = expr ;, /
declstmt -> type · ID ( params ) { statements }, /
declstmt -> type · ID = expr ;, !
declstmt -> type · ID ( params ) { statements }, !
declstmt -> type · ID = expr ;, else
declstmt -> type · ID ( params ) { statements }, else
***EndSet***
***EndState***
***State***
56
I_56_214
***Set***
type -> stype ·, ID
type -> stype ·, )
***EndSet***
***EndState***
***State***
57
I_57_215
***Set***
type -> arrtype ·, ID
type -> arrtype ·, )
***EndSet***
***EndState***
***State***
58
I_58_216
***Set***
stype -> primitive ·, ID
primitiveBracket -> primitive · [ optidx ], ID
stype -> primitive ·, )
primitiveBracket -> primitive · [ optidx ], )
***EndSet***
***EndState***
***State***
59
I_59
***Set***
memberaccess -> primary · . ID, (
memberaccess -> primary · . ID, =
memberaccess -> primary · . ID, +=
memberaccess -> primary · . ID, -=
memberaccess -> primary · . ID, *=
memberaccess -> primary · . ID, /=
memberaccess -> primary · . ID, %=
memberaccess -> primary · . ID, [
memberaccess -> primary · . ID, .
***EndSet***
***EndState***
***State***
60
I_60_113_151_354_384_448_480_543_575_863_895_962
***Set***
primary -> lit ·, .
primary -> lit ·, ;
primary -> lit ·, &&
primary -> lit ·, ||
primary -> lit ·, >
primary -> lit ·, <
primary -> lit ·, >=
primary -> lit ·, <=
primary -> lit ·, ==
primary -> lit ·, !=
primary -> lit ·, +
primary -> lit ·, -
primary -> lit ·, *
primary -> lit ·, /
primary -> lit ·, )
primary -> lit ·, ,
primary -> lit ·, ]
***EndSet***
***EndState***
***State***
61
I_61_153_356
***Set***
assign -> lvalue · = expr, ;
assign -> lvalue · += expr, ;
assign -> lvalue · -= expr, ;
assign -> lvalue · *= expr, ;
assign -> lvalue · /= expr, ;
assign -> lvalue · %= expr, ;
assign -> lvalue · = expr, )
assign -> lvalue · += expr, )
assign -> lvalue · -= expr, )
assign -> lvalue · *= expr, )
assign -> lvalue · /= expr, )
assign -> lvalue · %= expr, )
assign -> lvalue · = expr, ,
assign -> lvalue · += expr, ,
assign -> lvalue · -= expr, ,
assign -> lvalue · *= expr, ,
assign -> lvalue · /= expr, ,
assign -> lvalue · %= expr, ,
***EndSet***
***EndState***
***State***
62
I_62_115_154_357_1006
***Set***
call -> memberaccess · ( args ), ;
lvalue -> memberaccess ·, =
lvalue -> memberaccess ·, +=
lvalue -> memberaccess ·, -=
lvalue -> memberaccess ·, *=
lvalue -> memberaccess ·, /=
lvalue -> memberaccess ·, %=
indexaccess -> memberaccess · [ aexpr ], =
indexaccess -> memberaccess · [ aexpr ], +=
indexaccess -> memberaccess · [ aexpr ], -=
indexaccess -> memberaccess · [ aexpr ], *=
indexaccess -> memberaccess · [ aexpr ], /=
indexaccess -> memberaccess · [ aexpr ], %=
primary -> memberaccess ·, .
indexaccess -> memberaccess · [ aexpr ], .
call -> memberaccess · ( args ), .
primary -> memberaccess ·, ;
primary -> memberaccess ·, &&
primary -> memberaccess ·, ||
indexaccess -> memberaccess · [ aexpr ], ;
indexaccess -> memberaccess · [ aexpr ], &&
call -> memberaccess · ( args ), &&
indexaccess -> memberaccess · [ aexpr ], ||
call -> memberaccess · ( args ), ||
primary -> memberaccess ·, >
primary -> memberaccess ·, <
primary -> memberaccess ·, >=
primary -> memberaccess ·, <=
primary -> memberaccess ·, ==
primary -> memberaccess ·, !=
primary -> memberaccess ·, +
primary -> memberaccess ·, -
primary -> memberaccess ·, *
primary -> memberaccess ·, /
indexaccess -> memberaccess · [ aexpr ], >
call -> memberaccess · ( args ), >
indexaccess -> memberaccess · [ aexpr ], <
call -> memberaccess · ( args ), <
indexaccess -> memberaccess · [ aexpr ], >=
call -> memberaccess · ( args ), >=
indexaccess -> memberaccess · [ aexpr ], <=
call -> memberaccess · ( args ), <=
indexaccess -> memberaccess · [ aexpr ], ==
call -> memberaccess · ( args ), ==
indexaccess -> memberaccess · [ aexpr ], !=
call -> memberaccess · ( args ), !=
indexaccess -> memberaccess · [ aexpr ], +
call -> memberaccess · ( args ), +
indexaccess -> memberaccess · [ aexpr ], -
call -> memberaccess · ( args ), -
indexaccess -> memberaccess · [ aexpr ], *
call -> memberaccess · ( args ), *
indexaccess -> memberaccess · [ aexpr ], /
call -> memberaccess · ( args ), /
primary -> memberaccess ·, )
indexaccess -> memberaccess · [ aexpr ], )
call -> memberaccess · ( args ), )
primary -> memberaccess ·, ,
indexaccess -> memberaccess · [ aexpr ], ,
call -> memberaccess · ( args ), ,
***EndSet***
***EndState***
***State***
63
I_63_218
***Set***
arrtype -> stypeBracket ·, ID
arrtype -> stypeBracket ·, )
***EndSet***
***EndState***
***State***
64
I_64_219
***Set***
stypeBracket -> idBracket ·, ID
indexaccess -> idBracket ·, =
indexaccess -> idBracket ·, +=
indexaccess -> idBracket ·, -=
indexaccess -> idBracket ·, *=
indexaccess -> idBracket ·, /=
indexaccess -> idBracket ·, %=
indexaccess -> idBracket ·, .
stypeBracket -> idBracket ·, )
indexaccess -> idBracket ·, )
indexaccess -> idBracket ·, &&
indexaccess -> idBracket ·, ||
indexaccess -> idBracket ·, >
indexaccess -> idBracket ·, <
indexaccess -> idBracket ·, >=
indexaccess -> idBracket ·, <=
indexaccess -> idBracket ·, ==
indexaccess -> idBracket ·, !=
indexaccess -> idBracket ·, +
indexaccess -> idBracket ·, -
indexaccess -> idBracket ·, *
indexaccess -> idBracket ·, /
***EndSet***
***EndState***
***State***
65
I_65_84_204_220_273_606_649_701_723_780_802_1084_1106_1140
***Set***
stypeBracket -> primitiveBracket ·, ID
stypeBracket -> primitiveBracket ·, .
stypeBracket -> primitiveBracket ·, ;
stypeBracket -> primitiveBracket ·, &&
stypeBracket -> primitiveBracket ·, ||
stypeBracket -> primitiveBracket ·, >
stypeBracket -> primitiveBracket ·, <
stypeBracket -> primitiveBracket ·, >=
stypeBracket -> primitiveBracket ·, <=
stypeBracket -> primitiveBracket ·, ==
stypeBracket -> primitiveBracket ·, !=
stypeBracket -> primitiveBracket ·, +
stypeBracket -> primitiveBracket ·, -
stypeBracket -> primitiveBracket ·, *
stypeBracket -> primitiveBracket ·, /
stypeBracket -> primitiveBracket ·, )
stypeBracket -> primitiveBracket ·, ,
stypeBracket -> primitiveBracket ·, ]
***EndSet***
***EndState***
***State***
66
I_66
***Set***
importation -> import < LITSTRING > ·, using
importation -> import < LITSTRING > ·, namespace
importation -> import < LITSTRING > ·, {
importation -> import < LITSTRING > ·, ID
importation -> import < LITSTRING > ·, void
importation -> import < LITSTRING > ·, bool
importation -> import < LITSTRING > ·, int
importation -> import < LITSTRING > ·, float
importation -> import < LITSTRING > ·, double
importation -> import < LITSTRING > ·, char
importation -> import < LITSTRING > ·, string
importation -> import < LITSTRING > ·, extern
importation -> import < LITSTRING > ·, class
importation -> import < LITSTRING > ·, (
importation -> import < LITSTRING > ·, this
importation -> import < LITSTRING > ·, new
importation -> import < LITSTRING > ·, LITBOOL
importation -> import < LITSTRING > ·, LITINT
importation -> import < LITSTRING > ·, LITFLOAT
importation -> import < LITSTRING > ·, LITDOUBLE
importation -> import < LITSTRING > ·, LITCHAR
importation -> import < LITSTRING > ·, LITSTRING
importation -> import < LITSTRING > ·, null
importation -> import < LITSTRING > ·, ++
importation -> import < LITSTRING > ·, --
importation -> import < LITSTRING > ·, break
importation -> import < LITSTRING > ·, return
importation -> import < LITSTRING > ·, delete
importation -> import < LITSTRING > ·, while
importation -> import < LITSTRING > ·, for
importation -> import < LITSTRING > ·, if
importation -> import < LITSTRING > ·, $
importation -> import < LITSTRING > ·, import
***EndSet***
***EndState***
***State***
67
I_67
***Set***
namespaceusing -> using ID ; ·, namespace
namespaceusing -> using ID ; ·, {
namespaceusing -> using ID ; ·, ID
namespaceusing -> using ID ; ·, void
namespaceusing -> using ID ; ·, bool
namespaceusing -> using ID ; ·, int
namespaceusing -> using ID ; ·, float
namespaceusing -> using ID ; ·, double
namespaceusing -> using ID ; ·, char
namespaceusing -> using ID ; ·, string
namespaceusing -> using ID ; ·, extern
namespaceusing -> using ID ; ·, class
namespaceusing -> using ID ; ·, (
namespaceusing -> using ID ; ·, this
namespaceusing -> using ID ; ·, new
namespaceusing -> using ID ; ·, LITBOOL
namespaceusing -> using ID ; ·, LITINT
namespaceusing -> using ID ; ·, LITFLOAT
namespaceusing -> using ID ; ·, LITDOUBLE
namespaceusing -> using ID ; ·, LITCHAR
namespaceusing -> using ID ; ·, LITSTRING
namespaceusing -> using ID ; ·, null
namespaceusing -> using ID ; ·, ++
namespaceusing -> using ID ; ·, --
namespaceusing -> using ID ; ·, break
namespaceusing -> using ID ; ·, return
namespaceusing -> using ID ; ·, delete
namespaceusing -> using ID ; ·, while
namespaceusing -> using ID ; ·, for
namespaceusing -> using ID ; ·, if
namespaceusing -> using ID ; ·, $
namespaceusing -> using ID ; ·, using
***EndSet***
***EndState***
***State***
68
I_68_311_491_1010_1231_1292
***Set***
namespaceblock -> namespace ID · { statements }, $
namespaceblock -> namespace ID · { statements }, namespace
namespaceblock -> namespace ID · { statements }, {
namespaceblock -> namespace ID · { statements }, ID
namespaceblock -> namespace ID · { statements }, void
namespaceblock -> namespace ID · { statements }, bool
namespaceblock -> namespace ID · { statements }, int
namespaceblock -> namespace ID · { statements }, float
namespaceblock -> namespace ID · { statements }, double
namespaceblock -> namespace ID · { statements }, char
namespaceblock -> namespace ID · { statements }, string
namespaceblock -> namespace ID · { statements }, extern
namespaceblock -> namespace ID · { statements }, class
namespaceblock -> namespace ID · { statements }, (
namespaceblock -> namespace ID · { statements }, this
namespaceblock -> namespace ID · { statements }, new
namespaceblock -> namespace ID · { statements }, LITBOOL
namespaceblock -> namespace ID · { statements }, LITINT
namespaceblock -> namespace ID · { statements }, LITFLOAT
namespaceblock -> namespace ID · { statements }, LITDOUBLE
namespaceblock -> namespace ID · { statements }, LITCHAR
namespaceblock -> namespace ID · { statements }, LITSTRING
namespaceblock -> namespace ID · { statements }, null
namespaceblock -> namespace ID · { statements }, ++
namespaceblock -> namespace ID · { statements }, --
namespaceblock -> namespace ID · { statements }, break
namespaceblock -> namespace ID · { statements }, return
namespaceblock -> namespace ID · { statements }, delete
namespaceblock -> namespace ID · { statements }, while
namespaceblock -> namespace ID · { statements }, for
namespaceblock -> namespace ID · { statements }, if
namespaceblock -> namespace ID · { statements }, }
namespaceblock -> namespace ID · { statements }, &&
namespaceblock -> namespace ID · { statements }, ||
namespaceblock -> namespace ID · { statements }, +
namespaceblock -> namespace ID · { statements }, -
namespaceblock -> namespace ID · { statements }, *
namespaceblock -> namespace ID · { statements }, /
namespaceblock -> namespace ID · { statements }, !
namespaceblock -> namespace ID · { statements }, else
***EndSet***
***EndState***
***State***
69
I_69
***Set***
stype -> ID ·, ID
idBracket -> ID · [ optidx ], ID
***EndSet***
***EndState***
***State***
70
I_70_312_492_930_1011_1232_1293
***Set***
declstmt -> extern type · ID ( params ) ;, $
declstmt -> extern type · ID ( params ) ;, namespace
declstmt -> extern type · ID ( params ) ;, {
declstmt -> extern type · ID ( params ) ;, ID
declstmt -> extern type · ID ( params ) ;, void
declstmt -> extern type · ID ( params ) ;, bool
declstmt -> extern type · ID ( params ) ;, int
declstmt -> extern type · ID ( params ) ;, float
declstmt -> extern type · ID ( params ) ;, double
declstmt -> extern type · ID ( params ) ;, char
declstmt -> extern type · ID ( params ) ;, string
declstmt -> extern type · ID ( params ) ;, extern
declstmt -> extern type · ID ( params ) ;, class
declstmt -> extern type · ID ( params ) ;, (
declstmt -> extern type · ID ( params ) ;, this
declstmt -> extern type · ID ( params ) ;, new
declstmt -> extern type · ID ( params ) ;, LITBOOL
declstmt -> extern type · ID ( params ) ;, LITINT
declstmt -> extern type · ID ( params ) ;, LITFLOAT
declstmt -> extern type · ID ( params ) ;, LITDOUBLE
declstmt -> extern type · ID ( params ) ;, LITCHAR
declstmt -> extern type · ID ( params ) ;, LITSTRING
declstmt -> extern type · ID ( params ) ;, null
declstmt -> extern type · ID ( params ) ;, ++
declstmt -> extern type · ID ( params ) ;, --
declstmt -> extern type · ID ( params ) ;, break
declstmt -> extern type · ID ( params ) ;, return
declstmt -> extern type · ID ( params ) ;, delete
declstmt -> extern type · ID ( params ) ;, while
declstmt -> extern type · ID ( params ) ;, for
declstmt -> extern type · ID ( params ) ;, if
declstmt -> extern type · ID ( params ) ;, }
declstmt -> extern type · ID ( params ) ;, &&
declstmt -> extern type · ID ( params ) ;, ||
declstmt -> extern type · ID ( params ) ;, +
declstmt -> extern type · ID ( params ) ;, -
declstmt -> extern type · ID ( params ) ;, *
declstmt -> extern type · ID ( params ) ;, /
declstmt -> extern type · ID ( params ) ;, !
declstmt -> extern type · ID ( params ) ;, else
***EndSet***
***EndState***
***State***
71
I_71_83_203_272_605_648_700_722_779_801_1083_1105_1139
***Set***
stypeBracket -> idBracket ·, ID
stypeBracket -> idBracket ·, .
stypeBracket -> idBracket ·, ;
stypeBracket -> idBracket ·, &&
stypeBracket -> idBracket ·, ||
stypeBracket -> idBracket ·, >
stypeBracket -> idBracket ·, <
stypeBracket -> idBracket ·, >=
stypeBracket -> idBracket ·, <=
stypeBracket -> idBracket ·, ==
stypeBracket -> idBracket ·, !=
stypeBracket -> idBracket ·, +
stypeBracket -> idBracket ·, -
stypeBracket -> idBracket ·, *
stypeBracket -> idBracket ·, /
stypeBracket -> idBracket ·, )
stypeBracket -> idBracket ·, ,
stypeBracket -> idBracket ·, ]
***EndSet***
***EndState***
***State***
72
I_72_313_493_931_1012_1233_1294
***Set***
declstmt -> class ID · inherit { declstatements }, $
declstmt -> class ID · inherit { declstatements }, namespace
declstmt -> class ID · inherit { declstatements }, {
declstmt -> class ID · inherit { declstatements }, ID
declstmt -> class ID · inherit { declstatements }, void
declstmt -> class ID · inherit { declstatements }, bool
declstmt -> class ID · inherit { declstatements }, int
declstmt -> class ID · inherit { declstatements }, float
declstmt -> class ID · inherit { declstatements }, double
declstmt -> class ID · inherit { declstatements }, char
declstmt -> class ID · inherit { declstatements }, string
declstmt -> class ID · inherit { declstatements }, extern
declstmt -> class ID · inherit { declstatements }, class
declstmt -> class ID · inherit { declstatements }, (
declstmt -> class ID · inherit { declstatements }, this
declstmt -> class ID · inherit { declstatements }, new
declstmt -> class ID · inherit { declstatements }, LITBOOL
declstmt -> class ID · inherit { declstatements }, LITINT
declstmt -> class ID · inherit { declstatements }, LITFLOAT
declstmt -> class ID · inherit { declstatements }, LITDOUBLE
declstmt -> class ID · inherit { declstatements }, LITCHAR
declstmt -> class ID · inherit { declstatements }, LITSTRING
declstmt -> class ID · inherit { declstatements }, null
declstmt -> class ID · inherit { declstatements }, ++
declstmt -> class ID · inherit { declstatements }, --
declstmt -> class ID · inherit { declstatements }, break
declstmt -> class ID · inherit { declstatements }, return
declstmt -> class ID · inherit { declstatements }, delete
declstmt -> class ID · inherit { declstatements }, while
declstmt -> class ID · inherit { declstatements }, for
declstmt -> class ID · inherit { declstatements }, if
inherit -> · : ID, {
inherit -> ·, {
declstmt -> class ID · inherit { declstatements }, }
declstmt -> class ID · inherit { declstatements }, &&
declstmt -> class ID · inherit { declstatements }, ||
declstmt -> class ID · inherit { declstatements }, +
declstmt -> class ID · inherit { declstatements }, -
declstmt -> class ID · inherit { declstatements }, *
declstmt -> class ID · inherit { declstatements }, /
declstmt -> class ID · inherit { declstatements }, !
declstmt -> class ID · inherit { declstatements }, else
***EndSet***
***EndState***
***State***
73
I_80_200_269_602_645_697_719_776_798_1080_1102_1136_1189
***Set***
newobj -> new ID · ( ), ;
newobj -> new ID · ( ), .
idBracket -> ID · [ optidx ], .
newobj -> new ID · ( ), &&
newobj -> new ID · ( ), ||
newobj -> new ID · ( ), >
newobj -> new ID · ( ), <
newobj -> new ID · ( ), >=
newobj -> new ID · ( ), <=
newobj -> new ID · ( ), ==
newobj -> new ID · ( ), !=
newobj -> new ID · ( ), +
newobj -> new ID · ( ), -
newobj -> new ID · ( ), *
newobj -> new ID · ( ), /
idBracket -> ID · [ optidx ], ;
idBracket -> ID · [ optidx ], &&
idBracket -> ID · [ optidx ], ||
idBracket -> ID · [ optidx ], >
idBracket -> ID · [ optidx ], <
idBracket -> ID · [ optidx ], >=
idBracket -> ID · [ optidx ], <=
idBracket -> ID · [ optidx ], ==
idBracket -> ID · [ optidx ], !=
idBracket -> ID · [ optidx ], +
idBracket -> ID · [ optidx ], -
idBracket -> ID · [ optidx ], *
idBracket -> ID · [ optidx ], /
newobj -> new ID · ( ), )
idBracket -> ID · [ optidx ], )
newobj -> new ID · ( ), ,
idBracket -> ID · [ optidx ], ,
newobj -> new ID · ( ), ]
idBracket -> ID · [ optidx ], ]
***EndSet***
***EndState***
***State***
74
I_81_201_270_603_646_698_720_777_799_1081_1103_1137
***Set***
primitiveBracket -> primitive · [ optidx ], .
primitiveBracket -> primitive · [ optidx ], ;
primitiveBracket -> primitive · [ optidx ], &&
primitiveBracket -> primitive · [ optidx ], ||
primitiveBracket -> primitive · [ optidx ], >
primitiveBracket -> primitive · [ optidx ], <
primitiveBracket -> primitive · [ optidx ], >=
primitiveBracket -> primitive · [ optidx ], <=
primitiveBracket -> primitive · [ optidx ], ==
primitiveBracket -> primitive · [ optidx ], !=
primitiveBracket -> primitive · [ optidx ], +
primitiveBracket -> primitive · [ optidx ], -
primitiveBracket -> primitive · [ optidx ], *
primitiveBracket -> primitive · [ optidx ], /
primitiveBracket -> primitive · [ optidx ], )
primitiveBracket -> primitive · [ optidx ], ,
primitiveBracket -> primitive · [ optidx ], ]
***EndSet***
***EndState***
***State***
75
I_82_202_271_604_647_699_721_778_800_1082_1104_1138
***Set***
newarr -> new stypeBracket ·, .
newarr -> new stypeBracket ·, ;
newarr -> new stypeBracket ·, &&
newarr -> new stypeBracket ·, ||
newarr -> new stypeBracket ·, >
newarr -> new stypeBracket ·, <
newarr -> new stypeBracket ·, >=
newarr -> new stypeBracket ·, <=
newarr -> new stypeBracket ·, ==
newarr -> new stypeBracket ·, !=
newarr -> new stypeBracket ·, +
newarr -> new stypeBracket ·, -
newarr -> new stypeBracket ·, *
newarr -> new stypeBracket ·, /
newarr -> new stypeBracket ·, )
newarr -> new stypeBracket ·, ,
newarr -> new stypeBracket ·, ]
***EndSet***
***EndState***
***State***
76
I_88_126_329_363_427_460_522_555_842_875_942
***Set***
primary -> ( · expr ), .
cast -> ( · type ) factor, ;
primary -> ( · expr ), ;
cast -> ( · type ) factor, &&
primary -> ( · expr ), &&
cast -> ( · type ) factor, ||
primary -> ( · expr ), ||
cast -> ( · type ) factor, >
primary -> ( · expr ), >
cast -> ( · type ) factor, <
primary -> ( · expr ), <
cast -> ( · type ) factor, >=
primary -> ( · expr ), >=
cast -> ( · type ) factor, <=
primary -> ( · expr ), <=
cast -> ( · type ) factor, ==
primary -> ( · expr ), ==
cast -> ( · type ) factor, !=
primary -> ( · expr ), !=
cast -> ( · type ) factor, +
primary -> ( · expr ), +
cast -> ( · type ) factor, -
primary -> ( · expr ), -
cast -> ( · type ) factor, *
primary -> ( · expr ), *
cast -> ( · type ) factor, /
primary -> ( · expr ), /
expr -> · assign, )
expr -> · nexpr, )
type -> · arrtype, )
type -> · stype, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
arrtype -> · stypeBracket, )
stype -> · primitive, )
stype -> · ID, )
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
stypeBracket -> · idBracket, )
stypeBracket -> · primitiveBracket, )
primitive -> · void, )
primitive -> · bool, )
primitive -> · int, )
primitive -> · float, )
primitive -> · double, )
primitive -> · char, )
primitive -> · string, )
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
idBracket -> · ID [ optidx ], )
primitiveBracket -> · primitive [ optidx ], )
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
cast -> ( · type ) factor, )
primary -> ( · expr ), )
cast -> ( · type ) factor, ,
primary -> ( · expr ), ,
cast -> ( · type ) factor, ]
primary -> ( · expr ), ]
***EndSet***
***EndState***
***State***
77
I_91_129_332_366_430_463_525_558_845_878_945
***Set***
factor -> - · factor, ;
factor -> - · factor, &&
factor -> - · factor, ||
factor -> - · factor, >
factor -> - · factor, <
factor -> - · factor, >=
factor -> - · factor, <=
factor -> - · factor, ==
factor -> - · factor, !=
factor -> - · factor, +
factor -> - · factor, -
factor -> - · factor, *
factor -> - · factor, /
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
factor -> - · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
factor -> - · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
factor -> - · factor, ]
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
idBracket -> · ID [ optidx ], ]
***EndSet***
***EndState***
***State***
78
I_92_130_333_367_431_464_526_559_846_879_946
***Set***
factor -> ! · factor, ;
factor -> ! · factor, &&
factor -> ! · factor, ||
factor -> ! · factor, >
factor -> ! · factor, <
factor -> ! · factor, >=
factor -> ! · factor, <=
factor -> ! · factor, ==
factor -> ! · factor, !=
factor -> ! · factor, +
factor -> ! · factor, -
factor -> ! · factor, *
factor -> ! · factor, /
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
factor -> ! · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
factor -> ! · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
factor -> ! · factor, ]
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
idBracket -> · ID [ optidx ], ]
***EndSet***
***EndState***
***State***
79
I_99_137_340_1000
***Set***
lvalue -> ID ·, =
lvalue -> ID ·, +=
lvalue -> ID ·, -=
lvalue -> ID ·, *=
lvalue -> ID ·, /=
lvalue -> ID ·, %=
primary -> ID ·, .
idBracket -> ID · [ optidx ], =
idBracket -> ID · [ optidx ], +=
idBracket -> ID · [ optidx ], -=
idBracket -> ID · [ optidx ], *=
idBracket -> ID · [ optidx ], /=
idBracket -> ID · [ optidx ], %=
incdec -> ID · ++, ;
incdec -> ID · --, ;
primary -> ID ·, ;
call -> ID · ( args ), .
incdec -> ID · ++, &&
incdec -> ID · --, &&
primary -> ID ·, &&
incdec -> ID · ++, ||
incdec -> ID · --, ||
primary -> ID ·, ||
call -> ID · ( args ), ;
idBracket -> ID · [ optidx ], .
call -> ID · ( args ), &&
call -> ID · ( args ), ||
incdec -> ID · ++, >
incdec -> ID · --, >
primary -> ID ·, >
incdec -> ID · ++, <
incdec -> ID · --, <
primary -> ID ·, <
incdec -> ID · ++, >=
incdec -> ID · --, >=
primary -> ID ·, >=
incdec -> ID · ++, <=
incdec -> ID · --, <=
primary -> ID ·, <=
incdec -> ID · ++, ==
incdec -> ID · --, ==
primary -> ID ·, ==
incdec -> ID · ++, !=
incdec -> ID · --, !=
primary -> ID ·, !=
idBracket -> ID · [ optidx ], ;
incdec -> ID · ++, +
incdec -> ID · --, +
primary -> ID ·, +
incdec -> ID · ++, -
incdec -> ID · --, -
primary -> ID ·, -
incdec -> ID · ++, *
incdec -> ID · --, *
primary -> ID ·, *
incdec -> ID · ++, /
incdec -> ID · --, /
primary -> ID ·, /
idBracket -> ID · [ optidx ], &&
idBracket -> ID · [ optidx ], ||
call -> ID · ( args ), >
call -> ID · ( args ), <
call -> ID · ( args ), >=
call -> ID · ( args ), <=
call -> ID · ( args ), ==
call -> ID · ( args ), !=
call -> ID · ( args ), +
call -> ID · ( args ), -
call -> ID · ( args ), *
call -> ID · ( args ), /
idBracket -> ID · [ optidx ], >
idBracket -> ID · [ optidx ], <
idBracket -> ID · [ optidx ], >=
idBracket -> ID · [ optidx ], <=
idBracket -> ID · [ optidx ], ==
idBracket -> ID · [ optidx ], !=
idBracket -> ID · [ optidx ], +
idBracket -> ID · [ optidx ], -
idBracket -> ID · [ optidx ], *
idBracket -> ID · [ optidx ], /
incdec -> ID · ++, )
incdec -> ID · --, )
primary -> ID ·, )
call -> ID · ( args ), )
idBracket -> ID · [ optidx ], )
incdec -> ID · ++, ,
incdec -> ID · --, ,
primary -> ID ·, ,
call -> ID · ( args ), ,
idBracket -> ID · [ optidx ], ,
***EndSet***
***EndState***
***State***
80
I_100_138_341
***Set***
expr -> assign ·, ;
expr -> assign ·, )
expr -> assign ·, ,
***EndSet***
***EndState***
***State***
81
I_101_139_342_375_439_472_534_567_854_887_954
***Set***
primary -> call ·, .
primary -> call ·, ;
primary -> call ·, &&
primary -> call ·, ||
primary -> call ·, >
primary -> call ·, <
primary -> call ·, >=
primary -> call ·, <=
primary -> call ·, ==
primary -> call ·, !=
primary -> call ·, +
primary -> call ·, -
primary -> call ·, *
primary -> call ·, /
primary -> call ·, )
primary -> call ·, ,
primary -> call ·, ]
***EndSet***
***EndState***
***State***
82
I_103_141_344_377_441_474_536_569_856_889_956
***Set***
primary -> newobj ·, .
primary -> newobj ·, ;
primary -> newobj ·, &&
primary -> newobj ·, ||
primary -> newobj ·, >
primary -> newobj ·, <
primary -> newobj ·, >=
primary -> newobj ·, <=
primary -> newobj ·, ==
primary -> newobj ·, !=
primary -> newobj ·, +
primary -> newobj ·, -
primary -> newobj ·, *
primary -> newobj ·, /
primary -> newobj ·, )
primary -> newobj ·, ,
primary -> newobj ·, ]
***EndSet***
***EndState***
***State***
83
I_105_143_346_379_443_476_538_571_858_891_958
***Set***
factor -> incdec ·, ;
factor -> incdec ·, &&
factor -> incdec ·, ||
factor -> incdec ·, >
factor -> incdec ·, <
factor -> incdec ·, >=
factor -> incdec ·, <=
factor -> incdec ·, ==
factor -> incdec ·, !=
factor -> incdec ·, +
factor -> incdec ·, -
factor -> incdec ·, *
factor -> incdec ·, /
factor -> incdec ·, )
factor -> incdec ·, ,
factor -> incdec ·, ]
***EndSet***
***EndState***
***State***
84
I_106_314_494_1013_1234_1295
***Set***
stmt -> delete expr · ;, $
stmt -> delete expr · ;, namespace
stmt -> delete expr · ;, {
stmt -> delete expr · ;, ID
stmt -> delete expr · ;, void
stmt -> delete expr · ;, bool
stmt -> delete expr · ;, int
stmt -> delete expr · ;, float
stmt -> delete expr · ;, double
stmt -> delete expr · ;, char
stmt -> delete expr · ;, string
stmt -> delete expr · ;, extern
stmt -> delete expr · ;, class
stmt -> delete expr · ;, (
stmt -> delete expr · ;, this
stmt -> delete expr · ;, new
stmt -> delete expr · ;, LITBOOL
stmt -> delete expr · ;, LITINT
stmt -> delete expr · ;, LITFLOAT
stmt -> delete expr · ;, LITDOUBLE
stmt -> delete expr · ;, LITCHAR
stmt -> delete expr · ;, LITSTRING
stmt -> delete expr · ;, null
stmt -> delete expr · ;, ++
stmt -> delete expr · ;, --
stmt -> delete expr · ;, break
stmt -> delete expr · ;, return
stmt -> delete expr · ;, delete
stmt -> delete expr · ;, while
stmt -> delete expr · ;, for
stmt -> delete expr · ;, if
stmt -> delete expr · ;, }
stmt -> delete expr · ;, &&
stmt -> delete expr · ;, ||
stmt -> delete expr · ;, +
stmt -> delete expr · ;, -
stmt -> delete expr · ;, *
stmt -> delete expr · ;, /
stmt -> delete expr · ;, !
stmt -> delete expr · ;, else
***EndSet***
***EndState***
***State***
85
I_107_145_348
***Set***
expr -> nexpr ·, ;
expr -> nexpr ·, )
expr -> nexpr ·, ,
***EndSet***
***EndState***
***State***
86
I_108_146_349
***Set***
nexpr -> bexpr ·, ;
bexpr -> bexpr · && bexpr, ;
bexpr -> bexpr · || bexpr, ;
bexpr -> bexpr · && bexpr, &&
bexpr -> bexpr · || bexpr, &&
bexpr -> bexpr · && bexpr, ||
bexpr -> bexpr · || bexpr, ||
nexpr -> bexpr ·, )
bexpr -> bexpr · && bexpr, )
bexpr -> bexpr · || bexpr, )
nexpr -> bexpr ·, ,
bexpr -> bexpr · && bexpr, ,
bexpr -> bexpr · || bexpr, ,
***EndSet***
***EndState***
***State***
87
I_109_147_350
***Set***
nexpr -> aexpr ·, ;
bexpr -> aexpr · > aexpr, ;
bexpr -> aexpr · < aexpr, ;
bexpr -> aexpr · >= aexpr, ;
bexpr -> aexpr · <= aexpr, ;
bexpr -> aexpr · == aexpr, ;
bexpr -> aexpr · != aexpr, ;
aexpr -> aexpr · + term, ;
aexpr -> aexpr · - term, ;
bexpr -> aexpr · > aexpr, &&
bexpr -> aexpr · < aexpr, &&
bexpr -> aexpr · >= aexpr, &&
bexpr -> aexpr · <= aexpr, &&
bexpr -> aexpr · == aexpr, &&
bexpr -> aexpr · != aexpr, &&
bexpr -> aexpr · > aexpr, ||
bexpr -> aexpr · < aexpr, ||
bexpr -> aexpr · >= aexpr, ||
bexpr -> aexpr · <= aexpr, ||
bexpr -> aexpr · == aexpr, ||
bexpr -> aexpr · != aexpr, ||
aexpr -> aexpr · + term, >
aexpr -> aexpr · - term, >
aexpr -> aexpr · + term, <
aexpr -> aexpr · - term, <
aexpr -> aexpr · + term, >=
aexpr -> aexpr · - term, >=
aexpr -> aexpr · + term, <=
aexpr -> aexpr · - term, <=
aexpr -> aexpr · + term, ==
aexpr -> aexpr · - term, ==
aexpr -> aexpr · + term, !=
aexpr -> aexpr · - term, !=
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
nexpr -> aexpr ·, )
bexpr -> aexpr · > aexpr, )
bexpr -> aexpr · < aexpr, )
bexpr -> aexpr · >= aexpr, )
bexpr -> aexpr · <= aexpr, )
bexpr -> aexpr · == aexpr, )
bexpr -> aexpr · != aexpr, )
aexpr -> aexpr · + term, )
aexpr -> aexpr · - term, )
nexpr -> aexpr ·, ,
bexpr -> aexpr · > aexpr, ,
bexpr -> aexpr · < aexpr, ,
bexpr -> aexpr · >= aexpr, ,
bexpr -> aexpr · <= aexpr, ,
bexpr -> aexpr · == aexpr, ,
bexpr -> aexpr · != aexpr, ,
aexpr -> aexpr · + term, ,
aexpr -> aexpr · - term, ,
***EndSet***
***EndState***
***State***
88
I_110_148_351_381_421_445_540_860
***Set***
aexpr -> term ·, ;
aexpr -> term ·, >
aexpr -> term ·, <
aexpr -> term ·, >=
aexpr -> term ·, <=
aexpr -> term ·, ==
aexpr -> term ·, !=
aexpr -> term ·, +
aexpr -> term ·, -
term -> term · * factor, ;
term -> term · / factor, ;
term -> term · * factor, >
term -> term · / factor, >
term -> term · * factor, <
term -> term · / factor, <
term -> term · * factor, >=
term -> term · / factor, >=
term -> term · * factor, <=
term -> term · / factor, <=
term -> term · * factor, ==
term -> term · / factor, ==
term -> term · * factor, !=
term -> term · / factor, !=
term -> term · * factor, +
term -> term · / factor, +
term -> term · * factor, -
term -> term · / factor, -
term -> term · * factor, *
term -> term · / factor, *
term -> term · * factor, /
term -> term · / factor, /
aexpr -> term ·, )
term -> term · * factor, )
term -> term · / factor, )
aexpr -> term ·, ,
term -> term · * factor, ,
term -> term · / factor, ,
aexpr -> term ·, ]
term -> term · * factor, ]
term -> term · / factor, ]
aexpr -> term ·, &&
aexpr -> term ·, ||
term -> term · * factor, &&
term -> term · / factor, &&
term -> term · * factor, ||
term -> term · / factor, ||
***EndSet***
***EndState***
***State***
89
I_111_149_352_422_517_837
***Set***
bexpr -> factor ·, ;
bexpr -> factor ·, &&
bexpr -> factor ·, ||
term -> factor ·, ;
term -> factor ·, >
term -> factor ·, <
term -> factor ·, >=
term -> factor ·, <=
term -> factor ·, ==
term -> factor ·, !=
term -> factor ·, +
term -> factor ·, -
term -> factor ·, *
term -> factor ·, /
bexpr -> factor ·, )
term -> factor ·, )
bexpr -> factor ·, ,
term -> factor ·, ,
***EndSet***
***EndState***
***State***
90
I_112_150_226_281_353_383_447_479_542_574_614_862_894_961
***Set***
memberaccess -> primary · . ID, =
memberaccess -> primary · . ID, +=
memberaccess -> primary · . ID, -=
memberaccess -> primary · . ID, *=
memberaccess -> primary · . ID, /=
memberaccess -> primary · . ID, %=
factor -> primary ·, ;
memberaccess -> primary · . ID, [
factor -> primary ·, &&
factor -> primary ·, ||
memberaccess -> primary · . ID, .
factor -> primary ·, >
factor -> primary ·, <
factor -> primary ·, >=
factor -> primary ·, <=
factor -> primary ·, ==
factor -> primary ·, !=
memberaccess -> primary · . ID, ;
factor -> primary ·, +
factor -> primary ·, -
factor -> primary ·, *
factor -> primary ·, /
memberaccess -> primary · . ID, (
memberaccess -> primary · . ID, &&
memberaccess -> primary · . ID, ||
memberaccess -> primary · . ID, >
memberaccess -> primary · . ID, <
memberaccess -> primary · . ID, >=
memberaccess -> primary · . ID, <=
memberaccess -> primary · . ID, ==
memberaccess -> primary · . ID, !=
memberaccess -> primary · . ID, +
memberaccess -> primary · . ID, -
memberaccess -> primary · . ID, *
memberaccess -> primary · . ID, /
factor -> primary ·, )
memberaccess -> primary · . ID, )
factor -> primary ·, ,
memberaccess -> primary · . ID, ,
factor -> primary ·, ]
memberaccess -> primary · . ID, ]
***EndSet***
***EndState***
***State***
91
I_114_152_355_385_449_481_544_576_864_896_963
***Set***
factor -> cast ·, ;
factor -> cast ·, &&
factor -> cast ·, ||
factor -> cast ·, >
factor -> cast ·, <
factor -> cast ·, >=
factor -> cast ·, <=
factor -> cast ·, ==
factor -> cast ·, !=
factor -> cast ·, +
factor -> cast ·, -
factor -> cast ·, *
factor -> cast ·, /
factor -> cast ·, )
factor -> cast ·, ,
factor -> cast ·, ]
***EndSet***
***EndState***
***State***
92
I_116_155_228_283_359_387_451_483_546_578_616_866_898_965_1007
***Set***
indexaccess -> idBracket ·, =
indexaccess -> idBracket ·, +=
indexaccess -> idBracket ·, -=
indexaccess -> idBracket ·, *=
indexaccess -> idBracket ·, /=
indexaccess -> idBracket ·, %=
indexaccess -> idBracket ·, .
indexaccess -> idBracket ·, ;
indexaccess -> idBracket ·, &&
indexaccess -> idBracket ·, ||
indexaccess -> idBracket ·, >
indexaccess -> idBracket ·, <
indexaccess -> idBracket ·, >=
indexaccess -> idBracket ·, <=
indexaccess -> idBracket ·, ==
indexaccess -> idBracket ·, !=
indexaccess -> idBracket ·, +
indexaccess -> idBracket ·, -
indexaccess -> idBracket ·, *
indexaccess -> idBracket ·, /
indexaccess -> idBracket ·, )
indexaccess -> idBracket ·, ,
indexaccess -> idBracket ·, ]
***EndSet***
***EndState***
***State***
93
I_117_315_495_1014_1235_1296
***Set***
stmt -> while ( · expr ) stmt, $
stmt -> while ( · expr ) stmt, namespace
stmt -> while ( · expr ) stmt, {
stmt -> while ( · expr ) stmt, ID
stmt -> while ( · expr ) stmt, void
stmt -> while ( · expr ) stmt, bool
stmt -> while ( · expr ) stmt, int
stmt -> while ( · expr ) stmt, float
stmt -> while ( · expr ) stmt, double
stmt -> while ( · expr ) stmt, char
stmt -> while ( · expr ) stmt, string
stmt -> while ( · expr ) stmt, extern
stmt -> while ( · expr ) stmt, class
stmt -> while ( · expr ) stmt, (
stmt -> while ( · expr ) stmt, this
stmt -> while ( · expr ) stmt, new
stmt -> while ( · expr ) stmt, LITBOOL
stmt -> while ( · expr ) stmt, LITINT
stmt -> while ( · expr ) stmt, LITFLOAT
stmt -> while ( · expr ) stmt, LITDOUBLE
stmt -> while ( · expr ) stmt, LITCHAR
stmt -> while ( · expr ) stmt, LITSTRING
stmt -> while ( · expr ) stmt, null
stmt -> while ( · expr ) stmt, ++
stmt -> while ( · expr ) stmt, --
stmt -> while ( · expr ) stmt, break
stmt -> while ( · expr ) stmt, return
stmt -> while ( · expr ) stmt, delete
stmt -> while ( · expr ) stmt, while
stmt -> while ( · expr ) stmt, for
stmt -> while ( · expr ) stmt, if
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], )
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
stmt -> while ( · expr ) stmt, }
stmt -> while ( · expr ) stmt, &&
stmt -> while ( · expr ) stmt, ||
stmt -> while ( · expr ) stmt, +
stmt -> while ( · expr ) stmt, -
stmt -> while ( · expr ) stmt, *
stmt -> while ( · expr ) stmt, /
stmt -> while ( · expr ) stmt, !
stmt -> while ( · expr ) stmt, else
***EndSet***
***EndState***
***State***
94
I_118_316_496_1015_1236_1297
***Set***
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, $
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, {
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, ID
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, void
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, bool
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, int
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, float
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, double
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, char
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, string
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, extern
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, class
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, (
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, this
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, new
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, null
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, ++
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, --
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, break
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, return
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, delete
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, while
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, for
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, if
stmt -> · namespaceblock, &&
stmt -> · namespaceblock, ||
stmt -> · namespaceblock, +
stmt -> · namespaceblock, -
stmt -> · namespaceblock, *
stmt -> · namespaceblock, /
stmt -> · namespaceblock, ++
stmt -> · namespaceblock, --
stmt -> · namespaceblock, ID
stmt -> · namespaceblock, !
stmt -> · namespaceblock, (
stmt -> · namespaceblock, this
stmt -> · namespaceblock, new
stmt -> · namespaceblock, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · namespaceblock, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, &&
stmt -> · statementblock, ||
stmt -> · statementblock, +
stmt -> · statementblock, -
stmt -> · statementblock, *
stmt -> · statementblock, /
stmt -> · statementblock, ++
stmt -> · statementblock, --
stmt -> · statementblock, ID
stmt -> · statementblock, !
stmt -> · statementblock, (
stmt -> · statementblock, this
stmt -> · statementblock, new
stmt -> · statementblock, LITBOOL
stmt -> · statementblock, LITINT
stmt -> · statementblock, LITFLOAT
stmt -> · statementblock, LITDOUBLE
stmt -> · statementblock, LITCHAR
stmt -> · statementblock, LITSTRING
stmt -> · statementblock, null
stmt -> · declstmt, &&
stmt -> · declstmt, ||
stmt -> · declstmt, +
stmt -> · declstmt, -
stmt -> · declstmt, *
stmt -> · declstmt, /
stmt -> · declstmt, ++
stmt -> · declstmt, --
stmt -> · declstmt, ID
stmt -> · declstmt, !
stmt -> · declstmt, (
stmt -> · declstmt, this
stmt -> · declstmt, new
stmt -> · declstmt, LITBOOL
stmt -> · declstmt, LITINT
stmt -> · declstmt, LITFLOAT
stmt -> · declstmt, LITDOUBLE
stmt -> · declstmt, LITCHAR
stmt -> · declstmt, LITSTRING
stmt -> · declstmt, null
stmt -> · stmtexpr ;, &&
stmt -> · stmtexpr ;, ||
stmt -> · stmtexpr ;, +
stmt -> · stmtexpr ;, -
stmt -> · stmtexpr ;, *
stmt -> · stmtexpr ;, /
stmt -> · stmtexpr ;, ++
stmt -> · stmtexpr ;, --
stmt -> · stmtexpr ;, ID
stmt -> · stmtexpr ;, !
stmt -> · stmtexpr ;, (
stmt -> · stmtexpr ;, this
stmt -> · stmtexpr ;, new
stmt -> · stmtexpr ;, LITBOOL
stmt -> · stmtexpr ;, LITINT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · stmtexpr ;, LITCHAR
stmt -> · stmtexpr ;, LITSTRING
stmt -> · stmtexpr ;, null
stmt -> · break ;, &&
stmt -> · break ;, ||
stmt -> · break ;, +
stmt -> · break ;, -
stmt -> · break ;, *
stmt -> · break ;, /
stmt -> · break ;, ++
stmt -> · break ;, --
stmt -> · break ;, ID
stmt -> · break ;, !
stmt -> · break ;, (
stmt -> · break ;, this
stmt -> · break ;, new
stmt -> · break ;, LITBOOL
stmt -> · break ;, LITINT
stmt -> · break ;, LITFLOAT
stmt -> · break ;, LITDOUBLE
stmt -> · break ;, LITCHAR
stmt -> · break ;, LITSTRING
stmt -> · break ;, null
stmt -> · return expr ;, &&
stmt -> · return expr ;, ||
stmt -> · return expr ;, +
stmt -> · return expr ;, -
stmt -> · return expr ;, *
stmt -> · return expr ;, /
stmt -> · return expr ;, ++
stmt -> · return expr ;, --
stmt -> · return expr ;, ID
stmt -> · return expr ;, !
stmt -> · return expr ;, (
stmt -> · return expr ;, this
stmt -> · return expr ;, new
stmt -> · return expr ;, LITBOOL
stmt -> · return expr ;, LITINT
stmt -> · return expr ;, LITFLOAT
stmt -> · return expr ;, LITDOUBLE
stmt -> · return expr ;, LITCHAR
stmt -> · return expr ;, LITSTRING
stmt -> · return expr ;, null
stmt -> · return ;, &&
stmt -> · return ;, ||
stmt -> · return ;, +
stmt -> · return ;, -
stmt -> · return ;, *
stmt -> · return ;, /
stmt -> · return ;, ++
stmt -> · return ;, --
stmt -> · return ;, ID
stmt -> · return ;, !
stmt -> · return ;, (
stmt -> · return ;, this
stmt -> · return ;, new
stmt -> · return ;, LITBOOL
stmt -> · return ;, LITINT
stmt -> · return ;, LITFLOAT
stmt -> · return ;, LITDOUBLE
stmt -> · return ;, LITCHAR
stmt -> · return ;, LITSTRING
stmt -> · return ;, null
stmt -> · delete expr ;, &&
stmt -> · delete expr ;, ||
stmt -> · delete expr ;, +
stmt -> · delete expr ;, -
stmt -> · delete expr ;, *
stmt -> · delete expr ;, /
stmt -> · delete expr ;, ++
stmt -> · delete expr ;, --
stmt -> · delete expr ;, ID
stmt -> · delete expr ;, !
stmt -> · delete expr ;, (
stmt -> · delete expr ;, this
stmt -> · delete expr ;, new
stmt -> · delete expr ;, LITBOOL
stmt -> · delete expr ;, LITINT
stmt -> · delete expr ;, LITFLOAT
stmt -> · delete expr ;, LITDOUBLE
stmt -> · delete expr ;, LITCHAR
stmt -> · delete expr ;, LITSTRING
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, &&
stmt -> · while ( expr ) stmt, ||
stmt -> · while ( expr ) stmt, +
stmt -> · while ( expr ) stmt, -
stmt -> · while ( expr ) stmt, *
stmt -> · while ( expr ) stmt, /
stmt -> · while ( expr ) stmt, ++
stmt -> · while ( expr ) stmt, --
stmt -> · while ( expr ) stmt, ID
stmt -> · while ( expr ) stmt, !
stmt -> · while ( expr ) stmt, (
stmt -> · while ( expr ) stmt, this
stmt -> · while ( expr ) stmt, new
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · while ( expr ) stmt, LITINT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, &&
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ||
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, +
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, -
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, *
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, /
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, !
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, &&
stmt -> · if ( expr ) stmt elifclauselist elseclause, ||
stmt -> · if ( expr ) stmt elifclauselist elseclause, +
stmt -> · if ( expr ) stmt elifclauselist elseclause, -
stmt -> · if ( expr ) stmt elifclauselist elseclause, *
stmt -> · if ( expr ) stmt elifclauselist elseclause, /
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, !
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
namespaceblock -> · namespace ID { statements }, &&
namespaceblock -> · namespace ID { statements }, ||
namespaceblock -> · namespace ID { statements }, +
namespaceblock -> · namespace ID { statements }, -
namespaceblock -> · namespace ID { statements }, *
namespaceblock -> · namespace ID { statements }, /
namespaceblock -> · namespace ID { statements }, ++
namespaceblock -> · namespace ID { statements }, --
namespaceblock -> · namespace ID { statements }, ID
namespaceblock -> · namespace ID { statements }, !
namespaceblock -> · namespace ID { statements }, (
namespaceblock -> · namespace ID { statements }, this
namespaceblock -> · namespace ID { statements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
namespaceblock -> · namespace ID { statements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, &&
statementblock -> · { statements }, ||
statementblock -> · { statements }, +
statementblock -> · { statements }, -
statementblock -> · { statements }, *
statementblock -> · { statements }, /
statementblock -> · { statements }, ++
statementblock -> · { statements }, --
statementblock -> · { statements }, ID
statementblock -> · { statements }, !
statementblock -> · { statements }, (
statementblock -> · { statements }, this
statementblock -> · { statements }, new
statementblock -> · { statements }, LITBOOL
statementblock -> · { statements }, LITINT
statementblock -> · { statements }, LITFLOAT
statementblock -> · { statements }, LITDOUBLE
statementblock -> · { statements }, LITCHAR
statementblock -> · { statements }, LITSTRING
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, &&
declstmt -> · type ID ( params ) { statements }, &&
declstmt -> · extern type ID ( params ) ;, &&
declstmt -> · class ID inherit { declstatements }, &&
declstmt -> · type ID = expr ;, ||
declstmt -> · type ID ( params ) { statements }, ||
declstmt -> · extern type ID ( params ) ;, ||
declstmt -> · class ID inherit { declstatements }, ||
declstmt -> · type ID = expr ;, +
declstmt -> · type ID ( params ) { statements }, +
declstmt -> · extern type ID ( params ) ;, +
declstmt -> · class ID inherit { declstatements }, +
declstmt -> · type ID = expr ;, -
declstmt -> · type ID ( params ) { statements }, -
declstmt -> · extern type ID ( params ) ;, -
declstmt -> · class ID inherit { declstatements }, -
declstmt -> · type ID = expr ;, *
declstmt -> · type ID ( params ) { statements }, *
declstmt -> · extern type ID ( params ) ;, *
declstmt -> · class ID inherit { declstatements }, *
declstmt -> · type ID = expr ;, /
declstmt -> · type ID ( params ) { statements }, /
declstmt -> · extern type ID ( params ) ;, /
declstmt -> · class ID inherit { declstatements }, /
declstmt -> · type ID = expr ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
declstmt -> · type ID = expr ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
declstmt -> · type ID = expr ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
declstmt -> · type ID = expr ;, !
declstmt -> · type ID ( params ) { statements }, !
declstmt -> · extern type ID ( params ) ;, !
declstmt -> · class ID inherit { declstatements }, !
declstmt -> · type ID = expr ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
declstmt -> · type ID = expr ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
declstmt -> · type ID = expr ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
declstmt -> · type ID = expr ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
declstmt -> · type ID = expr ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
type -> · arrtype, ID
type -> · stype, ID
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, }
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, &&
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, ||
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, +
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, -
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, *
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, /
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, !
stmt -> for ( · stmt bexpr ; stmtexpr ) stmt, else
***EndSet***
***EndState***
***State***
95
I_119_317_497_1016_1237_1298
***Set***
stmt -> if ( · expr ) stmt elifclauselist elseclause, $
stmt -> if ( · expr ) stmt elifclauselist elseclause, namespace
stmt -> if ( · expr ) stmt elifclauselist elseclause, {
stmt -> if ( · expr ) stmt elifclauselist elseclause, ID
stmt -> if ( · expr ) stmt elifclauselist elseclause, void
stmt -> if ( · expr ) stmt elifclauselist elseclause, bool
stmt -> if ( · expr ) stmt elifclauselist elseclause, int
stmt -> if ( · expr ) stmt elifclauselist elseclause, float
stmt -> if ( · expr ) stmt elifclauselist elseclause, double
stmt -> if ( · expr ) stmt elifclauselist elseclause, char
stmt -> if ( · expr ) stmt elifclauselist elseclause, string
stmt -> if ( · expr ) stmt elifclauselist elseclause, extern
stmt -> if ( · expr ) stmt elifclauselist elseclause, class
stmt -> if ( · expr ) stmt elifclauselist elseclause, (
stmt -> if ( · expr ) stmt elifclauselist elseclause, this
stmt -> if ( · expr ) stmt elifclauselist elseclause, new
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITINT
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> if ( · expr ) stmt elifclauselist elseclause, null
stmt -> if ( · expr ) stmt elifclauselist elseclause, ++
stmt -> if ( · expr ) stmt elifclauselist elseclause, --
stmt -> if ( · expr ) stmt elifclauselist elseclause, break
stmt -> if ( · expr ) stmt elifclauselist elseclause, return
stmt -> if ( · expr ) stmt elifclauselist elseclause, delete
stmt -> if ( · expr ) stmt elifclauselist elseclause, while
stmt -> if ( · expr ) stmt elifclauselist elseclause, for
stmt -> if ( · expr ) stmt elifclauselist elseclause, if
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], )
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
stmt -> if ( · expr ) stmt elifclauselist elseclause, }
stmt -> if ( · expr ) stmt elifclauselist elseclause, &&
stmt -> if ( · expr ) stmt elifclauselist elseclause, ||
stmt -> if ( · expr ) stmt elifclauselist elseclause, +
stmt -> if ( · expr ) stmt elifclauselist elseclause, -
stmt -> if ( · expr ) stmt elifclauselist elseclause, *
stmt -> if ( · expr ) stmt elifclauselist elseclause, /
stmt -> if ( · expr ) stmt elifclauselist elseclause, !
stmt -> if ( · expr ) stmt elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
96
I_120_318_498_1017_1238_1299
***Set***
stmt -> break ; ·, $
stmt -> break ; ·, namespace
stmt -> break ; ·, {
stmt -> break ; ·, ID
stmt -> break ; ·, void
stmt -> break ; ·, bool
stmt -> break ; ·, int
stmt -> break ; ·, float
stmt -> break ; ·, double
stmt -> break ; ·, char
stmt -> break ; ·, string
stmt -> break ; ·, extern
stmt -> break ; ·, class
stmt -> break ; ·, (
stmt -> break ; ·, this
stmt -> break ; ·, new
stmt -> break ; ·, LITBOOL
stmt -> break ; ·, LITINT
stmt -> break ; ·, LITFLOAT
stmt -> break ; ·, LITDOUBLE
stmt -> break ; ·, LITCHAR
stmt -> break ; ·, LITSTRING
stmt -> break ; ·, null
stmt -> break ; ·, ++
stmt -> break ; ·, --
stmt -> break ; ·, break
stmt -> break ; ·, return
stmt -> break ; ·, delete
stmt -> break ; ·, while
stmt -> break ; ·, for
stmt -> break ; ·, if
stmt -> break ; ·, }
stmt -> break ; ·, &&
stmt -> break ; ·, ||
stmt -> break ; ·, +
stmt -> break ; ·, -
stmt -> break ; ·, *
stmt -> break ; ·, /
stmt -> break ; ·, !
stmt -> break ; ·, else
***EndSet***
***EndState***
***State***
97
I_121_319_499_1018_1239_1300
***Set***
stmt -> return ; ·, $
stmt -> return ; ·, namespace
stmt -> return ; ·, {
stmt -> return ; ·, ID
stmt -> return ; ·, void
stmt -> return ; ·, bool
stmt -> return ; ·, int
stmt -> return ; ·, float
stmt -> return ; ·, double
stmt -> return ; ·, char
stmt -> return ; ·, string
stmt -> return ; ·, extern
stmt -> return ; ·, class
stmt -> return ; ·, (
stmt -> return ; ·, this
stmt -> return ; ·, new
stmt -> return ; ·, LITBOOL
stmt -> return ; ·, LITINT
stmt -> return ; ·, LITFLOAT
stmt -> return ; ·, LITDOUBLE
stmt -> return ; ·, LITCHAR
stmt -> return ; ·, LITSTRING
stmt -> return ; ·, null
stmt -> return ; ·, ++
stmt -> return ; ·, --
stmt -> return ; ·, break
stmt -> return ; ·, return
stmt -> return ; ·, delete
stmt -> return ; ·, while
stmt -> return ; ·, for
stmt -> return ; ·, if
stmt -> return ; ·, }
stmt -> return ; ·, &&
stmt -> return ; ·, ||
stmt -> return ; ·, +
stmt -> return ; ·, -
stmt -> return ; ·, *
stmt -> return ; ·, /
stmt -> return ; ·, !
stmt -> return ; ·, else
***EndSet***
***EndState***
***State***
98
I_122_320_500_1019_1240_1301
***Set***
stmt -> return expr · ;, $
stmt -> return expr · ;, namespace
stmt -> return expr · ;, {
stmt -> return expr · ;, ID
stmt -> return expr · ;, void
stmt -> return expr · ;, bool
stmt -> return expr · ;, int
stmt -> return expr · ;, float
stmt -> return expr · ;, double
stmt -> return expr · ;, char
stmt -> return expr · ;, string
stmt -> return expr · ;, extern
stmt -> return expr · ;, class
stmt -> return expr · ;, (
stmt -> return expr · ;, this
stmt -> return expr · ;, new
stmt -> return expr · ;, LITBOOL
stmt -> return expr · ;, LITINT
stmt -> return expr · ;, LITFLOAT
stmt -> return expr · ;, LITDOUBLE
stmt -> return expr · ;, LITCHAR
stmt -> return expr · ;, LITSTRING
stmt -> return expr · ;, null
stmt -> return expr · ;, ++
stmt -> return expr · ;, --
stmt -> return expr · ;, break
stmt -> return expr · ;, return
stmt -> return expr · ;, delete
stmt -> return expr · ;, while
stmt -> return expr · ;, for
stmt -> return expr · ;, if
stmt -> return expr · ;, }
stmt -> return expr · ;, &&
stmt -> return expr · ;, ||
stmt -> return expr · ;, +
stmt -> return expr · ;, -
stmt -> return expr · ;, *
stmt -> return expr · ;, /
stmt -> return expr · ;, !
stmt -> return expr · ;, else
***EndSet***
***EndState***
***State***
99
I_144_217_275_608_651_703_725_782_804_1086_1108_1142
***Set***
primary -> ( expr · ), .
primary -> ( expr · ), ;
primary -> ( expr · ), &&
primary -> ( expr · ), ||
primary -> ( expr · ), >
primary -> ( expr · ), <
primary -> ( expr · ), >=
primary -> ( expr · ), <=
primary -> ( expr · ), ==
primary -> ( expr · ), !=
primary -> ( expr · ), +
primary -> ( expr · ), -
primary -> ( expr · ), *
primary -> ( expr · ), /
primary -> ( expr · ), )
primary -> ( expr · ), ,
primary -> ( expr · ), ]
***EndSet***
***EndState***
***State***
100
I_166_321_501_1020_1241_1302
***Set***
statementblock -> { statements · }, $
statementblock -> { statements · }, namespace
statementblock -> { statements · }, {
statementblock -> { statements · }, ID
statementblock -> { statements · }, void
statementblock -> { statements · }, bool
statementblock -> { statements · }, int
statementblock -> { statements · }, float
statementblock -> { statements · }, double
statementblock -> { statements · }, char
statementblock -> { statements · }, string
statementblock -> { statements · }, extern
statementblock -> { statements · }, class
statementblock -> { statements · }, (
statementblock -> { statements · }, this
statementblock -> { statements · }, new
statementblock -> { statements · }, LITBOOL
statementblock -> { statements · }, LITINT
statementblock -> { statements · }, LITFLOAT
statementblock -> { statements · }, LITDOUBLE
statementblock -> { statements · }, LITCHAR
statementblock -> { statements · }, LITSTRING
statementblock -> { statements · }, null
statementblock -> { statements · }, ++
statementblock -> { statements · }, --
statementblock -> { statements · }, break
statementblock -> { statements · }, return
statementblock -> { statements · }, delete
statementblock -> { statements · }, while
statementblock -> { statements · }, for
statementblock -> { statements · }, if
statements -> statements · stmt, }
statements -> statements · stmt, namespace
statements -> statements · stmt, {
statements -> statements · stmt, ID
statements -> statements · stmt, void
statements -> statements · stmt, bool
statements -> statements · stmt, int
statements -> statements · stmt, float
statements -> statements · stmt, double
statements -> statements · stmt, char
statements -> statements · stmt, string
statements -> statements · stmt, extern
statements -> statements · stmt, class
statements -> statements · stmt, (
statements -> statements · stmt, this
statements -> statements · stmt, new
statements -> statements · stmt, LITBOOL
statements -> statements · stmt, LITINT
statements -> statements · stmt, LITFLOAT
statements -> statements · stmt, LITDOUBLE
statements -> statements · stmt, LITCHAR
statements -> statements · stmt, LITSTRING
statements -> statements · stmt, null
statements -> statements · stmt, ++
statements -> statements · stmt, --
statements -> statements · stmt, break
statements -> statements · stmt, return
statements -> statements · stmt, delete
statements -> statements · stmt, while
statements -> statements · stmt, for
statements -> statements · stmt, if
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
statementblock -> { statements · }, }
statementblock -> { statements · }, &&
statementblock -> { statements · }, ||
statementblock -> { statements · }, +
statementblock -> { statements · }, -
statementblock -> { statements · }, *
statementblock -> { statements · }, /
statementblock -> { statements · }, !
statementblock -> { statements · }, else
***EndSet***
***EndState***
***State***
101
I_173_221_276_609_652_704_726_783_805_1087_1109_1143_1190
***Set***
incdec -> -- ID ·, ;
incdec -> -- ID ·, &&
incdec -> -- ID ·, ||
incdec -> -- ID ·, >
incdec -> -- ID ·, <
incdec -> -- ID ·, >=
incdec -> -- ID ·, <=
incdec -> -- ID ·, ==
incdec -> -- ID ·, !=
incdec -> -- ID ·, +
incdec -> -- ID ·, -
incdec -> -- ID ·, *
incdec -> -- ID ·, /
incdec -> -- ID ·, )
incdec -> -- ID ·, ,
incdec -> -- ID ·, ]
***EndSet***
***EndState***
***State***
102
I_174_222_277_610_653_705_727_784_806_1088_1110_1144_1191
***Set***
incdec -> ++ ID ·, ;
incdec -> ++ ID ·, &&
incdec -> ++ ID ·, ||
incdec -> ++ ID ·, >
incdec -> ++ ID ·, <
incdec -> ++ ID ·, >=
incdec -> ++ ID ·, <=
incdec -> ++ ID ·, ==
incdec -> ++ ID ·, !=
incdec -> ++ ID ·, +
incdec -> ++ ID ·, -
incdec -> ++ ID ·, *
incdec -> ++ ID ·, /
incdec -> ++ ID ·, )
incdec -> ++ ID ·, ,
incdec -> ++ ID ·, ]
***EndSet***
***EndState***
***State***
103
I_175_230_285_618_656_708_730_787_809_1091_1113_1147_1192
***Set***
call -> ID ( · args ), ;
call -> ID ( · args ), .
args -> ·, )
args -> · expr, )
args -> · args , expr, )
expr -> · assign, )
expr -> · nexpr, )
args -> ·, ,
args -> · expr, ,
args -> · args , expr, ,
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
expr -> · assign, ,
expr -> · nexpr, ,
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · factor, ,
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], )
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
idBracket -> · ID [ optidx ], ,
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
call -> ID ( · args ), &&
call -> ID ( · args ), ||
call -> ID ( · args ), >
call -> ID ( · args ), <
call -> ID ( · args ), >=
call -> ID ( · args ), <=
call -> ID ( · args ), ==
call -> ID ( · args ), !=
call -> ID ( · args ), +
call -> ID ( · args ), -
call -> ID ( · args ), *
call -> ID ( · args ), /
call -> ID ( · args ), )
call -> ID ( · args ), ,
call -> ID ( · args ), ]
***EndSet***
***EndState***
***State***
104
I_176_193_198_231_286_410_507_619_657_709_731_788_810_827_1092_1114_1148_1193
***Set***
idBracket -> ID [ · optidx ], ID
idBracket -> ID [ · optidx ], =
idBracket -> ID [ · optidx ], +=
idBracket -> ID [ · optidx ], -=
idBracket -> ID [ · optidx ], *=
idBracket -> ID [ · optidx ], /=
idBracket -> ID [ · optidx ], %=
idBracket -> ID [ · optidx ], .
optidx -> · aexpr, ]
optidx -> ·, ]
aexpr -> · aexpr + term, ]
aexpr -> · aexpr - term, ]
aexpr -> · term, ]
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ]
term -> · term / factor, ]
term -> · factor, ]
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ]
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
idBracket -> ID [ · optidx ], ;
idBracket -> ID [ · optidx ], &&
idBracket -> ID [ · optidx ], ||
idBracket -> ID [ · optidx ], >
idBracket -> ID [ · optidx ], <
idBracket -> ID [ · optidx ], >=
idBracket -> ID [ · optidx ], <=
idBracket -> ID [ · optidx ], ==
idBracket -> ID [ · optidx ], !=
idBracket -> ID [ · optidx ], +
idBracket -> ID [ · optidx ], -
idBracket -> ID [ · optidx ], *
idBracket -> ID [ · optidx ], /
idBracket -> ID [ · optidx ], )
idBracket -> ID [ · optidx ], ,
idBracket -> ID [ · optidx ], ]
***EndSet***
***EndState***
***State***
105
I_177_232_287_620_658_710_732_789_811_1093_1115_1149_1194
***Set***
incdec -> ID -- ·, ;
incdec -> ID -- ·, &&
incdec -> ID -- ·, ||
incdec -> ID -- ·, >
incdec -> ID -- ·, <
incdec -> ID -- ·, >=
incdec -> ID -- ·, <=
incdec -> ID -- ·, ==
incdec -> ID -- ·, !=
incdec -> ID -- ·, +
incdec -> ID -- ·, -
incdec -> ID -- ·, *
incdec -> ID -- ·, /
incdec -> ID -- ·, )
incdec -> ID -- ·, ,
incdec -> ID -- ·, ]
***EndSet***
***EndState***
***State***
106
I_178_233_288_621_659_711_733_790_812_1094_1116_1150_1195
***Set***
incdec -> ID ++ ·, ;
incdec -> ID ++ ·, &&
incdec -> ID ++ ·, ||
incdec -> ID ++ ·, >
incdec -> ID ++ ·, <
incdec -> ID ++ ·, >=
incdec -> ID ++ ·, <=
incdec -> ID ++ ·, ==
incdec -> ID ++ ·, !=
incdec -> ID ++ ·, +
incdec -> ID ++ ·, -
incdec -> ID ++ ·, *
incdec -> ID ++ ·, /
incdec -> ID ++ ·, )
incdec -> ID ++ ·, ,
incdec -> ID ++ ·, ]
***EndSet***
***EndState***
***State***
107
I_179_323
***Set***
statements -> statements stmt ·, $
statements -> statements stmt ·, namespace
statements -> statements stmt ·, {
statements -> statements stmt ·, ID
statements -> statements stmt ·, void
statements -> statements stmt ·, bool
statements -> statements stmt ·, int
statements -> statements stmt ·, float
statements -> statements stmt ·, double
statements -> statements stmt ·, char
statements -> statements stmt ·, string
statements -> statements stmt ·, extern
statements -> statements stmt ·, class
statements -> statements stmt ·, (
statements -> statements stmt ·, this
statements -> statements stmt ·, new
statements -> statements stmt ·, LITBOOL
statements -> statements stmt ·, LITINT
statements -> statements stmt ·, LITFLOAT
statements -> statements stmt ·, LITDOUBLE
statements -> statements stmt ·, LITCHAR
statements -> statements stmt ·, LITSTRING
statements -> statements stmt ·, null
statements -> statements stmt ·, ++
statements -> statements stmt ·, --
statements -> statements stmt ·, break
statements -> statements stmt ·, return
statements -> statements stmt ·, delete
statements -> statements stmt ·, while
statements -> statements stmt ·, for
statements -> statements stmt ·, if
statements -> statements stmt ·, }
***EndSet***
***EndState***
***State***
108
I_180_324_503_1022_1243_1304
***Set***
stmt -> stmtexpr ; ·, $
stmt -> stmtexpr ; ·, namespace
stmt -> stmtexpr ; ·, {
stmt -> stmtexpr ; ·, ID
stmt -> stmtexpr ; ·, void
stmt -> stmtexpr ; ·, bool
stmt -> stmtexpr ; ·, int
stmt -> stmtexpr ; ·, float
stmt -> stmtexpr ; ·, double
stmt -> stmtexpr ; ·, char
stmt -> stmtexpr ; ·, string
stmt -> stmtexpr ; ·, extern
stmt -> stmtexpr ; ·, class
stmt -> stmtexpr ; ·, (
stmt -> stmtexpr ; ·, this
stmt -> stmtexpr ; ·, new
stmt -> stmtexpr ; ·, LITBOOL
stmt -> stmtexpr ; ·, LITINT
stmt -> stmtexpr ; ·, LITFLOAT
stmt -> stmtexpr ; ·, LITDOUBLE
stmt -> stmtexpr ; ·, LITCHAR
stmt -> stmtexpr ; ·, LITSTRING
stmt -> stmtexpr ; ·, null
stmt -> stmtexpr ; ·, ++
stmt -> stmtexpr ; ·, --
stmt -> stmtexpr ; ·, break
stmt -> stmtexpr ; ·, return
stmt -> stmtexpr ; ·, delete
stmt -> stmtexpr ; ·, while
stmt -> stmtexpr ; ·, for
stmt -> stmtexpr ; ·, if
stmt -> stmtexpr ; ·, }
stmt -> stmtexpr ; ·, &&
stmt -> stmtexpr ; ·, ||
stmt -> stmtexpr ; ·, +
stmt -> stmtexpr ; ·, -
stmt -> stmtexpr ; ·, *
stmt -> stmtexpr ; ·, /
stmt -> stmtexpr ; ·, !
stmt -> stmtexpr ; ·, else
***EndSet***
***EndState***
***State***
109
I_181_325_504_934_1023_1244_1305
***Set***
declstmt -> type ID · = expr ;, $
declstmt -> type ID · ( params ) { statements }, $
declstmt -> type ID · = expr ;, namespace
declstmt -> type ID · ( params ) { statements }, namespace
declstmt -> type ID · = expr ;, {
declstmt -> type ID · ( params ) { statements }, {
declstmt -> type ID · = expr ;, ID
declstmt -> type ID · ( params ) { statements }, ID
declstmt -> type ID · = expr ;, void
declstmt -> type ID · ( params ) { statements }, void
declstmt -> type ID · = expr ;, bool
declstmt -> type ID · ( params ) { statements }, bool
declstmt -> type ID · = expr ;, int
declstmt -> type ID · ( params ) { statements }, int
declstmt -> type ID · = expr ;, float
declstmt -> type ID · ( params ) { statements }, float
declstmt -> type ID · = expr ;, double
declstmt -> type ID · ( params ) { statements }, double
declstmt -> type ID · = expr ;, char
declstmt -> type ID · ( params ) { statements }, char
declstmt -> type ID · = expr ;, string
declstmt -> type ID · ( params ) { statements }, string
declstmt -> type ID · = expr ;, extern
declstmt -> type ID · ( params ) { statements }, extern
declstmt -> type ID · = expr ;, class
declstmt -> type ID · ( params ) { statements }, class
declstmt -> type ID · = expr ;, (
declstmt -> type ID · ( params ) { statements }, (
declstmt -> type ID · = expr ;, this
declstmt -> type ID · ( params ) { statements }, this
declstmt -> type ID · = expr ;, new
declstmt -> type ID · ( params ) { statements }, new
declstmt -> type ID · = expr ;, LITBOOL
declstmt -> type ID · ( params ) { statements }, LITBOOL
declstmt -> type ID · = expr ;, LITINT
declstmt -> type ID · ( params ) { statements }, LITINT
declstmt -> type ID · = expr ;, LITFLOAT
declstmt -> type ID · ( params ) { statements }, LITFLOAT
declstmt -> type ID · = expr ;, LITDOUBLE
declstmt -> type ID · ( params ) { statements }, LITDOUBLE
declstmt -> type ID · = expr ;, LITCHAR
declstmt -> type ID · ( params ) { statements }, LITCHAR
declstmt -> type ID · = expr ;, LITSTRING
declstmt -> type ID · ( params ) { statements }, LITSTRING
declstmt -> type ID · = expr ;, null
declstmt -> type ID · ( params ) { statements }, null
declstmt -> type ID · = expr ;, ++
declstmt -> type ID · ( params ) { statements }, ++
declstmt -> type ID · = expr ;, --
declstmt -> type ID · ( params ) { statements }, --
declstmt -> type ID · = expr ;, break
declstmt -> type ID · ( params ) { statements }, break
declstmt -> type ID · = expr ;, return
declstmt -> type ID · ( params ) { statements }, return
declstmt -> type ID · = expr ;, delete
declstmt -> type ID · ( params ) { statements }, delete
declstmt -> type ID · = expr ;, while
declstmt -> type ID · ( params ) { statements }, while
declstmt -> type ID · = expr ;, for
declstmt -> type ID · ( params ) { statements }, for
declstmt -> type ID · = expr ;, if
declstmt -> type ID · ( params ) { statements }, if
declstmt -> type ID · = expr ;, }
declstmt -> type ID · ( params ) { statements }, }
declstmt -> type ID · = expr ;, &&
declstmt -> type ID · ( params ) { statements }, &&
declstmt -> type ID · = expr ;, ||
declstmt -> type ID · ( params ) { statements }, ||
declstmt -> type ID · = expr ;, +
declstmt -> type ID · ( params ) { statements }, +
declstmt -> type ID · = expr ;, -
declstmt -> type ID · ( params ) { statements }, -
declstmt -> type ID · = expr ;, *
declstmt -> type ID · ( params ) { statements }, *
declstmt -> type ID · = expr ;, /
declstmt -> type ID · ( params ) { statements }, /
declstmt -> type ID · = expr ;, !
declstmt -> type ID · ( params ) { statements }, !
declstmt -> type ID · = expr ;, else
declstmt -> type ID · ( params ) { statements }, else
***EndSet***
***EndState***
***State***
110
I_182_199_411_413_508_828_913_970_983_1028_1041_1250_1263_1279
***Set***
primitiveBracket -> primitive [ · optidx ], ID
optidx -> · aexpr, ]
optidx -> ·, ]
aexpr -> · aexpr + term, ]
aexpr -> · aexpr - term, ]
aexpr -> · term, ]
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ]
term -> · term / factor, ]
term -> · factor, ]
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ]
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
primitiveBracket -> primitive [ · optidx ], .
primitiveBracket -> primitive [ · optidx ], ;
primitiveBracket -> primitive [ · optidx ], &&
primitiveBracket -> primitive [ · optidx ], ||
primitiveBracket -> primitive [ · optidx ], >
primitiveBracket -> primitive [ · optidx ], <
primitiveBracket -> primitive [ · optidx ], >=
primitiveBracket -> primitive [ · optidx ], <=
primitiveBracket -> primitive [ · optidx ], ==
primitiveBracket -> primitive [ · optidx ], !=
primitiveBracket -> primitive [ · optidx ], +
primitiveBracket -> primitive [ · optidx ], -
primitiveBracket -> primitive [ · optidx ], *
primitiveBracket -> primitive [ · optidx ], /
primitiveBracket -> primitive [ · optidx ], )
primitiveBracket -> primitive [ · optidx ], ,
primitiveBracket -> primitive [ · optidx ], ]
***EndSet***
***EndState***
***State***
111
I_183_247_302_415_511_634_664_716_734_795_813_831_1099_1117_1151
***Set***
memberaccess -> primary . · ID, (
memberaccess -> primary . · ID, =
memberaccess -> primary . · ID, +=
memberaccess -> primary . · ID, -=
memberaccess -> primary . · ID, *=
memberaccess -> primary . · ID, /=
memberaccess -> primary . · ID, %=
memberaccess -> primary . · ID, [
memberaccess -> primary . · ID, .
memberaccess -> primary . · ID, ;
memberaccess -> primary . · ID, &&
memberaccess -> primary . · ID, ||
memberaccess -> primary . · ID, >
memberaccess -> primary . · ID, <
memberaccess -> primary . · ID, >=
memberaccess -> primary . · ID, <=
memberaccess -> primary . · ID, ==
memberaccess -> primary . · ID, !=
memberaccess -> primary . · ID, +
memberaccess -> primary . · ID, -
memberaccess -> primary . · ID, *
memberaccess -> primary . · ID, /
memberaccess -> primary . · ID, )
memberaccess -> primary . · ID, ,
memberaccess -> primary . · ID, ]
***EndSet***
***EndState***
***State***
112
I_184_303_635
***Set***
assign -> lvalue = · expr, ;
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
assign -> lvalue = · expr, )
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
assign -> lvalue = · expr, ,
expr -> · assign, ,
expr -> · nexpr, ,
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · factor, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
113
I_185_304_636
***Set***
assign -> lvalue += · expr, ;
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
assign -> lvalue += · expr, )
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
assign -> lvalue += · expr, ,
expr -> · assign, ,
expr -> · nexpr, ,
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · factor, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
114
I_186_305_637
***Set***
assign -> lvalue -= · expr, ;
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
assign -> lvalue -= · expr, )
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
assign -> lvalue -= · expr, ,
expr -> · assign, ,
expr -> · nexpr, ,
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · factor, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
115
I_187_306_638
***Set***
assign -> lvalue *= · expr, ;
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
assign -> lvalue *= · expr, )
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
assign -> lvalue *= · expr, ,
expr -> · assign, ,
expr -> · nexpr, ,
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · factor, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
116
I_188_307_639
***Set***
assign -> lvalue /= · expr, ;
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
assign -> lvalue /= · expr, )
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
assign -> lvalue /= · expr, ,
expr -> · assign, ,
expr -> · nexpr, ,
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · factor, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
117
I_189_308_640
***Set***
assign -> lvalue %= · expr, ;
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
assign -> lvalue %= · expr, )
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
assign -> lvalue %= · expr, ,
expr -> · assign, ,
expr -> · nexpr, ,
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · factor, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
118
I_190_248_309_641_665_717_735_796_814_1100_1118_1152_1197
***Set***
call -> memberaccess ( · args ), ;
call -> memberaccess ( · args ), .
args -> ·, )
args -> · expr, )
args -> · args , expr, )
expr -> · assign, )
expr -> · nexpr, )
args -> ·, ,
args -> · expr, ,
args -> · args , expr, ,
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
expr -> · assign, ,
expr -> · nexpr, ,
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · factor, ,
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], )
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
idBracket -> · ID [ optidx ], ,
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
call -> memberaccess ( · args ), &&
call -> memberaccess ( · args ), ||
call -> memberaccess ( · args ), >
call -> memberaccess ( · args ), <
call -> memberaccess ( · args ), >=
call -> memberaccess ( · args ), <=
call -> memberaccess ( · args ), ==
call -> memberaccess ( · args ), !=
call -> memberaccess ( · args ), +
call -> memberaccess ( · args ), -
call -> memberaccess ( · args ), *
call -> memberaccess ( · args ), /
call -> memberaccess ( · args ), )
call -> memberaccess ( · args ), ,
call -> memberaccess ( · args ), ]
***EndSet***
***EndState***
***State***
119
I_191_249_310_416_512_642_666_718_736_797_815_832_1101_1119_1153
***Set***
indexaccess -> memberaccess [ · aexpr ], =
indexaccess -> memberaccess [ · aexpr ], +=
indexaccess -> memberaccess [ · aexpr ], -=
indexaccess -> memberaccess [ · aexpr ], *=
indexaccess -> memberaccess [ · aexpr ], /=
indexaccess -> memberaccess [ · aexpr ], %=
indexaccess -> memberaccess [ · aexpr ], .
aexpr -> · aexpr + term, ]
aexpr -> · aexpr - term, ]
aexpr -> · term, ]
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ]
term -> · term / factor, ]
term -> · factor, ]
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ]
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
indexaccess -> memberaccess [ · aexpr ], ;
indexaccess -> memberaccess [ · aexpr ], &&
indexaccess -> memberaccess [ · aexpr ], ||
indexaccess -> memberaccess [ · aexpr ], >
indexaccess -> memberaccess [ · aexpr ], <
indexaccess -> memberaccess [ · aexpr ], >=
indexaccess -> memberaccess [ · aexpr ], <=
indexaccess -> memberaccess [ · aexpr ], ==
indexaccess -> memberaccess [ · aexpr ], !=
indexaccess -> memberaccess [ · aexpr ], +
indexaccess -> memberaccess [ · aexpr ], -
indexaccess -> memberaccess [ · aexpr ], *
indexaccess -> memberaccess [ · aexpr ], /
indexaccess -> memberaccess [ · aexpr ], )
indexaccess -> memberaccess [ · aexpr ], ,
indexaccess -> memberaccess [ · aexpr ], ]
***EndSet***
***EndState***
***State***
120
I_192_591_740_1200_1326_1369
***Set***
namespaceblock -> namespace ID { · statements }, $
namespaceblock -> namespace ID { · statements }, namespace
namespaceblock -> namespace ID { · statements }, {
namespaceblock -> namespace ID { · statements }, ID
namespaceblock -> namespace ID { · statements }, void
namespaceblock -> namespace ID { · statements }, bool
namespaceblock -> namespace ID { · statements }, int
namespaceblock -> namespace ID { · statements }, float
namespaceblock -> namespace ID { · statements }, double
namespaceblock -> namespace ID { · statements }, char
namespaceblock -> namespace ID { · statements }, string
namespaceblock -> namespace ID { · statements }, extern
namespaceblock -> namespace ID { · statements }, class
namespaceblock -> namespace ID { · statements }, (
namespaceblock -> namespace ID { · statements }, this
namespaceblock -> namespace ID { · statements }, new
namespaceblock -> namespace ID { · statements }, LITBOOL
namespaceblock -> namespace ID { · statements }, LITINT
namespaceblock -> namespace ID { · statements }, LITFLOAT
namespaceblock -> namespace ID { · statements }, LITDOUBLE
namespaceblock -> namespace ID { · statements }, LITCHAR
namespaceblock -> namespace ID { · statements }, LITSTRING
namespaceblock -> namespace ID { · statements }, null
namespaceblock -> namespace ID { · statements }, ++
namespaceblock -> namespace ID { · statements }, --
namespaceblock -> namespace ID { · statements }, break
namespaceblock -> namespace ID { · statements }, return
namespaceblock -> namespace ID { · statements }, delete
namespaceblock -> namespace ID { · statements }, while
namespaceblock -> namespace ID { · statements }, for
namespaceblock -> namespace ID { · statements }, if
statements -> · statements stmt, }
statements -> · stmt, }
statements -> ·, }
statements -> · statements stmt, namespace
statements -> · statements stmt, {
statements -> · statements stmt, ID
statements -> · statements stmt, void
statements -> · statements stmt, bool
statements -> · statements stmt, int
statements -> · statements stmt, float
statements -> · statements stmt, double
statements -> · statements stmt, char
statements -> · statements stmt, string
statements -> · statements stmt, extern
statements -> · statements stmt, class
statements -> · statements stmt, (
statements -> · statements stmt, this
statements -> · statements stmt, new
statements -> · statements stmt, LITBOOL
statements -> · statements stmt, LITINT
statements -> · statements stmt, LITFLOAT
statements -> · statements stmt, LITDOUBLE
statements -> · statements stmt, LITCHAR
statements -> · statements stmt, LITSTRING
statements -> · statements stmt, null
statements -> · statements stmt, ++
statements -> · statements stmt, --
statements -> · statements stmt, break
statements -> · statements stmt, return
statements -> · statements stmt, delete
statements -> · statements stmt, while
statements -> · statements stmt, for
statements -> · statements stmt, if
statements -> · stmt, namespace
statements -> · stmt, {
statements -> · stmt, ID
statements -> · stmt, void
statements -> · stmt, bool
statements -> · stmt, int
statements -> · stmt, float
statements -> · stmt, double
statements -> · stmt, char
statements -> · stmt, string
statements -> · stmt, extern
statements -> · stmt, class
statements -> · stmt, (
statements -> · stmt, this
statements -> · stmt, new
statements -> · stmt, LITBOOL
statements -> · stmt, LITINT
statements -> · stmt, LITFLOAT
statements -> · stmt, LITDOUBLE
statements -> · stmt, LITCHAR
statements -> · stmt, LITSTRING
statements -> · stmt, null
statements -> · stmt, ++
statements -> · stmt, --
statements -> · stmt, break
statements -> · stmt, return
statements -> · stmt, delete
statements -> · stmt, while
statements -> · stmt, for
statements -> · stmt, if
statements -> ·, namespace
statements -> ·, {
statements -> ·, ID
statements -> ·, void
statements -> ·, bool
statements -> ·, int
statements -> ·, float
statements -> ·, double
statements -> ·, char
statements -> ·, string
statements -> ·, extern
statements -> ·, class
statements -> ·, (
statements -> ·, this
statements -> ·, new
statements -> ·, LITBOOL
statements -> ·, LITINT
statements -> ·, LITFLOAT
statements -> ·, LITDOUBLE
statements -> ·, LITCHAR
statements -> ·, LITSTRING
statements -> ·, null
statements -> ·, ++
statements -> ·, --
statements -> ·, break
statements -> ·, return
statements -> ·, delete
statements -> ·, while
statements -> ·, for
statements -> ·, if
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
namespaceblock -> namespace ID { · statements }, }
namespaceblock -> namespace ID { · statements }, &&
namespaceblock -> namespace ID { · statements }, ||
namespaceblock -> namespace ID { · statements }, +
namespaceblock -> namespace ID { · statements }, -
namespaceblock -> namespace ID { · statements }, *
namespaceblock -> namespace ID { · statements }, /
namespaceblock -> namespace ID { · statements }, !
namespaceblock -> namespace ID { · statements }, else
***EndSet***
***EndState***
***State***
121
I_194_592_741_1132_1201_1327_1370
***Set***
declstmt -> extern type ID · ( params ) ;, $
declstmt -> extern type ID · ( params ) ;, namespace
declstmt -> extern type ID · ( params ) ;, {
declstmt -> extern type ID · ( params ) ;, ID
declstmt -> extern type ID · ( params ) ;, void
declstmt -> extern type ID · ( params ) ;, bool
declstmt -> extern type ID · ( params ) ;, int
declstmt -> extern type ID · ( params ) ;, float
declstmt -> extern type ID · ( params ) ;, double
declstmt -> extern type ID · ( params ) ;, char
declstmt -> extern type ID · ( params ) ;, string
declstmt -> extern type ID · ( params ) ;, extern
declstmt -> extern type ID · ( params ) ;, class
declstmt -> extern type ID · ( params ) ;, (
declstmt -> extern type ID · ( params ) ;, this
declstmt -> extern type ID · ( params ) ;, new
declstmt -> extern type ID · ( params ) ;, LITBOOL
declstmt -> extern type ID · ( params ) ;, LITINT
declstmt -> extern type ID · ( params ) ;, LITFLOAT
declstmt -> extern type ID · ( params ) ;, LITDOUBLE
declstmt -> extern type ID · ( params ) ;, LITCHAR
declstmt -> extern type ID · ( params ) ;, LITSTRING
declstmt -> extern type ID · ( params ) ;, null
declstmt -> extern type ID · ( params ) ;, ++
declstmt -> extern type ID · ( params ) ;, --
declstmt -> extern type ID · ( params ) ;, break
declstmt -> extern type ID · ( params ) ;, return
declstmt -> extern type ID · ( params ) ;, delete
declstmt -> extern type ID · ( params ) ;, while
declstmt -> extern type ID · ( params ) ;, for
declstmt -> extern type ID · ( params ) ;, if
declstmt -> extern type ID · ( params ) ;, }
declstmt -> extern type ID · ( params ) ;, &&
declstmt -> extern type ID · ( params ) ;, ||
declstmt -> extern type ID · ( params ) ;, +
declstmt -> extern type ID · ( params ) ;, -
declstmt -> extern type ID · ( params ) ;, *
declstmt -> extern type ID · ( params ) ;, /
declstmt -> extern type ID · ( params ) ;, !
declstmt -> extern type ID · ( params ) ;, else
***EndSet***
***EndState***
***State***
122
I_195
***Set***
inherit -> : · ID, {
***EndSet***
***EndState***
***State***
123
I_196_593_742_1133_1202_1328_1371
***Set***
declstmt -> class ID inherit · { declstatements }, $
declstmt -> class ID inherit · { declstatements }, namespace
declstmt -> class ID inherit · { declstatements }, {
declstmt -> class ID inherit · { declstatements }, ID
declstmt -> class ID inherit · { declstatements }, void
declstmt -> class ID inherit · { declstatements }, bool
declstmt -> class ID inherit · { declstatements }, int
declstmt -> class ID inherit · { declstatements }, float
declstmt -> class ID inherit · { declstatements }, double
declstmt -> class ID inherit · { declstatements }, char
declstmt -> class ID inherit · { declstatements }, string
declstmt -> class ID inherit · { declstatements }, extern
declstmt -> class ID inherit · { declstatements }, class
declstmt -> class ID inherit · { declstatements }, (
declstmt -> class ID inherit · { declstatements }, this
declstmt -> class ID inherit · { declstatements }, new
declstmt -> class ID inherit · { declstatements }, LITBOOL
declstmt -> class ID inherit · { declstatements }, LITINT
declstmt -> class ID inherit · { declstatements }, LITFLOAT
declstmt -> class ID inherit · { declstatements }, LITDOUBLE
declstmt -> class ID inherit · { declstatements }, LITCHAR
declstmt -> class ID inherit · { declstatements }, LITSTRING
declstmt -> class ID inherit · { declstatements }, null
declstmt -> class ID inherit · { declstatements }, ++
declstmt -> class ID inherit · { declstatements }, --
declstmt -> class ID inherit · { declstatements }, break
declstmt -> class ID inherit · { declstatements }, return
declstmt -> class ID inherit · { declstatements }, delete
declstmt -> class ID inherit · { declstatements }, while
declstmt -> class ID inherit · { declstatements }, for
declstmt -> class ID inherit · { declstatements }, if
declstmt -> class ID inherit · { declstatements }, }
declstmt -> class ID inherit · { declstatements }, &&
declstmt -> class ID inherit · { declstatements }, ||
declstmt -> class ID inherit · { declstatements }, +
declstmt -> class ID inherit · { declstatements }, -
declstmt -> class ID inherit · { declstatements }, *
declstmt -> class ID inherit · { declstatements }, /
declstmt -> class ID inherit · { declstatements }, !
declstmt -> class ID inherit · { declstatements }, else
***EndSet***
***EndState***
***State***
124
I_197_409_506_826_912_969_982_1027_1040_1249_1262_1278_1306
***Set***
newobj -> new ID ( · ), ;
newobj -> new ID ( · ), .
newobj -> new ID ( · ), &&
newobj -> new ID ( · ), ||
newobj -> new ID ( · ), >
newobj -> new ID ( · ), <
newobj -> new ID ( · ), >=
newobj -> new ID ( · ), <=
newobj -> new ID ( · ), ==
newobj -> new ID ( · ), !=
newobj -> new ID ( · ), +
newobj -> new ID ( · ), -
newobj -> new ID ( · ), *
newobj -> new ID ( · ), /
newobj -> new ID ( · ), )
newobj -> new ID ( · ), ,
newobj -> new ID ( · ), ]
***EndSet***
***EndState***
***State***
125
I_213_274_607_650_702_724_781_803_1085_1107_1141
***Set***
cast -> ( type · ) factor, ;
cast -> ( type · ) factor, &&
cast -> ( type · ) factor, ||
cast -> ( type · ) factor, >
cast -> ( type · ) factor, <
cast -> ( type · ) factor, >=
cast -> ( type · ) factor, <=
cast -> ( type · ) factor, ==
cast -> ( type · ) factor, !=
cast -> ( type · ) factor, +
cast -> ( type · ) factor, -
cast -> ( type · ) factor, *
cast -> ( type · ) factor, /
cast -> ( type · ) factor, )
cast -> ( type · ) factor, ,
cast -> ( type · ) factor, ]
***EndSet***
***EndState***
***State***
126
I_223_278_374_438_471_533_566_611_853_886_953
***Set***
incdec -> ID · ++, ;
incdec -> ID · --, ;
primary -> ID ·, ;
incdec -> ID · ++, &&
incdec -> ID · --, &&
primary -> ID ·, &&
incdec -> ID · ++, ||
incdec -> ID · --, ||
primary -> ID ·, ||
incdec -> ID · ++, >
incdec -> ID · --, >
primary -> ID ·, >
incdec -> ID · ++, <
incdec -> ID · --, <
primary -> ID ·, <
incdec -> ID · ++, >=
incdec -> ID · --, >=
primary -> ID ·, >=
incdec -> ID · ++, <=
incdec -> ID · --, <=
primary -> ID ·, <=
incdec -> ID · ++, ==
incdec -> ID · --, ==
primary -> ID ·, ==
incdec -> ID · ++, !=
incdec -> ID · --, !=
primary -> ID ·, !=
incdec -> ID · ++, +
incdec -> ID · --, +
primary -> ID ·, +
incdec -> ID · ++, -
incdec -> ID · --, -
primary -> ID ·, -
incdec -> ID · ++, *
incdec -> ID · --, *
primary -> ID ·, *
incdec -> ID · ++, /
incdec -> ID · --, /
primary -> ID ·, /
call -> ID · ( args ), ;
call -> ID · ( args ), &&
call -> ID · ( args ), ||
call -> ID · ( args ), >
call -> ID · ( args ), <
call -> ID · ( args ), >=
call -> ID · ( args ), <=
call -> ID · ( args ), ==
call -> ID · ( args ), !=
call -> ID · ( args ), +
call -> ID · ( args ), -
call -> ID · ( args ), *
call -> ID · ( args ), /
primary -> ID ·, .
idBracket -> ID · [ optidx ], ;
idBracket -> ID · [ optidx ], &&
idBracket -> ID · [ optidx ], ||
idBracket -> ID · [ optidx ], >
idBracket -> ID · [ optidx ], <
idBracket -> ID · [ optidx ], >=
idBracket -> ID · [ optidx ], <=
idBracket -> ID · [ optidx ], ==
idBracket -> ID · [ optidx ], !=
idBracket -> ID · [ optidx ], +
idBracket -> ID · [ optidx ], -
idBracket -> ID · [ optidx ], *
idBracket -> ID · [ optidx ], /
call -> ID · ( args ), .
idBracket -> ID · [ optidx ], .
incdec -> ID · ++, )
incdec -> ID · --, )
primary -> ID ·, )
call -> ID · ( args ), )
idBracket -> ID · [ optidx ], )
incdec -> ID · ++, ]
incdec -> ID · --, ]
primary -> ID ·, ]
call -> ID · ( args ), ]
idBracket -> ID · [ optidx ], ]
incdec -> ID · ++, ,
incdec -> ID · --, ,
primary -> ID ·, ,
call -> ID · ( args ), ,
idBracket -> ID · [ optidx ], ,
***EndSet***
***EndState***
***State***
127
I_224_279_376_440_473_535_568_612_855_888_955
***Set***
primary -> indexaccess ·, ;
primary -> indexaccess ·, &&
primary -> indexaccess ·, ||
primary -> indexaccess ·, >
primary -> indexaccess ·, <
primary -> indexaccess ·, >=
primary -> indexaccess ·, <=
primary -> indexaccess ·, ==
primary -> indexaccess ·, !=
primary -> indexaccess ·, +
primary -> indexaccess ·, -
primary -> indexaccess ·, *
primary -> indexaccess ·, /
primary -> indexaccess ·, .
primary -> indexaccess ·, )
primary -> indexaccess ·, ]
primary -> indexaccess ·, ,
***EndSet***
***EndState***
***State***
128
I_225_280_613_654_706_728_785_807_1089_1111_1145
***Set***
factor -> - factor ·, ;
factor -> - factor ·, &&
factor -> - factor ·, ||
factor -> - factor ·, >
factor -> - factor ·, <
factor -> - factor ·, >=
factor -> - factor ·, <=
factor -> - factor ·, ==
factor -> - factor ·, !=
factor -> - factor ·, +
factor -> - factor ·, -
factor -> - factor ·, *
factor -> - factor ·, /
factor -> - factor ·, )
factor -> - factor ·, ,
factor -> - factor ·, ]
***EndSet***
***EndState***
***State***
129
I_227_282_386_450_482_545_577_615_865_897_964
***Set***
primary -> memberaccess ·, ;
primary -> memberaccess ·, &&
primary -> memberaccess ·, ||
primary -> memberaccess ·, >
primary -> memberaccess ·, <
primary -> memberaccess ·, >=
primary -> memberaccess ·, <=
primary -> memberaccess ·, ==
primary -> memberaccess ·, !=
primary -> memberaccess ·, +
primary -> memberaccess ·, -
primary -> memberaccess ·, *
primary -> memberaccess ·, /
indexaccess -> memberaccess · [ aexpr ], ;
call -> memberaccess · ( args ), ;
indexaccess -> memberaccess · [ aexpr ], &&
call -> memberaccess · ( args ), &&
indexaccess -> memberaccess · [ aexpr ], ||
call -> memberaccess · ( args ), ||
indexaccess -> memberaccess · [ aexpr ], >
call -> memberaccess · ( args ), >
indexaccess -> memberaccess · [ aexpr ], <
call -> memberaccess · ( args ), <
indexaccess -> memberaccess · [ aexpr ], >=
call -> memberaccess · ( args ), >=
indexaccess -> memberaccess · [ aexpr ], <=
call -> memberaccess · ( args ), <=
indexaccess -> memberaccess · [ aexpr ], ==
call -> memberaccess · ( args ), ==
indexaccess -> memberaccess · [ aexpr ], !=
call -> memberaccess · ( args ), !=
indexaccess -> memberaccess · [ aexpr ], +
call -> memberaccess · ( args ), +
indexaccess -> memberaccess · [ aexpr ], -
call -> memberaccess · ( args ), -
indexaccess -> memberaccess · [ aexpr ], *
call -> memberaccess · ( args ), *
indexaccess -> memberaccess · [ aexpr ], /
call -> memberaccess · ( args ), /
primary -> memberaccess ·, .
indexaccess -> memberaccess · [ aexpr ], .
call -> memberaccess · ( args ), .
primary -> memberaccess ·, )
indexaccess -> memberaccess · [ aexpr ], )
call -> memberaccess · ( args ), )
primary -> memberaccess ·, ]
indexaccess -> memberaccess · [ aexpr ], ]
call -> memberaccess · ( args ), ]
primary -> memberaccess ·, ,
indexaccess -> memberaccess · [ aexpr ], ,
call -> memberaccess · ( args ), ,
***EndSet***
***EndState***
***State***
130
I_229_284_617_655_707_729_786_808_1090_1112_1146
***Set***
factor -> ! factor ·, ;
factor -> ! factor ·, &&
factor -> ! factor ·, ||
factor -> ! factor ·, >
factor -> ! factor ·, <
factor -> ! factor ·, >=
factor -> ! factor ·, <=
factor -> ! factor ·, ==
factor -> ! factor ·, !=
factor -> ! factor ·, +
factor -> ! factor ·, -
factor -> ! factor ·, *
factor -> ! factor ·, /
factor -> ! factor ·, )
factor -> ! factor ·, ,
factor -> ! factor ·, ]
***EndSet***
***EndState***
***State***
131
I_234_594_743_1203_1329_1372
***Set***
stmt -> delete expr ; ·, $
stmt -> delete expr ; ·, namespace
stmt -> delete expr ; ·, {
stmt -> delete expr ; ·, ID
stmt -> delete expr ; ·, void
stmt -> delete expr ; ·, bool
stmt -> delete expr ; ·, int
stmt -> delete expr ; ·, float
stmt -> delete expr ; ·, double
stmt -> delete expr ; ·, char
stmt -> delete expr ; ·, string
stmt -> delete expr ; ·, extern
stmt -> delete expr ; ·, class
stmt -> delete expr ; ·, (
stmt -> delete expr ; ·, this
stmt -> delete expr ; ·, new
stmt -> delete expr ; ·, LITBOOL
stmt -> delete expr ; ·, LITINT
stmt -> delete expr ; ·, LITFLOAT
stmt -> delete expr ; ·, LITDOUBLE
stmt -> delete expr ; ·, LITCHAR
stmt -> delete expr ; ·, LITSTRING
stmt -> delete expr ; ·, null
stmt -> delete expr ; ·, ++
stmt -> delete expr ; ·, --
stmt -> delete expr ; ·, break
stmt -> delete expr ; ·, return
stmt -> delete expr ; ·, delete
stmt -> delete expr ; ·, while
stmt -> delete expr ; ·, for
stmt -> delete expr ; ·, if
stmt -> delete expr ; ·, }
stmt -> delete expr ; ·, &&
stmt -> delete expr ; ·, ||
stmt -> delete expr ; ·, +
stmt -> delete expr ; ·, -
stmt -> delete expr ; ·, *
stmt -> delete expr ; ·, /
stmt -> delete expr ; ·, !
stmt -> delete expr ; ·, else
***EndSet***
***EndState***
***State***
132
I_235_290_622
***Set***
bexpr -> bexpr || · bexpr, ;
bexpr -> bexpr || · bexpr, &&
bexpr -> bexpr || · bexpr, ||
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], .
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
bexpr -> bexpr || · bexpr, )
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
bexpr -> bexpr || · bexpr, ,
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
133
I_236_291_623
***Set***
bexpr -> bexpr && · bexpr, ;
bexpr -> bexpr && · bexpr, &&
bexpr -> bexpr && · bexpr, ||
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], .
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
bexpr -> bexpr && · bexpr, )
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
bexpr -> bexpr && · bexpr, ,
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
134
I_237_292_624
***Set***
bexpr -> aexpr == · aexpr, ;
bexpr -> aexpr == · aexpr, &&
bexpr -> aexpr == · aexpr, ||
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
aexpr -> · aexpr + term, &&
aexpr -> · aexpr - term, &&
aexpr -> · term, &&
aexpr -> · aexpr + term, ||
aexpr -> · aexpr - term, ||
aexpr -> · term, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · factor, ;
term -> · term * factor, &&
term -> · term / factor, &&
term -> · factor, &&
term -> · term * factor, ||
term -> · term / factor, ||
term -> · factor, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
bexpr -> aexpr == · aexpr, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
bexpr -> aexpr == · aexpr, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
135
I_238_293_625
***Set***
bexpr -> aexpr != · aexpr, ;
bexpr -> aexpr != · aexpr, &&
bexpr -> aexpr != · aexpr, ||
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
aexpr -> · aexpr + term, &&
aexpr -> · aexpr - term, &&
aexpr -> · term, &&
aexpr -> · aexpr + term, ||
aexpr -> · aexpr - term, ||
aexpr -> · term, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · factor, ;
term -> · term * factor, &&
term -> · term / factor, &&
term -> · factor, &&
term -> · term * factor, ||
term -> · term / factor, ||
term -> · factor, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
bexpr -> aexpr != · aexpr, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
bexpr -> aexpr != · aexpr, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
136
I_239_294_626
***Set***
bexpr -> aexpr <= · aexpr, ;
bexpr -> aexpr <= · aexpr, &&
bexpr -> aexpr <= · aexpr, ||
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
aexpr -> · aexpr + term, &&
aexpr -> · aexpr - term, &&
aexpr -> · term, &&
aexpr -> · aexpr + term, ||
aexpr -> · aexpr - term, ||
aexpr -> · term, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · factor, ;
term -> · term * factor, &&
term -> · term / factor, &&
term -> · factor, &&
term -> · term * factor, ||
term -> · term / factor, ||
term -> · factor, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
bexpr -> aexpr <= · aexpr, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
bexpr -> aexpr <= · aexpr, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
137
I_240_295_627
***Set***
bexpr -> aexpr >= · aexpr, ;
bexpr -> aexpr >= · aexpr, &&
bexpr -> aexpr >= · aexpr, ||
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
aexpr -> · aexpr + term, &&
aexpr -> · aexpr - term, &&
aexpr -> · term, &&
aexpr -> · aexpr + term, ||
aexpr -> · aexpr - term, ||
aexpr -> · term, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · factor, ;
term -> · term * factor, &&
term -> · term / factor, &&
term -> · factor, &&
term -> · term * factor, ||
term -> · term / factor, ||
term -> · factor, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
bexpr -> aexpr >= · aexpr, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
bexpr -> aexpr >= · aexpr, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
138
I_241_296_628
***Set***
bexpr -> aexpr > · aexpr, ;
bexpr -> aexpr > · aexpr, &&
bexpr -> aexpr > · aexpr, ||
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
aexpr -> · aexpr + term, &&
aexpr -> · aexpr - term, &&
aexpr -> · term, &&
aexpr -> · aexpr + term, ||
aexpr -> · aexpr - term, ||
aexpr -> · term, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · factor, ;
term -> · term * factor, &&
term -> · term / factor, &&
term -> · factor, &&
term -> · term * factor, ||
term -> · term / factor, ||
term -> · factor, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
bexpr -> aexpr > · aexpr, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
bexpr -> aexpr > · aexpr, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
139
I_242_297_629
***Set***
bexpr -> aexpr < · aexpr, ;
bexpr -> aexpr < · aexpr, &&
bexpr -> aexpr < · aexpr, ||
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
aexpr -> · aexpr + term, &&
aexpr -> · aexpr - term, &&
aexpr -> · term, &&
aexpr -> · aexpr + term, ||
aexpr -> · aexpr - term, ||
aexpr -> · term, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · factor, ;
term -> · term * factor, &&
term -> · term / factor, &&
term -> · factor, &&
term -> · term * factor, ||
term -> · term / factor, ||
term -> · factor, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
bexpr -> aexpr < · aexpr, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
bexpr -> aexpr < · aexpr, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
***EndSet***
***EndState***
***State***
140
I_243_298_630_660_693_712_791_1095
***Set***
aexpr -> aexpr + · term, ;
aexpr -> aexpr + · term, >
aexpr -> aexpr + · term, <
aexpr -> aexpr + · term, >=
aexpr -> aexpr + · term, <=
aexpr -> aexpr + · term, ==
aexpr -> aexpr + · term, !=
aexpr -> aexpr + · term, +
aexpr -> aexpr + · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · factor, ;
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
aexpr -> aexpr + · term, )
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
aexpr -> aexpr + · term, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
aexpr -> aexpr + · term, ]
term -> · term * factor, ]
term -> · term / factor, ]
term -> · factor, ]
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
idBracket -> · ID [ optidx ], ]
aexpr -> aexpr + · term, &&
aexpr -> aexpr + · term, ||
term -> · term * factor, &&
term -> · term / factor, &&
term -> · factor, &&
term -> · term * factor, ||
term -> · term / factor, ||
term -> · factor, ||
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
***EndSet***
***EndState***
***State***
141
I_244_299_631_661_694_713_792_1096
***Set***
aexpr -> aexpr - · term, ;
aexpr -> aexpr - · term, >
aexpr -> aexpr - · term, <
aexpr -> aexpr - · term, >=
aexpr -> aexpr - · term, <=
aexpr -> aexpr - · term, ==
aexpr -> aexpr - · term, !=
aexpr -> aexpr - · term, +
aexpr -> aexpr - · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · factor, ;
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
aexpr -> aexpr - · term, )
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
aexpr -> aexpr - · term, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
aexpr -> aexpr - · term, ]
term -> · term * factor, ]
term -> · term / factor, ]
term -> · factor, ]
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
idBracket -> · ID [ optidx ], ]
aexpr -> aexpr - · term, &&
aexpr -> aexpr - · term, ||
term -> · term * factor, &&
term -> · term / factor, &&
term -> · factor, &&
term -> · term * factor, ||
term -> · term / factor, ||
term -> · factor, ||
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
***EndSet***
***EndState***
***State***
142
I_245_300_632_662_695_714_793_1097
***Set***
term -> term * · factor, ;
term -> term * · factor, >
term -> term * · factor, <
term -> term * · factor, >=
term -> term * · factor, <=
term -> term * · factor, ==
term -> term * · factor, !=
term -> term * · factor, +
term -> term * · factor, -
term -> term * · factor, *
term -> term * · factor, /
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
term -> term * · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
term -> term * · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
term -> term * · factor, ]
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
idBracket -> · ID [ optidx ], ]
term -> term * · factor, &&
term -> term * · factor, ||
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
***EndSet***
***EndState***
***State***
143
I_246_301_633_663_696_715_794_1098
***Set***
term -> term / · factor, ;
term -> term / · factor, >
term -> term / · factor, <
term -> term / · factor, >=
term -> term / · factor, <=
term -> term / · factor, ==
term -> term / · factor, !=
term -> term / · factor, +
term -> term / · factor, -
term -> term / · factor, *
term -> term / · factor, /
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
term -> term / · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
term -> term / · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
term -> term / · factor, ]
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
idBracket -> · ID [ optidx ], ]
term -> term / · factor, &&
term -> term / · factor, ||
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
***EndSet***
***EndState***
***State***
144
I_250_595_744_1204_1330_1373
***Set***
stmt -> while ( expr · ) stmt, $
stmt -> while ( expr · ) stmt, namespace
stmt -> while ( expr · ) stmt, {
stmt -> while ( expr · ) stmt, ID
stmt -> while ( expr · ) stmt, void
stmt -> while ( expr · ) stmt, bool
stmt -> while ( expr · ) stmt, int
stmt -> while ( expr · ) stmt, float
stmt -> while ( expr · ) stmt, double
stmt -> while ( expr · ) stmt, char
stmt -> while ( expr · ) stmt, string
stmt -> while ( expr · ) stmt, extern
stmt -> while ( expr · ) stmt, class
stmt -> while ( expr · ) stmt, (
stmt -> while ( expr · ) stmt, this
stmt -> while ( expr · ) stmt, new
stmt -> while ( expr · ) stmt, LITBOOL
stmt -> while ( expr · ) stmt, LITINT
stmt -> while ( expr · ) stmt, LITFLOAT
stmt -> while ( expr · ) stmt, LITDOUBLE
stmt -> while ( expr · ) stmt, LITCHAR
stmt -> while ( expr · ) stmt, LITSTRING
stmt -> while ( expr · ) stmt, null
stmt -> while ( expr · ) stmt, ++
stmt -> while ( expr · ) stmt, --
stmt -> while ( expr · ) stmt, break
stmt -> while ( expr · ) stmt, return
stmt -> while ( expr · ) stmt, delete
stmt -> while ( expr · ) stmt, while
stmt -> while ( expr · ) stmt, for
stmt -> while ( expr · ) stmt, if
stmt -> while ( expr · ) stmt, }
stmt -> while ( expr · ) stmt, &&
stmt -> while ( expr · ) stmt, ||
stmt -> while ( expr · ) stmt, +
stmt -> while ( expr · ) stmt, -
stmt -> while ( expr · ) stmt, *
stmt -> while ( expr · ) stmt, /
stmt -> while ( expr · ) stmt, !
stmt -> while ( expr · ) stmt, else
***EndSet***
***EndState***
***State***
145
I_263_596_745_1205_1331_1374
***Set***
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, $
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, namespace
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, {
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, ID
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, void
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, bool
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, int
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, float
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, double
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, char
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, string
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, extern
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, class
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, (
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, this
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, new
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, LITINT
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, null
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, ++
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, --
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, break
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, return
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, delete
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, while
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, for
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, if
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], .
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, }
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, &&
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, ||
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, +
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, -
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, *
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, /
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, !
stmt -> for ( stmt · bexpr ; stmtexpr ) stmt, else
***EndSet***
***EndState***
***State***
146
I_267_597_746_1206_1332_1375
***Set***
stmt -> if ( expr · ) stmt elifclauselist elseclause, $
stmt -> if ( expr · ) stmt elifclauselist elseclause, namespace
stmt -> if ( expr · ) stmt elifclauselist elseclause, {
stmt -> if ( expr · ) stmt elifclauselist elseclause, ID
stmt -> if ( expr · ) stmt elifclauselist elseclause, void
stmt -> if ( expr · ) stmt elifclauselist elseclause, bool
stmt -> if ( expr · ) stmt elifclauselist elseclause, int
stmt -> if ( expr · ) stmt elifclauselist elseclause, float
stmt -> if ( expr · ) stmt elifclauselist elseclause, double
stmt -> if ( expr · ) stmt elifclauselist elseclause, char
stmt -> if ( expr · ) stmt elifclauselist elseclause, string
stmt -> if ( expr · ) stmt elifclauselist elseclause, extern
stmt -> if ( expr · ) stmt elifclauselist elseclause, class
stmt -> if ( expr · ) stmt elifclauselist elseclause, (
stmt -> if ( expr · ) stmt elifclauselist elseclause, this
stmt -> if ( expr · ) stmt elifclauselist elseclause, new
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITBOOL
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITINT
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITFLOAT
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITCHAR
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITSTRING
stmt -> if ( expr · ) stmt elifclauselist elseclause, null
stmt -> if ( expr · ) stmt elifclauselist elseclause, ++
stmt -> if ( expr · ) stmt elifclauselist elseclause, --
stmt -> if ( expr · ) stmt elifclauselist elseclause, break
stmt -> if ( expr · ) stmt elifclauselist elseclause, return
stmt -> if ( expr · ) stmt elifclauselist elseclause, delete
stmt -> if ( expr · ) stmt elifclauselist elseclause, while
stmt -> if ( expr · ) stmt elifclauselist elseclause, for
stmt -> if ( expr · ) stmt elifclauselist elseclause, if
stmt -> if ( expr · ) stmt elifclauselist elseclause, }
stmt -> if ( expr · ) stmt elifclauselist elseclause, &&
stmt -> if ( expr · ) stmt elifclauselist elseclause, ||
stmt -> if ( expr · ) stmt elifclauselist elseclause, +
stmt -> if ( expr · ) stmt elifclauselist elseclause, -
stmt -> if ( expr · ) stmt elifclauselist elseclause, *
stmt -> if ( expr · ) stmt elifclauselist elseclause, /
stmt -> if ( expr · ) stmt elifclauselist elseclause, !
stmt -> if ( expr · ) stmt elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
147
I_268_598_747_1207_1333_1376
***Set***
stmt -> return expr ; ·, $
stmt -> return expr ; ·, namespace
stmt -> return expr ; ·, {
stmt -> return expr ; ·, ID
stmt -> return expr ; ·, void
stmt -> return expr ; ·, bool
stmt -> return expr ; ·, int
stmt -> return expr ; ·, float
stmt -> return expr ; ·, double
stmt -> return expr ; ·, char
stmt -> return expr ; ·, string
stmt -> return expr ; ·, extern
stmt -> return expr ; ·, class
stmt -> return expr ; ·, (
stmt -> return expr ; ·, this
stmt -> return expr ; ·, new
stmt -> return expr ; ·, LITBOOL
stmt -> return expr ; ·, LITINT
stmt -> return expr ; ·, LITFLOAT
stmt -> return expr ; ·, LITDOUBLE
stmt -> return expr ; ·, LITCHAR
stmt -> return expr ; ·, LITSTRING
stmt -> return expr ; ·, null
stmt -> return expr ; ·, ++
stmt -> return expr ; ·, --
stmt -> return expr ; ·, break
stmt -> return expr ; ·, return
stmt -> return expr ; ·, delete
stmt -> return expr ; ·, while
stmt -> return expr ; ·, for
stmt -> return expr ; ·, if
stmt -> return expr ; ·, }
stmt -> return expr ; ·, &&
stmt -> return expr ; ·, ||
stmt -> return expr ; ·, +
stmt -> return expr ; ·, -
stmt -> return expr ; ·, *
stmt -> return expr ; ·, /
stmt -> return expr ; ·, !
stmt -> return expr ; ·, else
***EndSet***
***EndState***
***State***
148
I_289_414_510_830_915_972_985_1030_1043_1252_1265_1281
***Set***
primary -> ( expr ) ·, .
primary -> ( expr ) ·, ;
primary -> ( expr ) ·, &&
primary -> ( expr ) ·, ||
primary -> ( expr ) ·, >
primary -> ( expr ) ·, <
primary -> ( expr ) ·, >=
primary -> ( expr ) ·, <=
primary -> ( expr ) ·, ==
primary -> ( expr ) ·, !=
primary -> ( expr ) ·, +
primary -> ( expr ) ·, -
primary -> ( expr ) ·, *
primary -> ( expr ) ·, /
primary -> ( expr ) ·, )
primary -> ( expr ) ·, ,
primary -> ( expr ) ·, ]
***EndSet***
***EndState***
***State***
149
I_322_599_748_1208_1334_1377
***Set***
statementblock -> { statements } ·, $
statementblock -> { statements } ·, namespace
statementblock -> { statements } ·, {
statementblock -> { statements } ·, ID
statementblock -> { statements } ·, void
statementblock -> { statements } ·, bool
statementblock -> { statements } ·, int
statementblock -> { statements } ·, float
statementblock -> { statements } ·, double
statementblock -> { statements } ·, char
statementblock -> { statements } ·, string
statementblock -> { statements } ·, extern
statementblock -> { statements } ·, class
statementblock -> { statements } ·, (
statementblock -> { statements } ·, this
statementblock -> { statements } ·, new
statementblock -> { statements } ·, LITBOOL
statementblock -> { statements } ·, LITINT
statementblock -> { statements } ·, LITFLOAT
statementblock -> { statements } ·, LITDOUBLE
statementblock -> { statements } ·, LITCHAR
statementblock -> { statements } ·, LITSTRING
statementblock -> { statements } ·, null
statementblock -> { statements } ·, ++
statementblock -> { statements } ·, --
statementblock -> { statements } ·, break
statementblock -> { statements } ·, return
statementblock -> { statements } ·, delete
statementblock -> { statements } ·, while
statementblock -> { statements } ·, for
statementblock -> { statements } ·, if
statementblock -> { statements } ·, }
statementblock -> { statements } ·, &&
statementblock -> { statements } ·, ||
statementblock -> { statements } ·, +
statementblock -> { statements } ·, -
statementblock -> { statements } ·, *
statementblock -> { statements } ·, /
statementblock -> { statements } ·, !
statementblock -> { statements } ·, else
***EndSet***
***EndState***
***State***
150
I_347
***Set***
args -> expr ·, )
args -> expr ·, ,
***EndSet***
***EndState***
***State***
151
I_358_417_513_833_916_973_986_1031_1044_1253_1266_1282_1307
***Set***
call -> ID ( args · ), ;
call -> ID ( args · ), .
args -> args · , expr, )
args -> args · , expr, ,
call -> ID ( args · ), &&
call -> ID ( args · ), ||
call -> ID ( args · ), >
call -> ID ( args · ), <
call -> ID ( args · ), >=
call -> ID ( args · ), <=
call -> ID ( args · ), ==
call -> ID ( args · ), !=
call -> ID ( args · ), +
call -> ID ( args · ), -
call -> ID ( args · ), *
call -> ID ( args · ), /
call -> ID ( args · ), )
call -> ID ( args · ), ,
call -> ID ( args · ), ]
***EndSet***
***EndState***
***State***
152
I_380
***Set***
optidx -> aexpr ·, ]
aexpr -> aexpr · + term, ]
aexpr -> aexpr · - term, ]
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
***EndSet***
***EndState***
***State***
153
I_382_446_478_541_573_861_893_960
***Set***
term -> factor ·, ]
term -> factor ·, +
term -> factor ·, -
term -> factor ·, *
term -> factor ·, /
term -> factor ·, ;
term -> factor ·, &&
term -> factor ·, ||
term -> factor ·, >
term -> factor ·, <
term -> factor ·, >=
term -> factor ·, <=
term -> factor ·, ==
term -> factor ·, !=
term -> factor ·, )
term -> factor ·, ,
***EndSet***
***EndState***
***State***
154
I_388_402_407_418_514_685_769_834_917_974_987_1032_1045_1073_1254_1267_1283_1308
***Set***
idBracket -> ID [ optidx · ], ID
idBracket -> ID [ optidx · ], =
idBracket -> ID [ optidx · ], +=
idBracket -> ID [ optidx · ], -=
idBracket -> ID [ optidx · ], *=
idBracket -> ID [ optidx · ], /=
idBracket -> ID [ optidx · ], %=
idBracket -> ID [ optidx · ], .
idBracket -> ID [ optidx · ], ;
idBracket -> ID [ optidx · ], &&
idBracket -> ID [ optidx · ], ||
idBracket -> ID [ optidx · ], >
idBracket -> ID [ optidx · ], <
idBracket -> ID [ optidx · ], >=
idBracket -> ID [ optidx · ], <=
idBracket -> ID [ optidx · ], ==
idBracket -> ID [ optidx · ], !=
idBracket -> ID [ optidx · ], +
idBracket -> ID [ optidx · ], -
idBracket -> ID [ optidx · ], *
idBracket -> ID [ optidx · ], /
idBracket -> ID [ optidx · ], )
idBracket -> ID [ optidx · ], ,
idBracket -> ID [ optidx · ], ]
***EndSet***
***EndState***
***State***
155
I_389_600_750_1134_1212_1338_1381
***Set***
declstmt -> type ID ( · params ) { statements }, $
declstmt -> type ID ( · params ) { statements }, namespace
declstmt -> type ID ( · params ) { statements }, {
declstmt -> type ID ( · params ) { statements }, ID
declstmt -> type ID ( · params ) { statements }, void
declstmt -> type ID ( · params ) { statements }, bool
declstmt -> type ID ( · params ) { statements }, int
declstmt -> type ID ( · params ) { statements }, float
declstmt -> type ID ( · params ) { statements }, double
declstmt -> type ID ( · params ) { statements }, char
declstmt -> type ID ( · params ) { statements }, string
declstmt -> type ID ( · params ) { statements }, extern
declstmt -> type ID ( · params ) { statements }, class
declstmt -> type ID ( · params ) { statements }, (
declstmt -> type ID ( · params ) { statements }, this
declstmt -> type ID ( · params ) { statements }, new
declstmt -> type ID ( · params ) { statements }, LITBOOL
declstmt -> type ID ( · params ) { statements }, LITINT
declstmt -> type ID ( · params ) { statements }, LITFLOAT
declstmt -> type ID ( · params ) { statements }, LITDOUBLE
declstmt -> type ID ( · params ) { statements }, LITCHAR
declstmt -> type ID ( · params ) { statements }, LITSTRING
declstmt -> type ID ( · params ) { statements }, null
declstmt -> type ID ( · params ) { statements }, ++
declstmt -> type ID ( · params ) { statements }, --
declstmt -> type ID ( · params ) { statements }, break
declstmt -> type ID ( · params ) { statements }, return
declstmt -> type ID ( · params ) { statements }, delete
declstmt -> type ID ( · params ) { statements }, while
declstmt -> type ID ( · params ) { statements }, for
declstmt -> type ID ( · params ) { statements }, if
params -> ·, )
params -> · type ID, )
params -> · params , type ID, )
type -> · arrtype, ID
type -> · stype, ID
params -> ·, ,
params -> · type ID, ,
params -> · params , type ID, ,
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
declstmt -> type ID ( · params ) { statements }, }
declstmt -> type ID ( · params ) { statements }, &&
declstmt -> type ID ( · params ) { statements }, ||
declstmt -> type ID ( · params ) { statements }, +
declstmt -> type ID ( · params ) { statements }, -
declstmt -> type ID ( · params ) { statements }, *
declstmt -> type ID ( · params ) { statements }, /
declstmt -> type ID ( · params ) { statements }, !
declstmt -> type ID ( · params ) { statements }, else
***EndSet***
***EndState***
***State***
156
I_390_601_751_1135_1213_1339_1382
***Set***
declstmt -> type ID = · expr ;, $
declstmt -> type ID = · expr ;, namespace
declstmt -> type ID = · expr ;, {
declstmt -> type ID = · expr ;, ID
declstmt -> type ID = · expr ;, void
declstmt -> type ID = · expr ;, bool
declstmt -> type ID = · expr ;, int
declstmt -> type ID = · expr ;, float
declstmt -> type ID = · expr ;, double
declstmt -> type ID = · expr ;, char
declstmt -> type ID = · expr ;, string
declstmt -> type ID = · expr ;, extern
declstmt -> type ID = · expr ;, class
declstmt -> type ID = · expr ;, (
declstmt -> type ID = · expr ;, this
declstmt -> type ID = · expr ;, new
declstmt -> type ID = · expr ;, LITBOOL
declstmt -> type ID = · expr ;, LITINT
declstmt -> type ID = · expr ;, LITFLOAT
declstmt -> type ID = · expr ;, LITDOUBLE
declstmt -> type ID = · expr ;, LITCHAR
declstmt -> type ID = · expr ;, LITSTRING
declstmt -> type ID = · expr ;, null
declstmt -> type ID = · expr ;, ++
declstmt -> type ID = · expr ;, --
declstmt -> type ID = · expr ;, break
declstmt -> type ID = · expr ;, return
declstmt -> type ID = · expr ;, delete
declstmt -> type ID = · expr ;, while
declstmt -> type ID = · expr ;, for
declstmt -> type ID = · expr ;, if
expr -> · assign, ;
expr -> · nexpr, ;
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
nexpr -> · bexpr, ;
nexpr -> · aexpr, ;
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, ;
bexpr -> · bexpr || bexpr, ;
bexpr -> · aexpr > aexpr, ;
bexpr -> · aexpr < aexpr, ;
bexpr -> · aexpr >= aexpr, ;
bexpr -> · aexpr <= aexpr, ;
bexpr -> · aexpr == aexpr, ;
bexpr -> · aexpr != aexpr, ;
bexpr -> · factor, ;
aexpr -> · aexpr + term, ;
aexpr -> · aexpr - term, ;
aexpr -> · term, ;
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, ;
term -> · term / factor, ;
term -> · factor, ;
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], ;
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
declstmt -> type ID = · expr ;, }
declstmt -> type ID = · expr ;, &&
declstmt -> type ID = · expr ;, ||
declstmt -> type ID = · expr ;, +
declstmt -> type ID = · expr ;, -
declstmt -> type ID = · expr ;, *
declstmt -> type ID = · expr ;, /
declstmt -> type ID = · expr ;, !
declstmt -> type ID = · expr ;, else
***EndSet***
***EndState***
***State***
157
I_391_408_686_688_770_1074_1123_1155_1162_1215_1222_1342_1349_1361
***Set***
primitiveBracket -> primitive [ optidx · ], ID
primitiveBracket -> primitive [ optidx · ], .
primitiveBracket -> primitive [ optidx · ], ;
primitiveBracket -> primitive [ optidx · ], &&
primitiveBracket -> primitive [ optidx · ], ||
primitiveBracket -> primitive [ optidx · ], >
primitiveBracket -> primitive [ optidx · ], <
primitiveBracket -> primitive [ optidx · ], >=
primitiveBracket -> primitive [ optidx · ], <=
primitiveBracket -> primitive [ optidx · ], ==
primitiveBracket -> primitive [ optidx · ], !=
primitiveBracket -> primitive [ optidx · ], +
primitiveBracket -> primitive [ optidx · ], -
primitiveBracket -> primitive [ optidx · ], *
primitiveBracket -> primitive [ optidx · ], /
primitiveBracket -> primitive [ optidx · ], )
primitiveBracket -> primitive [ optidx · ], ,
primitiveBracket -> primitive [ optidx · ], ]
***EndSet***
***EndState***
***State***
158
I_392_487_582_689_772_902_922_979_988_1037_1046_1076_1259_1268_1284
***Set***
memberaccess -> primary . ID ·, (
memberaccess -> primary . ID ·, =
memberaccess -> primary . ID ·, +=
memberaccess -> primary . ID ·, -=
memberaccess -> primary . ID ·, *=
memberaccess -> primary . ID ·, /=
memberaccess -> primary . ID ·, %=
memberaccess -> primary . ID ·, [
memberaccess -> primary . ID ·, .
memberaccess -> primary . ID ·, ;
memberaccess -> primary . ID ·, &&
memberaccess -> primary . ID ·, ||
memberaccess -> primary . ID ·, >
memberaccess -> primary . ID ·, <
memberaccess -> primary . ID ·, >=
memberaccess -> primary . ID ·, <=
memberaccess -> primary . ID ·, ==
memberaccess -> primary . ID ·, !=
memberaccess -> primary . ID ·, +
memberaccess -> primary . ID ·, -
memberaccess -> primary . ID ·, *
memberaccess -> primary . ID ·, /
memberaccess -> primary . ID ·, )
memberaccess -> primary . ID ·, ,
memberaccess -> primary . ID ·, ]
***EndSet***
***EndState***
***State***
159
I_393_583_903
***Set***
assign -> lvalue = expr ·, ;
assign -> lvalue = expr ·, )
assign -> lvalue = expr ·, ,
***EndSet***
***EndState***
***State***
160
I_394_584_904
***Set***
assign -> lvalue += expr ·, ;
assign -> lvalue += expr ·, )
assign -> lvalue += expr ·, ,
***EndSet***
***EndState***
***State***
161
I_395_585_905
***Set***
assign -> lvalue -= expr ·, ;
assign -> lvalue -= expr ·, )
assign -> lvalue -= expr ·, ,
***EndSet***
***EndState***
***State***
162
I_396_586_906
***Set***
assign -> lvalue *= expr ·, ;
assign -> lvalue *= expr ·, )
assign -> lvalue *= expr ·, ,
***EndSet***
***EndState***
***State***
163
I_397_587_907
***Set***
assign -> lvalue /= expr ·, ;
assign -> lvalue /= expr ·, )
assign -> lvalue /= expr ·, ,
***EndSet***
***EndState***
***State***
164
I_398_588_908
***Set***
assign -> lvalue %= expr ·, ;
assign -> lvalue %= expr ·, )
assign -> lvalue %= expr ·, ,
***EndSet***
***EndState***
***State***
165
I_399_488_589_909_923_980_989_1038_1047_1260_1269_1285_1310
***Set***
call -> memberaccess ( args · ), ;
call -> memberaccess ( args · ), .
args -> args · , expr, )
args -> args · , expr, ,
call -> memberaccess ( args · ), &&
call -> memberaccess ( args · ), ||
call -> memberaccess ( args · ), >
call -> memberaccess ( args · ), <
call -> memberaccess ( args · ), >=
call -> memberaccess ( args · ), <=
call -> memberaccess ( args · ), ==
call -> memberaccess ( args · ), !=
call -> memberaccess ( args · ), +
call -> memberaccess ( args · ), -
call -> memberaccess ( args · ), *
call -> memberaccess ( args · ), /
call -> memberaccess ( args · ), )
call -> memberaccess ( args · ), ,
call -> memberaccess ( args · ), ]
***EndSet***
***EndState***
***State***
166
I_400_489_590_690_773_910_924_981_990_1039_1048_1077_1261_1270_1286
***Set***
indexaccess -> memberaccess [ aexpr · ], =
indexaccess -> memberaccess [ aexpr · ], +=
indexaccess -> memberaccess [ aexpr · ], -=
indexaccess -> memberaccess [ aexpr · ], *=
indexaccess -> memberaccess [ aexpr · ], /=
indexaccess -> memberaccess [ aexpr · ], %=
indexaccess -> memberaccess [ aexpr · ], .
aexpr -> aexpr · + term, ]
aexpr -> aexpr · - term, ]
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
indexaccess -> memberaccess [ aexpr · ], ;
indexaccess -> memberaccess [ aexpr · ], &&
indexaccess -> memberaccess [ aexpr · ], ||
indexaccess -> memberaccess [ aexpr · ], >
indexaccess -> memberaccess [ aexpr · ], <
indexaccess -> memberaccess [ aexpr · ], >=
indexaccess -> memberaccess [ aexpr · ], <=
indexaccess -> memberaccess [ aexpr · ], ==
indexaccess -> memberaccess [ aexpr · ], !=
indexaccess -> memberaccess [ aexpr · ], +
indexaccess -> memberaccess [ aexpr · ], -
indexaccess -> memberaccess [ aexpr · ], *
indexaccess -> memberaccess [ aexpr · ], /
indexaccess -> memberaccess [ aexpr · ], )
indexaccess -> memberaccess [ aexpr · ], ,
indexaccess -> memberaccess [ aexpr · ], ]
***EndSet***
***EndState***
***State***
167
I_401_818_991_1312_1398_1416
***Set***
namespaceblock -> namespace ID { statements · }, $
namespaceblock -> namespace ID { statements · }, namespace
namespaceblock -> namespace ID { statements · }, {
namespaceblock -> namespace ID { statements · }, ID
namespaceblock -> namespace ID { statements · }, void
namespaceblock -> namespace ID { statements · }, bool
namespaceblock -> namespace ID { statements · }, int
namespaceblock -> namespace ID { statements · }, float
namespaceblock -> namespace ID { statements · }, double
namespaceblock -> namespace ID { statements · }, char
namespaceblock -> namespace ID { statements · }, string
namespaceblock -> namespace ID { statements · }, extern
namespaceblock -> namespace ID { statements · }, class
namespaceblock -> namespace ID { statements · }, (
namespaceblock -> namespace ID { statements · }, this
namespaceblock -> namespace ID { statements · }, new
namespaceblock -> namespace ID { statements · }, LITBOOL
namespaceblock -> namespace ID { statements · }, LITINT
namespaceblock -> namespace ID { statements · }, LITFLOAT
namespaceblock -> namespace ID { statements · }, LITDOUBLE
namespaceblock -> namespace ID { statements · }, LITCHAR
namespaceblock -> namespace ID { statements · }, LITSTRING
namespaceblock -> namespace ID { statements · }, null
namespaceblock -> namespace ID { statements · }, ++
namespaceblock -> namespace ID { statements · }, --
namespaceblock -> namespace ID { statements · }, break
namespaceblock -> namespace ID { statements · }, return
namespaceblock -> namespace ID { statements · }, delete
namespaceblock -> namespace ID { statements · }, while
namespaceblock -> namespace ID { statements · }, for
namespaceblock -> namespace ID { statements · }, if
statements -> statements · stmt, }
statements -> statements · stmt, namespace
statements -> statements · stmt, {
statements -> statements · stmt, ID
statements -> statements · stmt, void
statements -> statements · stmt, bool
statements -> statements · stmt, int
statements -> statements · stmt, float
statements -> statements · stmt, double
statements -> statements · stmt, char
statements -> statements · stmt, string
statements -> statements · stmt, extern
statements -> statements · stmt, class
statements -> statements · stmt, (
statements -> statements · stmt, this
statements -> statements · stmt, new
statements -> statements · stmt, LITBOOL
statements -> statements · stmt, LITINT
statements -> statements · stmt, LITFLOAT
statements -> statements · stmt, LITDOUBLE
statements -> statements · stmt, LITCHAR
statements -> statements · stmt, LITSTRING
statements -> statements · stmt, null
statements -> statements · stmt, ++
statements -> statements · stmt, --
statements -> statements · stmt, break
statements -> statements · stmt, return
statements -> statements · stmt, delete
statements -> statements · stmt, while
statements -> statements · stmt, for
statements -> statements · stmt, if
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
namespaceblock -> namespace ID { statements · }, }
namespaceblock -> namespace ID { statements · }, &&
namespaceblock -> namespace ID { statements · }, ||
namespaceblock -> namespace ID { statements · }, +
namespaceblock -> namespace ID { statements · }, -
namespaceblock -> namespace ID { statements · }, *
namespaceblock -> namespace ID { statements · }, /
namespaceblock -> namespace ID { statements · }, !
namespaceblock -> namespace ID { statements · }, else
***EndSet***
***EndState***
***State***
168
I_403_819_992_1274_1313_1399_1417
***Set***
declstmt -> extern type ID ( · params ) ;, $
declstmt -> extern type ID ( · params ) ;, namespace
declstmt -> extern type ID ( · params ) ;, {
declstmt -> extern type ID ( · params ) ;, ID
declstmt -> extern type ID ( · params ) ;, void
declstmt -> extern type ID ( · params ) ;, bool
declstmt -> extern type ID ( · params ) ;, int
declstmt -> extern type ID ( · params ) ;, float
declstmt -> extern type ID ( · params ) ;, double
declstmt -> extern type ID ( · params ) ;, char
declstmt -> extern type ID ( · params ) ;, string
declstmt -> extern type ID ( · params ) ;, extern
declstmt -> extern type ID ( · params ) ;, class
declstmt -> extern type ID ( · params ) ;, (
declstmt -> extern type ID ( · params ) ;, this
declstmt -> extern type ID ( · params ) ;, new
declstmt -> extern type ID ( · params ) ;, LITBOOL
declstmt -> extern type ID ( · params ) ;, LITINT
declstmt -> extern type ID ( · params ) ;, LITFLOAT
declstmt -> extern type ID ( · params ) ;, LITDOUBLE
declstmt -> extern type ID ( · params ) ;, LITCHAR
declstmt -> extern type ID ( · params ) ;, LITSTRING
declstmt -> extern type ID ( · params ) ;, null
declstmt -> extern type ID ( · params ) ;, ++
declstmt -> extern type ID ( · params ) ;, --
declstmt -> extern type ID ( · params ) ;, break
declstmt -> extern type ID ( · params ) ;, return
declstmt -> extern type ID ( · params ) ;, delete
declstmt -> extern type ID ( · params ) ;, while
declstmt -> extern type ID ( · params ) ;, for
declstmt -> extern type ID ( · params ) ;, if
params -> ·, )
params -> · type ID, )
params -> · params , type ID, )
type -> · arrtype, ID
type -> · stype, ID
params -> ·, ,
params -> · type ID, ,
params -> · params , type ID, ,
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
declstmt -> extern type ID ( · params ) ;, }
declstmt -> extern type ID ( · params ) ;, &&
declstmt -> extern type ID ( · params ) ;, ||
declstmt -> extern type ID ( · params ) ;, +
declstmt -> extern type ID ( · params ) ;, -
declstmt -> extern type ID ( · params ) ;, *
declstmt -> extern type ID ( · params ) ;, /
declstmt -> extern type ID ( · params ) ;, !
declstmt -> extern type ID ( · params ) ;, else
***EndSet***
***EndState***
***State***
169
I_404
***Set***
inherit -> : ID ·, {
***EndSet***
***EndState***
***State***
170
I_405_820_993_1275_1314_1400_1418
***Set***
declstmt -> class ID inherit { · declstatements }, $
declstmt -> class ID inherit { · declstatements }, namespace
declstmt -> class ID inherit { · declstatements }, {
declstmt -> class ID inherit { · declstatements }, ID
declstmt -> class ID inherit { · declstatements }, void
declstmt -> class ID inherit { · declstatements }, bool
declstmt -> class ID inherit { · declstatements }, int
declstmt -> class ID inherit { · declstatements }, float
declstmt -> class ID inherit { · declstatements }, double
declstmt -> class ID inherit { · declstatements }, char
declstmt -> class ID inherit { · declstatements }, string
declstmt -> class ID inherit { · declstatements }, extern
declstmt -> class ID inherit { · declstatements }, class
declstmt -> class ID inherit { · declstatements }, (
declstmt -> class ID inherit { · declstatements }, this
declstmt -> class ID inherit { · declstatements }, new
declstmt -> class ID inherit { · declstatements }, LITBOOL
declstmt -> class ID inherit { · declstatements }, LITINT
declstmt -> class ID inherit { · declstatements }, LITFLOAT
declstmt -> class ID inherit { · declstatements }, LITDOUBLE
declstmt -> class ID inherit { · declstatements }, LITCHAR
declstmt -> class ID inherit { · declstatements }, LITSTRING
declstmt -> class ID inherit { · declstatements }, null
declstmt -> class ID inherit { · declstatements }, ++
declstmt -> class ID inherit { · declstatements }, --
declstmt -> class ID inherit { · declstatements }, break
declstmt -> class ID inherit { · declstatements }, return
declstmt -> class ID inherit { · declstatements }, delete
declstmt -> class ID inherit { · declstatements }, while
declstmt -> class ID inherit { · declstatements }, for
declstmt -> class ID inherit { · declstatements }, if
declstatements -> · declstatements declstmt, }
declstatements -> · declstmt, }
declstatements -> ·, }
declstatements -> · declstatements declstmt, ID
declstatements -> · declstatements declstmt, void
declstatements -> · declstatements declstmt, bool
declstatements -> · declstatements declstmt, int
declstatements -> · declstatements declstmt, float
declstatements -> · declstatements declstmt, double
declstatements -> · declstatements declstmt, char
declstatements -> · declstatements declstmt, string
declstatements -> · declstatements declstmt, extern
declstatements -> · declstatements declstmt, class
declstatements -> · declstmt, ID
declstatements -> · declstmt, void
declstatements -> · declstmt, bool
declstatements -> · declstmt, int
declstatements -> · declstmt, float
declstatements -> · declstmt, double
declstatements -> · declstmt, char
declstatements -> · declstmt, string
declstatements -> · declstmt, extern
declstatements -> · declstmt, class
declstatements -> ·, ID
declstatements -> ·, void
declstatements -> ·, bool
declstatements -> ·, int
declstatements -> ·, float
declstatements -> ·, double
declstatements -> ·, char
declstatements -> ·, string
declstatements -> ·, extern
declstatements -> ·, class
declstmt -> · type ID = expr ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
declstmt -> · type ID = expr ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
declstmt -> · type ID = expr ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
declstmt -> · type ID = expr ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
declstmt -> · type ID = expr ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
declstmt -> · type ID = expr ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
declstmt -> · type ID = expr ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
declstmt -> · type ID = expr ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
declstmt -> · type ID = expr ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
declstmt -> · type ID = expr ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
declstmt -> · type ID = expr ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
type -> · arrtype, ID
type -> · stype, ID
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
declstmt -> class ID inherit { · declstatements }, }
declstmt -> class ID inherit { · declstatements }, &&
declstmt -> class ID inherit { · declstatements }, ||
declstmt -> class ID inherit { · declstatements }, +
declstmt -> class ID inherit { · declstatements }, -
declstmt -> class ID inherit { · declstatements }, *
declstmt -> class ID inherit { · declstatements }, /
declstmt -> class ID inherit { · declstatements }, !
declstmt -> class ID inherit { · declstatements }, else
***EndSet***
***EndState***
***State***
171
I_406_684_768_1072_1122_1154_1161_1214_1221_1341_1348_1360_1383
***Set***
newobj -> new ID ( ) ·, ;
newobj -> new ID ( ) ·, .
newobj -> new ID ( ) ·, &&
newobj -> new ID ( ) ·, ||
newobj -> new ID ( ) ·, >
newobj -> new ID ( ) ·, <
newobj -> new ID ( ) ·, >=
newobj -> new ID ( ) ·, <=
newobj -> new ID ( ) ·, ==
newobj -> new ID ( ) ·, !=
newobj -> new ID ( ) ·, +
newobj -> new ID ( ) ·, -
newobj -> new ID ( ) ·, *
newobj -> new ID ( ) ·, /
newobj -> new ID ( ) ·, )
newobj -> new ID ( ) ·, ,
newobj -> new ID ( ) ·, ]
***EndSet***
***EndState***
***State***
172
I_412_509_829_914_971_984_1029_1042_1251_1264_1280
***Set***
cast -> ( type ) · factor, ;
cast -> ( type ) · factor, &&
cast -> ( type ) · factor, ||
cast -> ( type ) · factor, >
cast -> ( type ) · factor, <
cast -> ( type ) · factor, >=
cast -> ( type ) · factor, <=
cast -> ( type ) · factor, ==
cast -> ( type ) · factor, !=
cast -> ( type ) · factor, +
cast -> ( type ) · factor, -
cast -> ( type ) · factor, *
cast -> ( type ) · factor, /
factor -> · incdec, ;
factor -> · ! factor, ;
factor -> · - factor, ;
factor -> · cast, ;
factor -> · primary, ;
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
cast -> · ( type ) factor, ;
primary -> · ( expr ), ;
primary -> · ID, ;
primary -> · this, ;
primary -> · memberaccess, ;
primary -> · indexaccess, ;
primary -> · call, ;
primary -> · newobj, ;
primary -> · newarr, ;
primary -> · lit, ;
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
memberaccess -> · primary . ID, ;
indexaccess -> · idBracket, ;
indexaccess -> · memberaccess [ aexpr ], ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
newobj -> · new ID ( ), ;
newarr -> · new stypeBracket, ;
lit -> · LITBOOL, ;
lit -> · LITINT, ;
lit -> · LITFLOAT, ;
lit -> · LITDOUBLE, ;
lit -> · LITCHAR, ;
lit -> · LITSTRING, ;
lit -> · null, ;
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ;
memberaccess -> · primary . ID, [
memberaccess -> · primary . ID, (
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
cast -> ( type ) · factor, )
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
idBracket -> · ID [ optidx ], )
cast -> ( type ) · factor, ,
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], ,
cast -> ( type ) · factor, ]
factor -> · incdec, ]
factor -> · ! factor, ]
factor -> · - factor, ]
factor -> · cast, ]
factor -> · primary, ]
incdec -> · ++ ID, ]
incdec -> · -- ID, ]
incdec -> · ID ++, ]
incdec -> · ID --, ]
cast -> · ( type ) factor, ]
primary -> · ( expr ), ]
primary -> · ID, ]
primary -> · this, ]
primary -> · memberaccess, ]
primary -> · indexaccess, ]
primary -> · call, ]
primary -> · newobj, ]
primary -> · newarr, ]
primary -> · lit, ]
memberaccess -> · primary . ID, ]
indexaccess -> · idBracket, ]
indexaccess -> · memberaccess [ aexpr ], ]
call -> · ID ( args ), ]
call -> · memberaccess ( args ), ]
newobj -> · new ID ( ), ]
newarr -> · new stypeBracket, ]
lit -> · LITBOOL, ]
lit -> · LITINT, ]
lit -> · LITFLOAT, ]
lit -> · LITDOUBLE, ]
lit -> · LITCHAR, ]
lit -> · LITSTRING, ]
lit -> · null, ]
idBracket -> · ID [ optidx ], ]
***EndSet***
***EndState***
***State***
173
I_419_515_835
***Set***
bexpr -> bexpr || bexpr ·, ;
bexpr -> bexpr || bexpr ·, &&
bexpr -> bexpr || bexpr ·, ||
bexpr -> bexpr · && bexpr, ;
bexpr -> bexpr · || bexpr, ;
bexpr -> bexpr · && bexpr, &&
bexpr -> bexpr · || bexpr, &&
bexpr -> bexpr · && bexpr, ||
bexpr -> bexpr · || bexpr, ||
bexpr -> bexpr || bexpr ·, )
bexpr -> bexpr · && bexpr, )
bexpr -> bexpr · || bexpr, )
bexpr -> bexpr || bexpr ·, ,
bexpr -> bexpr · && bexpr, ,
bexpr -> bexpr · || bexpr, ,
***EndSet***
***EndState***
***State***
174
I_420_516_836
***Set***
bexpr -> aexpr · > aexpr, ;
bexpr -> aexpr · < aexpr, ;
bexpr -> aexpr · >= aexpr, ;
bexpr -> aexpr · <= aexpr, ;
bexpr -> aexpr · == aexpr, ;
bexpr -> aexpr · != aexpr, ;
bexpr -> aexpr · > aexpr, &&
bexpr -> aexpr · < aexpr, &&
bexpr -> aexpr · >= aexpr, &&
bexpr -> aexpr · <= aexpr, &&
bexpr -> aexpr · == aexpr, &&
bexpr -> aexpr · != aexpr, &&
bexpr -> aexpr · > aexpr, ||
bexpr -> aexpr · < aexpr, ||
bexpr -> aexpr · >= aexpr, ||
bexpr -> aexpr · <= aexpr, ||
bexpr -> aexpr · == aexpr, ||
bexpr -> aexpr · != aexpr, ||
aexpr -> aexpr · + term, >
aexpr -> aexpr · - term, >
aexpr -> aexpr · + term, <
aexpr -> aexpr · - term, <
aexpr -> aexpr · + term, >=
aexpr -> aexpr · - term, >=
aexpr -> aexpr · + term, <=
aexpr -> aexpr · - term, <=
aexpr -> aexpr · + term, ==
aexpr -> aexpr · - term, ==
aexpr -> aexpr · + term, !=
aexpr -> aexpr · - term, !=
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
bexpr -> aexpr · > aexpr, )
bexpr -> aexpr · < aexpr, )
bexpr -> aexpr · >= aexpr, )
bexpr -> aexpr · <= aexpr, )
bexpr -> aexpr · == aexpr, )
bexpr -> aexpr · != aexpr, )
bexpr -> aexpr · > aexpr, ,
bexpr -> aexpr · < aexpr, ,
bexpr -> aexpr · >= aexpr, ,
bexpr -> aexpr · <= aexpr, ,
bexpr -> aexpr · == aexpr, ,
bexpr -> aexpr · != aexpr, ,
***EndSet***
***EndState***
***State***
175
I_423_518_838
***Set***
bexpr -> bexpr && bexpr ·, ;
bexpr -> bexpr && bexpr ·, &&
bexpr -> bexpr && bexpr ·, ||
bexpr -> bexpr · && bexpr, ;
bexpr -> bexpr · || bexpr, ;
bexpr -> bexpr · && bexpr, &&
bexpr -> bexpr · || bexpr, &&
bexpr -> bexpr · && bexpr, ||
bexpr -> bexpr · || bexpr, ||
bexpr -> bexpr && bexpr ·, )
bexpr -> bexpr · && bexpr, )
bexpr -> bexpr · || bexpr, )
bexpr -> bexpr && bexpr ·, ,
bexpr -> bexpr · && bexpr, ,
bexpr -> bexpr · || bexpr, ,
***EndSet***
***EndState***
***State***
176
I_444_539_859
***Set***
bexpr -> aexpr == aexpr ·, ;
bexpr -> aexpr == aexpr ·, &&
bexpr -> aexpr == aexpr ·, ||
aexpr -> aexpr · + term, ;
aexpr -> aexpr · - term, ;
aexpr -> aexpr · + term, &&
aexpr -> aexpr · - term, &&
aexpr -> aexpr · + term, ||
aexpr -> aexpr · - term, ||
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
bexpr -> aexpr == aexpr ·, )
aexpr -> aexpr · + term, )
aexpr -> aexpr · - term, )
bexpr -> aexpr == aexpr ·, ,
aexpr -> aexpr · + term, ,
aexpr -> aexpr · - term, ,
***EndSet***
***EndState***
***State***
177
I_452_547_867
***Set***
bexpr -> aexpr != aexpr ·, ;
bexpr -> aexpr != aexpr ·, &&
bexpr -> aexpr != aexpr ·, ||
aexpr -> aexpr · + term, ;
aexpr -> aexpr · - term, ;
aexpr -> aexpr · + term, &&
aexpr -> aexpr · - term, &&
aexpr -> aexpr · + term, ||
aexpr -> aexpr · - term, ||
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
bexpr -> aexpr != aexpr ·, )
aexpr -> aexpr · + term, )
aexpr -> aexpr · - term, )
bexpr -> aexpr != aexpr ·, ,
aexpr -> aexpr · + term, ,
aexpr -> aexpr · - term, ,
***EndSet***
***EndState***
***State***
178
I_453_548_868
***Set***
bexpr -> aexpr <= aexpr ·, ;
bexpr -> aexpr <= aexpr ·, &&
bexpr -> aexpr <= aexpr ·, ||
aexpr -> aexpr · + term, ;
aexpr -> aexpr · - term, ;
aexpr -> aexpr · + term, &&
aexpr -> aexpr · - term, &&
aexpr -> aexpr · + term, ||
aexpr -> aexpr · - term, ||
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
bexpr -> aexpr <= aexpr ·, )
aexpr -> aexpr · + term, )
aexpr -> aexpr · - term, )
bexpr -> aexpr <= aexpr ·, ,
aexpr -> aexpr · + term, ,
aexpr -> aexpr · - term, ,
***EndSet***
***EndState***
***State***
179
I_454_549_869
***Set***
bexpr -> aexpr >= aexpr ·, ;
bexpr -> aexpr >= aexpr ·, &&
bexpr -> aexpr >= aexpr ·, ||
aexpr -> aexpr · + term, ;
aexpr -> aexpr · - term, ;
aexpr -> aexpr · + term, &&
aexpr -> aexpr · - term, &&
aexpr -> aexpr · + term, ||
aexpr -> aexpr · - term, ||
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
bexpr -> aexpr >= aexpr ·, )
aexpr -> aexpr · + term, )
aexpr -> aexpr · - term, )
bexpr -> aexpr >= aexpr ·, ,
aexpr -> aexpr · + term, ,
aexpr -> aexpr · - term, ,
***EndSet***
***EndState***
***State***
180
I_455_550_870
***Set***
bexpr -> aexpr > aexpr ·, ;
bexpr -> aexpr > aexpr ·, &&
bexpr -> aexpr > aexpr ·, ||
aexpr -> aexpr · + term, ;
aexpr -> aexpr · - term, ;
aexpr -> aexpr · + term, &&
aexpr -> aexpr · - term, &&
aexpr -> aexpr · + term, ||
aexpr -> aexpr · - term, ||
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
bexpr -> aexpr > aexpr ·, )
aexpr -> aexpr · + term, )
aexpr -> aexpr · - term, )
bexpr -> aexpr > aexpr ·, ,
aexpr -> aexpr · + term, ,
aexpr -> aexpr · - term, ,
***EndSet***
***EndState***
***State***
181
I_456_551_871
***Set***
bexpr -> aexpr < aexpr ·, ;
bexpr -> aexpr < aexpr ·, &&
bexpr -> aexpr < aexpr ·, ||
aexpr -> aexpr · + term, ;
aexpr -> aexpr · - term, ;
aexpr -> aexpr · + term, &&
aexpr -> aexpr · - term, &&
aexpr -> aexpr · + term, ||
aexpr -> aexpr · - term, ||
aexpr -> aexpr · + term, +
aexpr -> aexpr · - term, +
aexpr -> aexpr · + term, -
aexpr -> aexpr · - term, -
bexpr -> aexpr < aexpr ·, )
aexpr -> aexpr · + term, )
aexpr -> aexpr · - term, )
bexpr -> aexpr < aexpr ·, ,
aexpr -> aexpr · + term, ,
aexpr -> aexpr · - term, ,
***EndSet***
***EndState***
***State***
182
I_477_572_892_918_959_975_1033_1255
***Set***
aexpr -> aexpr + term ·, ;
aexpr -> aexpr + term ·, >
aexpr -> aexpr + term ·, <
aexpr -> aexpr + term ·, >=
aexpr -> aexpr + term ·, <=
aexpr -> aexpr + term ·, ==
aexpr -> aexpr + term ·, !=
aexpr -> aexpr + term ·, +
aexpr -> aexpr + term ·, -
term -> term · * factor, ;
term -> term · / factor, ;
term -> term · * factor, >
term -> term · / factor, >
term -> term · * factor, <
term -> term · / factor, <
term -> term · * factor, >=
term -> term · / factor, >=
term -> term · * factor, <=
term -> term · / factor, <=
term -> term · * factor, ==
term -> term · / factor, ==
term -> term · * factor, !=
term -> term · / factor, !=
term -> term · * factor, +
term -> term · / factor, +
term -> term · * factor, -
term -> term · / factor, -
term -> term · * factor, *
term -> term · / factor, *
term -> term · * factor, /
term -> term · / factor, /
aexpr -> aexpr + term ·, )
term -> term · * factor, )
term -> term · / factor, )
aexpr -> aexpr + term ·, ,
term -> term · * factor, ,
term -> term · / factor, ,
aexpr -> aexpr + term ·, ]
term -> term · * factor, ]
term -> term · / factor, ]
aexpr -> aexpr + term ·, &&
aexpr -> aexpr + term ·, ||
term -> term · * factor, &&
term -> term · / factor, &&
term -> term · * factor, ||
term -> term · / factor, ||
***EndSet***
***EndState***
***State***
183
I_484_579_899_919_966_976_1034_1256
***Set***
aexpr -> aexpr - term ·, ;
aexpr -> aexpr - term ·, >
aexpr -> aexpr - term ·, <
aexpr -> aexpr - term ·, >=
aexpr -> aexpr - term ·, <=
aexpr -> aexpr - term ·, ==
aexpr -> aexpr - term ·, !=
aexpr -> aexpr - term ·, +
aexpr -> aexpr - term ·, -
term -> term · * factor, ;
term -> term · / factor, ;
term -> term · * factor, >
term -> term · / factor, >
term -> term · * factor, <
term -> term · / factor, <
term -> term · * factor, >=
term -> term · / factor, >=
term -> term · * factor, <=
term -> term · / factor, <=
term -> term · * factor, ==
term -> term · / factor, ==
term -> term · * factor, !=
term -> term · / factor, !=
term -> term · * factor, +
term -> term · / factor, +
term -> term · * factor, -
term -> term · / factor, -
term -> term · * factor, *
term -> term · / factor, *
term -> term · * factor, /
term -> term · / factor, /
aexpr -> aexpr - term ·, )
term -> term · * factor, )
term -> term · / factor, )
aexpr -> aexpr - term ·, ,
term -> term · * factor, ,
term -> term · / factor, ,
aexpr -> aexpr - term ·, ]
term -> term · * factor, ]
term -> term · / factor, ]
aexpr -> aexpr - term ·, &&
aexpr -> aexpr - term ·, ||
term -> term · * factor, &&
term -> term · / factor, &&
term -> term · * factor, ||
term -> term · / factor, ||
***EndSet***
***EndState***
***State***
184
I_485_580_900_920_967_977_1035_1257
***Set***
term -> term * factor ·, ;
term -> term * factor ·, >
term -> term * factor ·, <
term -> term * factor ·, >=
term -> term * factor ·, <=
term -> term * factor ·, ==
term -> term * factor ·, !=
term -> term * factor ·, +
term -> term * factor ·, -
term -> term * factor ·, *
term -> term * factor ·, /
term -> term * factor ·, )
term -> term * factor ·, ,
term -> term * factor ·, ]
term -> term * factor ·, &&
term -> term * factor ·, ||
***EndSet***
***EndState***
***State***
185
I_486_581_901_921_968_978_1036_1258
***Set***
term -> term / factor ·, ;
term -> term / factor ·, >
term -> term / factor ·, <
term -> term / factor ·, >=
term -> term / factor ·, <=
term -> term / factor ·, ==
term -> term / factor ·, !=
term -> term / factor ·, +
term -> term / factor ·, -
term -> term / factor ·, *
term -> term / factor ·, /
term -> term / factor ·, )
term -> term / factor ·, ,
term -> term / factor ·, ]
term -> term / factor ·, &&
term -> term / factor ·, ||
***EndSet***
***EndState***
***State***
186
I_490_821_994_1315_1401_1419
***Set***
stmt -> while ( expr ) · stmt, $
stmt -> while ( expr ) · stmt, namespace
stmt -> while ( expr ) · stmt, {
stmt -> while ( expr ) · stmt, ID
stmt -> while ( expr ) · stmt, void
stmt -> while ( expr ) · stmt, bool
stmt -> while ( expr ) · stmt, int
stmt -> while ( expr ) · stmt, float
stmt -> while ( expr ) · stmt, double
stmt -> while ( expr ) · stmt, char
stmt -> while ( expr ) · stmt, string
stmt -> while ( expr ) · stmt, extern
stmt -> while ( expr ) · stmt, class
stmt -> while ( expr ) · stmt, (
stmt -> while ( expr ) · stmt, this
stmt -> while ( expr ) · stmt, new
stmt -> while ( expr ) · stmt, LITBOOL
stmt -> while ( expr ) · stmt, LITINT
stmt -> while ( expr ) · stmt, LITFLOAT
stmt -> while ( expr ) · stmt, LITDOUBLE
stmt -> while ( expr ) · stmt, LITCHAR
stmt -> while ( expr ) · stmt, LITSTRING
stmt -> while ( expr ) · stmt, null
stmt -> while ( expr ) · stmt, ++
stmt -> while ( expr ) · stmt, --
stmt -> while ( expr ) · stmt, break
stmt -> while ( expr ) · stmt, return
stmt -> while ( expr ) · stmt, delete
stmt -> while ( expr ) · stmt, while
stmt -> while ( expr ) · stmt, for
stmt -> while ( expr ) · stmt, if
stmt -> · namespaceblock, $
stmt -> · statementblock, $
stmt -> · declstmt, $
stmt -> · stmtexpr ;, $
stmt -> · break ;, $
stmt -> · return expr ;, $
stmt -> · return ;, $
stmt -> · delete expr ;, $
stmt -> · while ( expr ) stmt, $
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, $
stmt -> · if ( expr ) stmt elifclauselist elseclause, $
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, $
statementblock -> · { statements }, $
declstmt -> · type ID = expr ;, $
declstmt -> · type ID ( params ) { statements }, $
declstmt -> · extern type ID ( params ) ;, $
declstmt -> · class ID inherit { declstatements }, $
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
stmt -> while ( expr ) · stmt, }
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
stmt -> while ( expr ) · stmt, &&
stmt -> while ( expr ) · stmt, ||
stmt -> while ( expr ) · stmt, +
stmt -> while ( expr ) · stmt, -
stmt -> while ( expr ) · stmt, *
stmt -> while ( expr ) · stmt, /
stmt -> while ( expr ) · stmt, !
stmt -> · namespaceblock, &&
stmt -> · statementblock, &&
stmt -> · declstmt, &&
stmt -> · stmtexpr ;, &&
stmt -> · break ;, &&
stmt -> · return expr ;, &&
stmt -> · return ;, &&
stmt -> · delete expr ;, &&
stmt -> · while ( expr ) stmt, &&
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, &&
stmt -> · if ( expr ) stmt elifclauselist elseclause, &&
stmt -> · namespaceblock, ||
stmt -> · statementblock, ||
stmt -> · declstmt, ||
stmt -> · stmtexpr ;, ||
stmt -> · break ;, ||
stmt -> · return expr ;, ||
stmt -> · return ;, ||
stmt -> · delete expr ;, ||
stmt -> · while ( expr ) stmt, ||
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ||
stmt -> · if ( expr ) stmt elifclauselist elseclause, ||
stmt -> · namespaceblock, +
stmt -> · statementblock, +
stmt -> · declstmt, +
stmt -> · stmtexpr ;, +
stmt -> · break ;, +
stmt -> · return expr ;, +
stmt -> · return ;, +
stmt -> · delete expr ;, +
stmt -> · while ( expr ) stmt, +
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, +
stmt -> · if ( expr ) stmt elifclauselist elseclause, +
stmt -> · namespaceblock, -
stmt -> · statementblock, -
stmt -> · declstmt, -
stmt -> · stmtexpr ;, -
stmt -> · break ;, -
stmt -> · return expr ;, -
stmt -> · return ;, -
stmt -> · delete expr ;, -
stmt -> · while ( expr ) stmt, -
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, -
stmt -> · if ( expr ) stmt elifclauselist elseclause, -
stmt -> · namespaceblock, *
stmt -> · statementblock, *
stmt -> · declstmt, *
stmt -> · stmtexpr ;, *
stmt -> · break ;, *
stmt -> · return expr ;, *
stmt -> · return ;, *
stmt -> · delete expr ;, *
stmt -> · while ( expr ) stmt, *
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, *
stmt -> · if ( expr ) stmt elifclauselist elseclause, *
stmt -> · namespaceblock, /
stmt -> · statementblock, /
stmt -> · declstmt, /
stmt -> · stmtexpr ;, /
stmt -> · break ;, /
stmt -> · return expr ;, /
stmt -> · return ;, /
stmt -> · delete expr ;, /
stmt -> · while ( expr ) stmt, /
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, /
stmt -> · if ( expr ) stmt elifclauselist elseclause, /
stmt -> · namespaceblock, !
stmt -> · statementblock, !
stmt -> · declstmt, !
stmt -> · stmtexpr ;, !
stmt -> · break ;, !
stmt -> · return expr ;, !
stmt -> · return ;, !
stmt -> · delete expr ;, !
stmt -> · while ( expr ) stmt, !
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, !
stmt -> · if ( expr ) stmt elifclauselist elseclause, !
namespaceblock -> · namespace ID { statements }, &&
statementblock -> · { statements }, &&
declstmt -> · type ID = expr ;, &&
declstmt -> · type ID ( params ) { statements }, &&
declstmt -> · extern type ID ( params ) ;, &&
declstmt -> · class ID inherit { declstatements }, &&
namespaceblock -> · namespace ID { statements }, ||
statementblock -> · { statements }, ||
declstmt -> · type ID = expr ;, ||
declstmt -> · type ID ( params ) { statements }, ||
declstmt -> · extern type ID ( params ) ;, ||
declstmt -> · class ID inherit { declstatements }, ||
namespaceblock -> · namespace ID { statements }, +
statementblock -> · { statements }, +
declstmt -> · type ID = expr ;, +
declstmt -> · type ID ( params ) { statements }, +
declstmt -> · extern type ID ( params ) ;, +
declstmt -> · class ID inherit { declstatements }, +
namespaceblock -> · namespace ID { statements }, -
statementblock -> · { statements }, -
declstmt -> · type ID = expr ;, -
declstmt -> · type ID ( params ) { statements }, -
declstmt -> · extern type ID ( params ) ;, -
declstmt -> · class ID inherit { declstatements }, -
namespaceblock -> · namespace ID { statements }, *
statementblock -> · { statements }, *
declstmt -> · type ID = expr ;, *
declstmt -> · type ID ( params ) { statements }, *
declstmt -> · extern type ID ( params ) ;, *
declstmt -> · class ID inherit { declstatements }, *
namespaceblock -> · namespace ID { statements }, /
statementblock -> · { statements }, /
declstmt -> · type ID = expr ;, /
declstmt -> · type ID ( params ) { statements }, /
declstmt -> · extern type ID ( params ) ;, /
declstmt -> · class ID inherit { declstatements }, /
namespaceblock -> · namespace ID { statements }, !
statementblock -> · { statements }, !
declstmt -> · type ID = expr ;, !
declstmt -> · type ID ( params ) { statements }, !
declstmt -> · extern type ID ( params ) ;, !
declstmt -> · class ID inherit { declstatements }, !
stmt -> while ( expr ) · stmt, else
stmt -> · namespaceblock, else
stmt -> · statementblock, else
stmt -> · declstmt, else
stmt -> · stmtexpr ;, else
stmt -> · break ;, else
stmt -> · return expr ;, else
stmt -> · return ;, else
stmt -> · delete expr ;, else
stmt -> · while ( expr ) stmt, else
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, else
stmt -> · if ( expr ) stmt elifclauselist elseclause, else
namespaceblock -> · namespace ID { statements }, else
statementblock -> · { statements }, else
declstmt -> · type ID = expr ;, else
declstmt -> · type ID ( params ) { statements }, else
declstmt -> · extern type ID ( params ) ;, else
declstmt -> · class ID inherit { declstatements }, else
***EndSet***
***EndState***
***State***
187
I_502_822_995_1316_1402_1420
***Set***
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, $
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, namespace
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, {
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, ID
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, void
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, bool
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, int
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, float
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, double
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, char
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, string
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, extern
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, class
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, (
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, this
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, new
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, LITBOOL
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, LITINT
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, LITFLOAT
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, LITDOUBLE
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, LITCHAR
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, LITSTRING
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, null
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, ++
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, --
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, break
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, return
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, delete
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, while
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, for
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, if
bexpr -> bexpr · && bexpr, ;
bexpr -> bexpr · || bexpr, ;
bexpr -> bexpr · && bexpr, &&
bexpr -> bexpr · || bexpr, &&
bexpr -> bexpr · && bexpr, ||
bexpr -> bexpr · || bexpr, ||
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, }
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, &&
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, ||
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, +
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, -
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, *
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, /
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, !
stmt -> for ( stmt bexpr · ; stmtexpr ) stmt, else
***EndSet***
***EndState***
***State***
188
I_505_823_996_1317_1403_1421
***Set***
stmt -> if ( expr ) · stmt elifclauselist elseclause, $
stmt -> if ( expr ) · stmt elifclauselist elseclause, namespace
stmt -> if ( expr ) · stmt elifclauselist elseclause, {
stmt -> if ( expr ) · stmt elifclauselist elseclause, ID
stmt -> if ( expr ) · stmt elifclauselist elseclause, void
stmt -> if ( expr ) · stmt elifclauselist elseclause, bool
stmt -> if ( expr ) · stmt elifclauselist elseclause, int
stmt -> if ( expr ) · stmt elifclauselist elseclause, float
stmt -> if ( expr ) · stmt elifclauselist elseclause, double
stmt -> if ( expr ) · stmt elifclauselist elseclause, char
stmt -> if ( expr ) · stmt elifclauselist elseclause, string
stmt -> if ( expr ) · stmt elifclauselist elseclause, extern
stmt -> if ( expr ) · stmt elifclauselist elseclause, class
stmt -> if ( expr ) · stmt elifclauselist elseclause, (
stmt -> if ( expr ) · stmt elifclauselist elseclause, this
stmt -> if ( expr ) · stmt elifclauselist elseclause, new
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITBOOL
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITINT
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITFLOAT
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITDOUBLE
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITCHAR
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITSTRING
stmt -> if ( expr ) · stmt elifclauselist elseclause, null
stmt -> if ( expr ) · stmt elifclauselist elseclause, ++
stmt -> if ( expr ) · stmt elifclauselist elseclause, --
stmt -> if ( expr ) · stmt elifclauselist elseclause, break
stmt -> if ( expr ) · stmt elifclauselist elseclause, return
stmt -> if ( expr ) · stmt elifclauselist elseclause, delete
stmt -> if ( expr ) · stmt elifclauselist elseclause, while
stmt -> if ( expr ) · stmt elifclauselist elseclause, for
stmt -> if ( expr ) · stmt elifclauselist elseclause, if
stmt -> · namespaceblock, else
stmt -> · namespaceblock, $
stmt -> · statementblock, else
stmt -> · statementblock, $
stmt -> · declstmt, else
stmt -> · declstmt, $
stmt -> · stmtexpr ;, else
stmt -> · stmtexpr ;, $
stmt -> · break ;, else
stmt -> · break ;, $
stmt -> · return expr ;, else
stmt -> · return expr ;, $
stmt -> · return ;, else
stmt -> · return ;, $
stmt -> · delete expr ;, else
stmt -> · delete expr ;, $
stmt -> · while ( expr ) stmt, else
stmt -> · while ( expr ) stmt, $
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, else
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, $
stmt -> · if ( expr ) stmt elifclauselist elseclause, else
stmt -> · if ( expr ) stmt elifclauselist elseclause, $
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, else
namespaceblock -> · namespace ID { statements }, $
statementblock -> · { statements }, else
statementblock -> · { statements }, $
declstmt -> · type ID = expr ;, else
declstmt -> · type ID ( params ) { statements }, else
declstmt -> · extern type ID ( params ) ;, else
declstmt -> · class ID inherit { declstatements }, else
declstmt -> · type ID = expr ;, $
declstmt -> · type ID ( params ) { statements }, $
declstmt -> · extern type ID ( params ) ;, $
declstmt -> · class ID inherit { declstatements }, $
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
stmt -> if ( expr ) · stmt elifclauselist elseclause, }
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
stmt -> if ( expr ) · stmt elifclauselist elseclause, &&
stmt -> if ( expr ) · stmt elifclauselist elseclause, ||
stmt -> if ( expr ) · stmt elifclauselist elseclause, +
stmt -> if ( expr ) · stmt elifclauselist elseclause, -
stmt -> if ( expr ) · stmt elifclauselist elseclause, *
stmt -> if ( expr ) · stmt elifclauselist elseclause, /
stmt -> if ( expr ) · stmt elifclauselist elseclause, !
stmt -> · namespaceblock, &&
stmt -> · statementblock, &&
stmt -> · declstmt, &&
stmt -> · stmtexpr ;, &&
stmt -> · break ;, &&
stmt -> · return expr ;, &&
stmt -> · return ;, &&
stmt -> · delete expr ;, &&
stmt -> · while ( expr ) stmt, &&
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, &&
stmt -> · if ( expr ) stmt elifclauselist elseclause, &&
stmt -> · namespaceblock, ||
stmt -> · statementblock, ||
stmt -> · declstmt, ||
stmt -> · stmtexpr ;, ||
stmt -> · break ;, ||
stmt -> · return expr ;, ||
stmt -> · return ;, ||
stmt -> · delete expr ;, ||
stmt -> · while ( expr ) stmt, ||
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ||
stmt -> · if ( expr ) stmt elifclauselist elseclause, ||
stmt -> · namespaceblock, +
stmt -> · statementblock, +
stmt -> · declstmt, +
stmt -> · stmtexpr ;, +
stmt -> · break ;, +
stmt -> · return expr ;, +
stmt -> · return ;, +
stmt -> · delete expr ;, +
stmt -> · while ( expr ) stmt, +
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, +
stmt -> · if ( expr ) stmt elifclauselist elseclause, +
stmt -> · namespaceblock, -
stmt -> · statementblock, -
stmt -> · declstmt, -
stmt -> · stmtexpr ;, -
stmt -> · break ;, -
stmt -> · return expr ;, -
stmt -> · return ;, -
stmt -> · delete expr ;, -
stmt -> · while ( expr ) stmt, -
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, -
stmt -> · if ( expr ) stmt elifclauselist elseclause, -
stmt -> · namespaceblock, *
stmt -> · statementblock, *
stmt -> · declstmt, *
stmt -> · stmtexpr ;, *
stmt -> · break ;, *
stmt -> · return expr ;, *
stmt -> · return ;, *
stmt -> · delete expr ;, *
stmt -> · while ( expr ) stmt, *
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, *
stmt -> · if ( expr ) stmt elifclauselist elseclause, *
stmt -> · namespaceblock, /
stmt -> · statementblock, /
stmt -> · declstmt, /
stmt -> · stmtexpr ;, /
stmt -> · break ;, /
stmt -> · return expr ;, /
stmt -> · return ;, /
stmt -> · delete expr ;, /
stmt -> · while ( expr ) stmt, /
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, /
stmt -> · if ( expr ) stmt elifclauselist elseclause, /
stmt -> · namespaceblock, !
stmt -> · statementblock, !
stmt -> · declstmt, !
stmt -> · stmtexpr ;, !
stmt -> · break ;, !
stmt -> · return expr ;, !
stmt -> · return ;, !
stmt -> · delete expr ;, !
stmt -> · while ( expr ) stmt, !
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, !
stmt -> · if ( expr ) stmt elifclauselist elseclause, !
namespaceblock -> · namespace ID { statements }, &&
statementblock -> · { statements }, &&
declstmt -> · type ID = expr ;, &&
declstmt -> · type ID ( params ) { statements }, &&
declstmt -> · extern type ID ( params ) ;, &&
declstmt -> · class ID inherit { declstatements }, &&
namespaceblock -> · namespace ID { statements }, ||
statementblock -> · { statements }, ||
declstmt -> · type ID = expr ;, ||
declstmt -> · type ID ( params ) { statements }, ||
declstmt -> · extern type ID ( params ) ;, ||
declstmt -> · class ID inherit { declstatements }, ||
namespaceblock -> · namespace ID { statements }, +
statementblock -> · { statements }, +
declstmt -> · type ID = expr ;, +
declstmt -> · type ID ( params ) { statements }, +
declstmt -> · extern type ID ( params ) ;, +
declstmt -> · class ID inherit { declstatements }, +
namespaceblock -> · namespace ID { statements }, -
statementblock -> · { statements }, -
declstmt -> · type ID = expr ;, -
declstmt -> · type ID ( params ) { statements }, -
declstmt -> · extern type ID ( params ) ;, -
declstmt -> · class ID inherit { declstatements }, -
namespaceblock -> · namespace ID { statements }, *
statementblock -> · { statements }, *
declstmt -> · type ID = expr ;, *
declstmt -> · type ID ( params ) { statements }, *
declstmt -> · extern type ID ( params ) ;, *
declstmt -> · class ID inherit { declstatements }, *
namespaceblock -> · namespace ID { statements }, /
statementblock -> · { statements }, /
declstmt -> · type ID = expr ;, /
declstmt -> · type ID ( params ) { statements }, /
declstmt -> · extern type ID ( params ) ;, /
declstmt -> · class ID inherit { declstatements }, /
namespaceblock -> · namespace ID { statements }, !
statementblock -> · { statements }, !
declstmt -> · type ID = expr ;, !
declstmt -> · type ID ( params ) { statements }, !
declstmt -> · extern type ID ( params ) ;, !
declstmt -> · class ID inherit { declstatements }, !
stmt -> if ( expr ) · stmt elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
189
I_643
***Set***
args -> args , · expr, )
args -> args , · expr, ,
expr -> · assign, )
expr -> · nexpr, )
expr -> · assign, ,
expr -> · nexpr, ,
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
assign -> · lvalue = expr, ,
assign -> · lvalue += expr, ,
assign -> · lvalue -= expr, ,
assign -> · lvalue *= expr, ,
assign -> · lvalue /= expr, ,
assign -> · lvalue %= expr, ,
nexpr -> · bexpr, ,
nexpr -> · aexpr, ,
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
bexpr -> · bexpr && bexpr, ,
bexpr -> · bexpr || bexpr, ,
bexpr -> · aexpr > aexpr, ,
bexpr -> · aexpr < aexpr, ,
bexpr -> · aexpr >= aexpr, ,
bexpr -> · aexpr <= aexpr, ,
bexpr -> · aexpr == aexpr, ,
bexpr -> · aexpr != aexpr, ,
bexpr -> · factor, ,
aexpr -> · aexpr + term, ,
aexpr -> · aexpr - term, ,
aexpr -> · term, ,
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
factor -> · incdec, ,
factor -> · ! factor, ,
factor -> · - factor, ,
factor -> · cast, ,
factor -> · primary, ,
term -> · term * factor, ,
term -> · term / factor, ,
term -> · factor, ,
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
incdec -> · ++ ID, ,
incdec -> · -- ID, ,
incdec -> · ID ++, ,
incdec -> · ID --, ,
cast -> · ( type ) factor, ,
primary -> · ( expr ), ,
primary -> · ID, ,
primary -> · this, ,
primary -> · memberaccess, ,
primary -> · indexaccess, ,
primary -> · call, ,
primary -> · newobj, ,
primary -> · newarr, ,
primary -> · lit, ,
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
memberaccess -> · primary . ID, ,
indexaccess -> · idBracket, ,
indexaccess -> · memberaccess [ aexpr ], ,
call -> · ID ( args ), ,
call -> · memberaccess ( args ), ,
newobj -> · new ID ( ), ,
newarr -> · new stypeBracket, ,
lit -> · LITBOOL, ,
lit -> · LITINT, ,
lit -> · LITFLOAT, ,
lit -> · LITDOUBLE, ,
lit -> · LITCHAR, ,
lit -> · LITSTRING, ,
lit -> · null, ,
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], )
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
idBracket -> · ID [ optidx ], ,
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
***EndSet***
***EndState***
***State***
190
I_644_691_774_1078_1125_1157_1164_1217_1224_1344_1351_1363_1384
***Set***
call -> ID ( args ) ·, ;
call -> ID ( args ) ·, .
call -> ID ( args ) ·, &&
call -> ID ( args ) ·, ||
call -> ID ( args ) ·, >
call -> ID ( args ) ·, <
call -> ID ( args ) ·, >=
call -> ID ( args ) ·, <=
call -> ID ( args ) ·, ==
call -> ID ( args ) ·, !=
call -> ID ( args ) ·, +
call -> ID ( args ) ·, -
call -> ID ( args ) ·, *
call -> ID ( args ) ·, /
call -> ID ( args ) ·, )
call -> ID ( args ) ·, ,
call -> ID ( args ) ·, ]
***EndSet***
***EndState***
***State***
191
I_667_675_682_692_775_935_1024_1079_1126_1158_1165_1218_1225_1246_1345_1352_1364_1385
***Set***
idBracket -> ID [ optidx ] ·, ID
idBracket -> ID [ optidx ] ·, =
idBracket -> ID [ optidx ] ·, +=
idBracket -> ID [ optidx ] ·, -=
idBracket -> ID [ optidx ] ·, *=
idBracket -> ID [ optidx ] ·, /=
idBracket -> ID [ optidx ] ·, %=
idBracket -> ID [ optidx ] ·, .
idBracket -> ID [ optidx ] ·, ;
idBracket -> ID [ optidx ] ·, &&
idBracket -> ID [ optidx ] ·, ||
idBracket -> ID [ optidx ] ·, >
idBracket -> ID [ optidx ] ·, <
idBracket -> ID [ optidx ] ·, >=
idBracket -> ID [ optidx ] ·, <=
idBracket -> ID [ optidx ] ·, ==
idBracket -> ID [ optidx ] ·, !=
idBracket -> ID [ optidx ] ·, +
idBracket -> ID [ optidx ] ·, -
idBracket -> ID [ optidx ] ·, *
idBracket -> ID [ optidx ] ·, /
idBracket -> ID [ optidx ] ·, )
idBracket -> ID [ optidx ] ·, ,
idBracket -> ID [ optidx ] ·, ]
***EndSet***
***EndState***
***State***
192
I_668
***Set***
params -> type · ID, )
params -> type · ID, ,
***EndSet***
***EndState***
***State***
193
I_669_824_1008_1276_1320_1406_1424
***Set***
declstmt -> type ID ( params · ) { statements }, $
declstmt -> type ID ( params · ) { statements }, namespace
declstmt -> type ID ( params · ) { statements }, {
declstmt -> type ID ( params · ) { statements }, ID
declstmt -> type ID ( params · ) { statements }, void
declstmt -> type ID ( params · ) { statements }, bool
declstmt -> type ID ( params · ) { statements }, int
declstmt -> type ID ( params · ) { statements }, float
declstmt -> type ID ( params · ) { statements }, double
declstmt -> type ID ( params · ) { statements }, char
declstmt -> type ID ( params · ) { statements }, string
declstmt -> type ID ( params · ) { statements }, extern
declstmt -> type ID ( params · ) { statements }, class
declstmt -> type ID ( params · ) { statements }, (
declstmt -> type ID ( params · ) { statements }, this
declstmt -> type ID ( params · ) { statements }, new
declstmt -> type ID ( params · ) { statements }, LITBOOL
declstmt -> type ID ( params · ) { statements }, LITINT
declstmt -> type ID ( params · ) { statements }, LITFLOAT
declstmt -> type ID ( params · ) { statements }, LITDOUBLE
declstmt -> type ID ( params · ) { statements }, LITCHAR
declstmt -> type ID ( params · ) { statements }, LITSTRING
declstmt -> type ID ( params · ) { statements }, null
declstmt -> type ID ( params · ) { statements }, ++
declstmt -> type ID ( params · ) { statements }, --
declstmt -> type ID ( params · ) { statements }, break
declstmt -> type ID ( params · ) { statements }, return
declstmt -> type ID ( params · ) { statements }, delete
declstmt -> type ID ( params · ) { statements }, while
declstmt -> type ID ( params · ) { statements }, for
declstmt -> type ID ( params · ) { statements }, if
params -> params · , type ID, )
params -> params · , type ID, ,
declstmt -> type ID ( params · ) { statements }, }
declstmt -> type ID ( params · ) { statements }, &&
declstmt -> type ID ( params · ) { statements }, ||
declstmt -> type ID ( params · ) { statements }, +
declstmt -> type ID ( params · ) { statements }, -
declstmt -> type ID ( params · ) { statements }, *
declstmt -> type ID ( params · ) { statements }, /
declstmt -> type ID ( params · ) { statements }, !
declstmt -> type ID ( params · ) { statements }, else
***EndSet***
***EndState***
***State***
194
I_670_825_1009_1277_1321_1407_1425
***Set***
declstmt -> type ID = expr · ;, $
declstmt -> type ID = expr · ;, namespace
declstmt -> type ID = expr · ;, {
declstmt -> type ID = expr · ;, ID
declstmt -> type ID = expr · ;, void
declstmt -> type ID = expr · ;, bool
declstmt -> type ID = expr · ;, int
declstmt -> type ID = expr · ;, float
declstmt -> type ID = expr · ;, double
declstmt -> type ID = expr · ;, char
declstmt -> type ID = expr · ;, string
declstmt -> type ID = expr · ;, extern
declstmt -> type ID = expr · ;, class
declstmt -> type ID = expr · ;, (
declstmt -> type ID = expr · ;, this
declstmt -> type ID = expr · ;, new
declstmt -> type ID = expr · ;, LITBOOL
declstmt -> type ID = expr · ;, LITINT
declstmt -> type ID = expr · ;, LITFLOAT
declstmt -> type ID = expr · ;, LITDOUBLE
declstmt -> type ID = expr · ;, LITCHAR
declstmt -> type ID = expr · ;, LITSTRING
declstmt -> type ID = expr · ;, null
declstmt -> type ID = expr · ;, ++
declstmt -> type ID = expr · ;, --
declstmt -> type ID = expr · ;, break
declstmt -> type ID = expr · ;, return
declstmt -> type ID = expr · ;, delete
declstmt -> type ID = expr · ;, while
declstmt -> type ID = expr · ;, for
declstmt -> type ID = expr · ;, if
declstmt -> type ID = expr · ;, }
declstmt -> type ID = expr · ;, &&
declstmt -> type ID = expr · ;, ||
declstmt -> type ID = expr · ;, +
declstmt -> type ID = expr · ;, -
declstmt -> type ID = expr · ;, *
declstmt -> type ID = expr · ;, /
declstmt -> type ID = expr · ;, !
declstmt -> type ID = expr · ;, else
***EndSet***
***EndState***
***State***
195
I_671_683_936_937_1025_1247_1271_1287_1288_1322_1323_1409_1410_1414
***Set***
primitiveBracket -> primitive [ optidx ] ·, ID
primitiveBracket -> primitive [ optidx ] ·, .
primitiveBracket -> primitive [ optidx ] ·, ;
primitiveBracket -> primitive [ optidx ] ·, &&
primitiveBracket -> primitive [ optidx ] ·, ||
primitiveBracket -> primitive [ optidx ] ·, >
primitiveBracket -> primitive [ optidx ] ·, <
primitiveBracket -> primitive [ optidx ] ·, >=
primitiveBracket -> primitive [ optidx ] ·, <=
primitiveBracket -> primitive [ optidx ] ·, ==
primitiveBracket -> primitive [ optidx ] ·, !=
primitiveBracket -> primitive [ optidx ] ·, +
primitiveBracket -> primitive [ optidx ] ·, -
primitiveBracket -> primitive [ optidx ] ·, *
primitiveBracket -> primitive [ optidx ] ·, /
primitiveBracket -> primitive [ optidx ] ·, )
primitiveBracket -> primitive [ optidx ] ·, ,
primitiveBracket -> primitive [ optidx ] ·, ]
***EndSet***
***EndState***
***State***
196
I_672_737_816_1120_1127_1159_1166_1219_1226_1346_1353_1365_1386
***Set***
call -> memberaccess ( args ) ·, ;
call -> memberaccess ( args ) ·, .
call -> memberaccess ( args ) ·, &&
call -> memberaccess ( args ) ·, ||
call -> memberaccess ( args ) ·, >
call -> memberaccess ( args ) ·, <
call -> memberaccess ( args ) ·, >=
call -> memberaccess ( args ) ·, <=
call -> memberaccess ( args ) ·, ==
call -> memberaccess ( args ) ·, !=
call -> memberaccess ( args ) ·, +
call -> memberaccess ( args ) ·, -
call -> memberaccess ( args ) ·, *
call -> memberaccess ( args ) ·, /
call -> memberaccess ( args ) ·, )
call -> memberaccess ( args ) ·, ,
call -> memberaccess ( args ) ·, ]
***EndSet***
***EndState***
***State***
197
I_673_738_817_938_1026_1121_1128_1160_1167_1220_1227_1248_1347_1354_1366
***Set***
indexaccess -> memberaccess [ aexpr ] ·, =
indexaccess -> memberaccess [ aexpr ] ·, +=
indexaccess -> memberaccess [ aexpr ] ·, -=
indexaccess -> memberaccess [ aexpr ] ·, *=
indexaccess -> memberaccess [ aexpr ] ·, /=
indexaccess -> memberaccess [ aexpr ] ·, %=
indexaccess -> memberaccess [ aexpr ] ·, .
indexaccess -> memberaccess [ aexpr ] ·, ;
indexaccess -> memberaccess [ aexpr ] ·, &&
indexaccess -> memberaccess [ aexpr ] ·, ||
indexaccess -> memberaccess [ aexpr ] ·, >
indexaccess -> memberaccess [ aexpr ] ·, <
indexaccess -> memberaccess [ aexpr ] ·, >=
indexaccess -> memberaccess [ aexpr ] ·, <=
indexaccess -> memberaccess [ aexpr ] ·, ==
indexaccess -> memberaccess [ aexpr ] ·, !=
indexaccess -> memberaccess [ aexpr ] ·, +
indexaccess -> memberaccess [ aexpr ] ·, -
indexaccess -> memberaccess [ aexpr ] ·, *
indexaccess -> memberaccess [ aexpr ] ·, /
indexaccess -> memberaccess [ aexpr ] ·, )
indexaccess -> memberaccess [ aexpr ] ·, ,
indexaccess -> memberaccess [ aexpr ] ·, ]
***EndSet***
***EndState***
***State***
198
I_674_1049_1168_1388_1433_1444
***Set***
namespaceblock -> namespace ID { statements } ·, $
namespaceblock -> namespace ID { statements } ·, namespace
namespaceblock -> namespace ID { statements } ·, {
namespaceblock -> namespace ID { statements } ·, ID
namespaceblock -> namespace ID { statements } ·, void
namespaceblock -> namespace ID { statements } ·, bool
namespaceblock -> namespace ID { statements } ·, int
namespaceblock -> namespace ID { statements } ·, float
namespaceblock -> namespace ID { statements } ·, double
namespaceblock -> namespace ID { statements } ·, char
namespaceblock -> namespace ID { statements } ·, string
namespaceblock -> namespace ID { statements } ·, extern
namespaceblock -> namespace ID { statements } ·, class
namespaceblock -> namespace ID { statements } ·, (
namespaceblock -> namespace ID { statements } ·, this
namespaceblock -> namespace ID { statements } ·, new
namespaceblock -> namespace ID { statements } ·, LITBOOL
namespaceblock -> namespace ID { statements } ·, LITINT
namespaceblock -> namespace ID { statements } ·, LITFLOAT
namespaceblock -> namespace ID { statements } ·, LITDOUBLE
namespaceblock -> namespace ID { statements } ·, LITCHAR
namespaceblock -> namespace ID { statements } ·, LITSTRING
namespaceblock -> namespace ID { statements } ·, null
namespaceblock -> namespace ID { statements } ·, ++
namespaceblock -> namespace ID { statements } ·, --
namespaceblock -> namespace ID { statements } ·, break
namespaceblock -> namespace ID { statements } ·, return
namespaceblock -> namespace ID { statements } ·, delete
namespaceblock -> namespace ID { statements } ·, while
namespaceblock -> namespace ID { statements } ·, for
namespaceblock -> namespace ID { statements } ·, if
namespaceblock -> namespace ID { statements } ·, }
namespaceblock -> namespace ID { statements } ·, &&
namespaceblock -> namespace ID { statements } ·, ||
namespaceblock -> namespace ID { statements } ·, +
namespaceblock -> namespace ID { statements } ·, -
namespaceblock -> namespace ID { statements } ·, *
namespaceblock -> namespace ID { statements } ·, /
namespaceblock -> namespace ID { statements } ·, !
namespaceblock -> namespace ID { statements } ·, else
***EndSet***
***EndState***
***State***
199
I_676_1050_1169_1356_1389_1434_1445
***Set***
declstmt -> extern type ID ( params · ) ;, $
declstmt -> extern type ID ( params · ) ;, namespace
declstmt -> extern type ID ( params · ) ;, {
declstmt -> extern type ID ( params · ) ;, ID
declstmt -> extern type ID ( params · ) ;, void
declstmt -> extern type ID ( params · ) ;, bool
declstmt -> extern type ID ( params · ) ;, int
declstmt -> extern type ID ( params · ) ;, float
declstmt -> extern type ID ( params · ) ;, double
declstmt -> extern type ID ( params · ) ;, char
declstmt -> extern type ID ( params · ) ;, string
declstmt -> extern type ID ( params · ) ;, extern
declstmt -> extern type ID ( params · ) ;, class
declstmt -> extern type ID ( params · ) ;, (
declstmt -> extern type ID ( params · ) ;, this
declstmt -> extern type ID ( params · ) ;, new
declstmt -> extern type ID ( params · ) ;, LITBOOL
declstmt -> extern type ID ( params · ) ;, LITINT
declstmt -> extern type ID ( params · ) ;, LITFLOAT
declstmt -> extern type ID ( params · ) ;, LITDOUBLE
declstmt -> extern type ID ( params · ) ;, LITCHAR
declstmt -> extern type ID ( params · ) ;, LITSTRING
declstmt -> extern type ID ( params · ) ;, null
declstmt -> extern type ID ( params · ) ;, ++
declstmt -> extern type ID ( params · ) ;, --
declstmt -> extern type ID ( params · ) ;, break
declstmt -> extern type ID ( params · ) ;, return
declstmt -> extern type ID ( params · ) ;, delete
declstmt -> extern type ID ( params · ) ;, while
declstmt -> extern type ID ( params · ) ;, for
declstmt -> extern type ID ( params · ) ;, if
params -> params · , type ID, )
params -> params · , type ID, ,
declstmt -> extern type ID ( params · ) ;, }
declstmt -> extern type ID ( params · ) ;, &&
declstmt -> extern type ID ( params · ) ;, ||
declstmt -> extern type ID ( params · ) ;, +
declstmt -> extern type ID ( params · ) ;, -
declstmt -> extern type ID ( params · ) ;, *
declstmt -> extern type ID ( params · ) ;, /
declstmt -> extern type ID ( params · ) ;, !
declstmt -> extern type ID ( params · ) ;, else
***EndSet***
***EndState***
***State***
200
I_679_1051_1170_1357_1390_1435_1446
***Set***
declstmt -> class ID inherit { declstatements · }, $
declstmt -> class ID inherit { declstatements · }, namespace
declstmt -> class ID inherit { declstatements · }, {
declstmt -> class ID inherit { declstatements · }, ID
declstmt -> class ID inherit { declstatements · }, void
declstmt -> class ID inherit { declstatements · }, bool
declstmt -> class ID inherit { declstatements · }, int
declstmt -> class ID inherit { declstatements · }, float
declstmt -> class ID inherit { declstatements · }, double
declstmt -> class ID inherit { declstatements · }, char
declstmt -> class ID inherit { declstatements · }, string
declstmt -> class ID inherit { declstatements · }, extern
declstmt -> class ID inherit { declstatements · }, class
declstmt -> class ID inherit { declstatements · }, (
declstmt -> class ID inherit { declstatements · }, this
declstmt -> class ID inherit { declstatements · }, new
declstmt -> class ID inherit { declstatements · }, LITBOOL
declstmt -> class ID inherit { declstatements · }, LITINT
declstmt -> class ID inherit { declstatements · }, LITFLOAT
declstmt -> class ID inherit { declstatements · }, LITDOUBLE
declstmt -> class ID inherit { declstatements · }, LITCHAR
declstmt -> class ID inherit { declstatements · }, LITSTRING
declstmt -> class ID inherit { declstatements · }, null
declstmt -> class ID inherit { declstatements · }, ++
declstmt -> class ID inherit { declstatements · }, --
declstmt -> class ID inherit { declstatements · }, break
declstmt -> class ID inherit { declstatements · }, return
declstmt -> class ID inherit { declstatements · }, delete
declstmt -> class ID inherit { declstatements · }, while
declstmt -> class ID inherit { declstatements · }, for
declstmt -> class ID inherit { declstatements · }, if
declstatements -> declstatements · declstmt, }
declstatements -> declstatements · declstmt, ID
declstatements -> declstatements · declstmt, void
declstatements -> declstatements · declstmt, bool
declstatements -> declstatements · declstmt, int
declstatements -> declstatements · declstmt, float
declstatements -> declstatements · declstmt, double
declstatements -> declstatements · declstmt, char
declstatements -> declstatements · declstmt, string
declstatements -> declstatements · declstmt, extern
declstatements -> declstatements · declstmt, class
declstmt -> · type ID = expr ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
declstmt -> · type ID = expr ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
declstmt -> · type ID = expr ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
declstmt -> · type ID = expr ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
declstmt -> · type ID = expr ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
declstmt -> · type ID = expr ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
declstmt -> · type ID = expr ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
declstmt -> · type ID = expr ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
declstmt -> · type ID = expr ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
declstmt -> · type ID = expr ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
declstmt -> · type ID = expr ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
type -> · arrtype, ID
type -> · stype, ID
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
declstmt -> class ID inherit { declstatements · }, }
declstmt -> class ID inherit { declstatements · }, &&
declstmt -> class ID inherit { declstatements · }, ||
declstmt -> class ID inherit { declstatements · }, +
declstmt -> class ID inherit { declstatements · }, -
declstmt -> class ID inherit { declstatements · }, *
declstmt -> class ID inherit { declstatements · }, /
declstmt -> class ID inherit { declstatements · }, !
declstmt -> class ID inherit { declstatements · }, else
***EndSet***
***EndState***
***State***
201
I_680
***Set***
declstatements -> declstmt ·, }
declstatements -> declstmt ·, ID
declstatements -> declstmt ·, void
declstatements -> declstmt ·, bool
declstatements -> declstmt ·, int
declstatements -> declstmt ·, float
declstatements -> declstmt ·, double
declstatements -> declstmt ·, char
declstatements -> declstmt ·, string
declstatements -> declstmt ·, extern
declstatements -> declstmt ·, class
***EndSet***
***EndState***
***State***
202
I_687_771_1075_1124_1156_1163_1216_1223_1343_1350_1362
***Set***
cast -> ( type ) factor ·, ;
cast -> ( type ) factor ·, &&
cast -> ( type ) factor ·, ||
cast -> ( type ) factor ·, >
cast -> ( type ) factor ·, <
cast -> ( type ) factor ·, >=
cast -> ( type ) factor ·, <=
cast -> ( type ) factor ·, ==
cast -> ( type ) factor ·, !=
cast -> ( type ) factor ·, +
cast -> ( type ) factor ·, -
cast -> ( type ) factor ·, *
cast -> ( type ) factor ·, /
cast -> ( type ) factor ·, )
cast -> ( type ) factor ·, ,
cast -> ( type ) factor ·, ]
***EndSet***
***EndState***
***State***
203
I_739_1052_1171_1391_1436_1447
***Set***
stmt -> while ( expr ) stmt ·, $
stmt -> while ( expr ) stmt ·, namespace
stmt -> while ( expr ) stmt ·, {
stmt -> while ( expr ) stmt ·, ID
stmt -> while ( expr ) stmt ·, void
stmt -> while ( expr ) stmt ·, bool
stmt -> while ( expr ) stmt ·, int
stmt -> while ( expr ) stmt ·, float
stmt -> while ( expr ) stmt ·, double
stmt -> while ( expr ) stmt ·, char
stmt -> while ( expr ) stmt ·, string
stmt -> while ( expr ) stmt ·, extern
stmt -> while ( expr ) stmt ·, class
stmt -> while ( expr ) stmt ·, (
stmt -> while ( expr ) stmt ·, this
stmt -> while ( expr ) stmt ·, new
stmt -> while ( expr ) stmt ·, LITBOOL
stmt -> while ( expr ) stmt ·, LITINT
stmt -> while ( expr ) stmt ·, LITFLOAT
stmt -> while ( expr ) stmt ·, LITDOUBLE
stmt -> while ( expr ) stmt ·, LITCHAR
stmt -> while ( expr ) stmt ·, LITSTRING
stmt -> while ( expr ) stmt ·, null
stmt -> while ( expr ) stmt ·, ++
stmt -> while ( expr ) stmt ·, --
stmt -> while ( expr ) stmt ·, break
stmt -> while ( expr ) stmt ·, return
stmt -> while ( expr ) stmt ·, delete
stmt -> while ( expr ) stmt ·, while
stmt -> while ( expr ) stmt ·, for
stmt -> while ( expr ) stmt ·, if
stmt -> while ( expr ) stmt ·, }
stmt -> while ( expr ) stmt ·, &&
stmt -> while ( expr ) stmt ·, ||
stmt -> while ( expr ) stmt ·, +
stmt -> while ( expr ) stmt ·, -
stmt -> while ( expr ) stmt ·, *
stmt -> while ( expr ) stmt ·, /
stmt -> while ( expr ) stmt ·, !
stmt -> while ( expr ) stmt ·, else
***EndSet***
***EndState***
***State***
204
I_749_1053_1172_1392_1437_1448
***Set***
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, $
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, namespace
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, {
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, ID
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, void
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, bool
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, int
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, float
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, double
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, char
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, string
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, extern
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, class
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, (
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, this
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, new
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, LITBOOL
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, LITINT
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, LITFLOAT
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, LITDOUBLE
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, LITCHAR
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, LITSTRING
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, null
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, ++
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, --
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, break
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, return
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, delete
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, while
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, for
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, if
stmtexpr -> · assign, )
stmtexpr -> · call, )
stmtexpr -> · incdec, )
stmtexpr -> · newobj, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
newobj -> · new ID ( ), )
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
idBracket -> · ID [ optidx ], .
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, }
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, &&
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, ||
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, +
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, -
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, *
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, /
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, !
stmt -> for ( stmt bexpr ; · stmtexpr ) stmt, else
***EndSet***
***EndState***
***State***
205
I_764_1066_1185_1393_1438_1449
***Set***
stmt -> if ( expr ) stmt · elifclauselist elseclause, $
stmt -> if ( expr ) stmt · elifclauselist elseclause, namespace
stmt -> if ( expr ) stmt · elifclauselist elseclause, {
stmt -> if ( expr ) stmt · elifclauselist elseclause, ID
stmt -> if ( expr ) stmt · elifclauselist elseclause, void
stmt -> if ( expr ) stmt · elifclauselist elseclause, bool
stmt -> if ( expr ) stmt · elifclauselist elseclause, int
stmt -> if ( expr ) stmt · elifclauselist elseclause, float
stmt -> if ( expr ) stmt · elifclauselist elseclause, double
stmt -> if ( expr ) stmt · elifclauselist elseclause, char
stmt -> if ( expr ) stmt · elifclauselist elseclause, string
stmt -> if ( expr ) stmt · elifclauselist elseclause, extern
stmt -> if ( expr ) stmt · elifclauselist elseclause, class
stmt -> if ( expr ) stmt · elifclauselist elseclause, (
stmt -> if ( expr ) stmt · elifclauselist elseclause, this
stmt -> if ( expr ) stmt · elifclauselist elseclause, new
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITBOOL
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITINT
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITFLOAT
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITDOUBLE
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITCHAR
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITSTRING
stmt -> if ( expr ) stmt · elifclauselist elseclause, null
stmt -> if ( expr ) stmt · elifclauselist elseclause, ++
stmt -> if ( expr ) stmt · elifclauselist elseclause, --
stmt -> if ( expr ) stmt · elifclauselist elseclause, break
stmt -> if ( expr ) stmt · elifclauselist elseclause, return
stmt -> if ( expr ) stmt · elifclauselist elseclause, delete
stmt -> if ( expr ) stmt · elifclauselist elseclause, while
stmt -> if ( expr ) stmt · elifclauselist elseclause, for
stmt -> if ( expr ) stmt · elifclauselist elseclause, if
elifclauselist -> ·, else
elifclauselist -> ·, $
elifclauselist -> · elifclauselist elifclause, else
elifclauselist -> · elifclauselist elifclause, $
elifclauselist -> ·, namespace
elifclauselist -> · elifclauselist elifclause, namespace
elifclauselist -> ·, {
elifclauselist -> · elifclauselist elifclause, {
elifclauselist -> ·, ID
elifclauselist -> · elifclauselist elifclause, ID
elifclauselist -> ·, void
elifclauselist -> · elifclauselist elifclause, void
elifclauselist -> ·, bool
elifclauselist -> · elifclauselist elifclause, bool
elifclauselist -> ·, int
elifclauselist -> · elifclauselist elifclause, int
elifclauselist -> ·, float
elifclauselist -> · elifclauselist elifclause, float
elifclauselist -> ·, double
elifclauselist -> · elifclauselist elifclause, double
elifclauselist -> ·, char
elifclauselist -> · elifclauselist elifclause, char
elifclauselist -> ·, string
elifclauselist -> · elifclauselist elifclause, string
elifclauselist -> ·, extern
elifclauselist -> · elifclauselist elifclause, extern
elifclauselist -> ·, class
elifclauselist -> · elifclauselist elifclause, class
elifclauselist -> ·, (
elifclauselist -> · elifclauselist elifclause, (
elifclauselist -> ·, this
elifclauselist -> · elifclauselist elifclause, this
elifclauselist -> ·, new
elifclauselist -> · elifclauselist elifclause, new
elifclauselist -> ·, LITBOOL
elifclauselist -> · elifclauselist elifclause, LITBOOL
elifclauselist -> ·, LITINT
elifclauselist -> · elifclauselist elifclause, LITINT
elifclauselist -> ·, LITFLOAT
elifclauselist -> · elifclauselist elifclause, LITFLOAT
elifclauselist -> ·, LITDOUBLE
elifclauselist -> · elifclauselist elifclause, LITDOUBLE
elifclauselist -> ·, LITCHAR
elifclauselist -> · elifclauselist elifclause, LITCHAR
elifclauselist -> ·, LITSTRING
elifclauselist -> · elifclauselist elifclause, LITSTRING
elifclauselist -> ·, null
elifclauselist -> · elifclauselist elifclause, null
elifclauselist -> ·, ++
elifclauselist -> · elifclauselist elifclause, ++
elifclauselist -> ·, --
elifclauselist -> · elifclauselist elifclause, --
elifclauselist -> ·, break
elifclauselist -> · elifclauselist elifclause, break
elifclauselist -> ·, return
elifclauselist -> · elifclauselist elifclause, return
elifclauselist -> ·, delete
elifclauselist -> · elifclauselist elifclause, delete
elifclauselist -> ·, while
elifclauselist -> · elifclauselist elifclause, while
elifclauselist -> ·, for
elifclauselist -> · elifclauselist elifclause, for
elifclauselist -> ·, if
elifclauselist -> · elifclauselist elifclause, if
stmt -> if ( expr ) stmt · elifclauselist elseclause, }
elifclauselist -> ·, }
elifclauselist -> · elifclauselist elifclause, }
stmt -> if ( expr ) stmt · elifclauselist elseclause, &&
stmt -> if ( expr ) stmt · elifclauselist elseclause, ||
stmt -> if ( expr ) stmt · elifclauselist elseclause, +
stmt -> if ( expr ) stmt · elifclauselist elseclause, -
stmt -> if ( expr ) stmt · elifclauselist elseclause, *
stmt -> if ( expr ) stmt · elifclauselist elseclause, /
stmt -> if ( expr ) stmt · elifclauselist elseclause, !
elifclauselist -> ·, &&
elifclauselist -> · elifclauselist elifclause, &&
elifclauselist -> ·, ||
elifclauselist -> · elifclauselist elifclause, ||
elifclauselist -> ·, +
elifclauselist -> · elifclauselist elifclause, +
elifclauselist -> ·, -
elifclauselist -> · elifclauselist elifclause, -
elifclauselist -> ·, *
elifclauselist -> · elifclauselist elifclause, *
elifclauselist -> ·, /
elifclauselist -> · elifclauselist elifclause, /
elifclauselist -> ·, !
elifclauselist -> · elifclauselist elifclause, !
stmt -> if ( expr ) stmt · elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
206
I_911
***Set***
args -> args , expr ·, )
args -> args , expr ·, ,
***EndSet***
***EndState***
***State***
207
I_925
***Set***
params -> type ID ·, )
params -> type ID ·, ,
***EndSet***
***EndState***
***State***
208
I_926
***Set***
params -> params , · type ID, )
params -> params , · type ID, ,
type -> · arrtype, ID
type -> · stype, ID
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
***EndSet***
***EndState***
***State***
209
I_927_1070_1198_1358_1395_1440_1451
***Set***
declstmt -> type ID ( params ) · { statements }, $
declstmt -> type ID ( params ) · { statements }, namespace
declstmt -> type ID ( params ) · { statements }, {
declstmt -> type ID ( params ) · { statements }, ID
declstmt -> type ID ( params ) · { statements }, void
declstmt -> type ID ( params ) · { statements }, bool
declstmt -> type ID ( params ) · { statements }, int
declstmt -> type ID ( params ) · { statements }, float
declstmt -> type ID ( params ) · { statements }, double
declstmt -> type ID ( params ) · { statements }, char
declstmt -> type ID ( params ) · { statements }, string
declstmt -> type ID ( params ) · { statements }, extern
declstmt -> type ID ( params ) · { statements }, class
declstmt -> type ID ( params ) · { statements }, (
declstmt -> type ID ( params ) · { statements }, this
declstmt -> type ID ( params ) · { statements }, new
declstmt -> type ID ( params ) · { statements }, LITBOOL
declstmt -> type ID ( params ) · { statements }, LITINT
declstmt -> type ID ( params ) · { statements }, LITFLOAT
declstmt -> type ID ( params ) · { statements }, LITDOUBLE
declstmt -> type ID ( params ) · { statements }, LITCHAR
declstmt -> type ID ( params ) · { statements }, LITSTRING
declstmt -> type ID ( params ) · { statements }, null
declstmt -> type ID ( params ) · { statements }, ++
declstmt -> type ID ( params ) · { statements }, --
declstmt -> type ID ( params ) · { statements }, break
declstmt -> type ID ( params ) · { statements }, return
declstmt -> type ID ( params ) · { statements }, delete
declstmt -> type ID ( params ) · { statements }, while
declstmt -> type ID ( params ) · { statements }, for
declstmt -> type ID ( params ) · { statements }, if
declstmt -> type ID ( params ) · { statements }, }
declstmt -> type ID ( params ) · { statements }, &&
declstmt -> type ID ( params ) · { statements }, ||
declstmt -> type ID ( params ) · { statements }, +
declstmt -> type ID ( params ) · { statements }, -
declstmt -> type ID ( params ) · { statements }, *
declstmt -> type ID ( params ) · { statements }, /
declstmt -> type ID ( params ) · { statements }, !
declstmt -> type ID ( params ) · { statements }, else
***EndSet***
***EndState***
***State***
210
I_928_1071_1199_1359_1396_1441_1452
***Set***
declstmt -> type ID = expr ; ·, $
declstmt -> type ID = expr ; ·, namespace
declstmt -> type ID = expr ; ·, {
declstmt -> type ID = expr ; ·, ID
declstmt -> type ID = expr ; ·, void
declstmt -> type ID = expr ; ·, bool
declstmt -> type ID = expr ; ·, int
declstmt -> type ID = expr ; ·, float
declstmt -> type ID = expr ; ·, double
declstmt -> type ID = expr ; ·, char
declstmt -> type ID = expr ; ·, string
declstmt -> type ID = expr ; ·, extern
declstmt -> type ID = expr ; ·, class
declstmt -> type ID = expr ; ·, (
declstmt -> type ID = expr ; ·, this
declstmt -> type ID = expr ; ·, new
declstmt -> type ID = expr ; ·, LITBOOL
declstmt -> type ID = expr ; ·, LITINT
declstmt -> type ID = expr ; ·, LITFLOAT
declstmt -> type ID = expr ; ·, LITDOUBLE
declstmt -> type ID = expr ; ·, LITCHAR
declstmt -> type ID = expr ; ·, LITSTRING
declstmt -> type ID = expr ; ·, null
declstmt -> type ID = expr ; ·, ++
declstmt -> type ID = expr ; ·, --
declstmt -> type ID = expr ; ·, break
declstmt -> type ID = expr ; ·, return
declstmt -> type ID = expr ; ·, delete
declstmt -> type ID = expr ; ·, while
declstmt -> type ID = expr ; ·, for
declstmt -> type ID = expr ; ·, if
declstmt -> type ID = expr ; ·, }
declstmt -> type ID = expr ; ·, &&
declstmt -> type ID = expr ; ·, ||
declstmt -> type ID = expr ; ·, +
declstmt -> type ID = expr ; ·, -
declstmt -> type ID = expr ; ·, *
declstmt -> type ID = expr ; ·, /
declstmt -> type ID = expr ; ·, !
declstmt -> type ID = expr ; ·, else
***EndSet***
***EndState***
***State***
211
I_929_1228_1289_1411_1427_1459_1466
***Set***
declstmt -> extern type ID ( params ) · ;, $
declstmt -> extern type ID ( params ) · ;, namespace
declstmt -> extern type ID ( params ) · ;, {
declstmt -> extern type ID ( params ) · ;, ID
declstmt -> extern type ID ( params ) · ;, void
declstmt -> extern type ID ( params ) · ;, bool
declstmt -> extern type ID ( params ) · ;, int
declstmt -> extern type ID ( params ) · ;, float
declstmt -> extern type ID ( params ) · ;, double
declstmt -> extern type ID ( params ) · ;, char
declstmt -> extern type ID ( params ) · ;, string
declstmt -> extern type ID ( params ) · ;, extern
declstmt -> extern type ID ( params ) · ;, class
declstmt -> extern type ID ( params ) · ;, (
declstmt -> extern type ID ( params ) · ;, this
declstmt -> extern type ID ( params ) · ;, new
declstmt -> extern type ID ( params ) · ;, LITBOOL
declstmt -> extern type ID ( params ) · ;, LITINT
declstmt -> extern type ID ( params ) · ;, LITFLOAT
declstmt -> extern type ID ( params ) · ;, LITDOUBLE
declstmt -> extern type ID ( params ) · ;, LITCHAR
declstmt -> extern type ID ( params ) · ;, LITSTRING
declstmt -> extern type ID ( params ) · ;, null
declstmt -> extern type ID ( params ) · ;, ++
declstmt -> extern type ID ( params ) · ;, --
declstmt -> extern type ID ( params ) · ;, break
declstmt -> extern type ID ( params ) · ;, return
declstmt -> extern type ID ( params ) · ;, delete
declstmt -> extern type ID ( params ) · ;, while
declstmt -> extern type ID ( params ) · ;, for
declstmt -> extern type ID ( params ) · ;, if
declstmt -> extern type ID ( params ) · ;, }
declstmt -> extern type ID ( params ) · ;, &&
declstmt -> extern type ID ( params ) · ;, ||
declstmt -> extern type ID ( params ) · ;, +
declstmt -> extern type ID ( params ) · ;, -
declstmt -> extern type ID ( params ) · ;, *
declstmt -> extern type ID ( params ) · ;, /
declstmt -> extern type ID ( params ) · ;, !
declstmt -> extern type ID ( params ) · ;, else
***EndSet***
***EndState***
***State***
212
I_932_1229_1290_1412_1428_1460_1467
***Set***
declstmt -> class ID inherit { declstatements } ·, $
declstmt -> class ID inherit { declstatements } ·, namespace
declstmt -> class ID inherit { declstatements } ·, {
declstmt -> class ID inherit { declstatements } ·, ID
declstmt -> class ID inherit { declstatements } ·, void
declstmt -> class ID inherit { declstatements } ·, bool
declstmt -> class ID inherit { declstatements } ·, int
declstmt -> class ID inherit { declstatements } ·, float
declstmt -> class ID inherit { declstatements } ·, double
declstmt -> class ID inherit { declstatements } ·, char
declstmt -> class ID inherit { declstatements } ·, string
declstmt -> class ID inherit { declstatements } ·, extern
declstmt -> class ID inherit { declstatements } ·, class
declstmt -> class ID inherit { declstatements } ·, (
declstmt -> class ID inherit { declstatements } ·, this
declstmt -> class ID inherit { declstatements } ·, new
declstmt -> class ID inherit { declstatements } ·, LITBOOL
declstmt -> class ID inherit { declstatements } ·, LITINT
declstmt -> class ID inherit { declstatements } ·, LITFLOAT
declstmt -> class ID inherit { declstatements } ·, LITDOUBLE
declstmt -> class ID inherit { declstatements } ·, LITCHAR
declstmt -> class ID inherit { declstatements } ·, LITSTRING
declstmt -> class ID inherit { declstatements } ·, null
declstmt -> class ID inherit { declstatements } ·, ++
declstmt -> class ID inherit { declstatements } ·, --
declstmt -> class ID inherit { declstatements } ·, break
declstmt -> class ID inherit { declstatements } ·, return
declstmt -> class ID inherit { declstatements } ·, delete
declstmt -> class ID inherit { declstatements } ·, while
declstmt -> class ID inherit { declstatements } ·, for
declstmt -> class ID inherit { declstatements } ·, if
declstmt -> class ID inherit { declstatements } ·, }
declstmt -> class ID inherit { declstatements } ·, &&
declstmt -> class ID inherit { declstatements } ·, ||
declstmt -> class ID inherit { declstatements } ·, +
declstmt -> class ID inherit { declstatements } ·, -
declstmt -> class ID inherit { declstatements } ·, *
declstmt -> class ID inherit { declstatements } ·, /
declstmt -> class ID inherit { declstatements } ·, !
declstmt -> class ID inherit { declstatements } ·, else
***EndSet***
***EndState***
***State***
213
I_933
***Set***
declstatements -> declstatements declstmt ·, }
declstatements -> declstatements declstmt ·, ID
declstatements -> declstatements declstmt ·, void
declstatements -> declstatements declstmt ·, bool
declstatements -> declstatements declstmt ·, int
declstatements -> declstatements declstmt ·, float
declstatements -> declstatements declstmt ·, double
declstatements -> declstatements declstmt ·, char
declstatements -> declstatements declstmt ·, string
declstatements -> declstatements declstmt ·, extern
declstatements -> declstatements declstmt ·, class
***EndSet***
***EndState***
***State***
214
I_1001_1230_1291_1429_1461_1468
***Set***
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, $
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, namespace
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, {
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, ID
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, void
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, bool
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, int
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, float
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, double
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, char
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, string
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, extern
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, class
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, (
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, this
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, new
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, LITBOOL
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, LITINT
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, LITFLOAT
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, LITDOUBLE
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, LITCHAR
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, LITSTRING
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, null
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, ++
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, --
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, break
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, return
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, delete
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, while
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, for
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, if
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, }
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, &&
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, ||
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, +
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, -
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, *
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, /
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, !
stmt -> for ( stmt bexpr ; stmtexpr · ) stmt, else
***EndSet***
***EndState***
***State***
215
I_1021_1242_1303_1430_1462_1469
***Set***
stmt -> if ( expr ) stmt elifclauselist · elseclause, $
stmt -> if ( expr ) stmt elifclauselist · elseclause, namespace
stmt -> if ( expr ) stmt elifclauselist · elseclause, {
stmt -> if ( expr ) stmt elifclauselist · elseclause, ID
stmt -> if ( expr ) stmt elifclauselist · elseclause, void
stmt -> if ( expr ) stmt elifclauselist · elseclause, bool
stmt -> if ( expr ) stmt elifclauselist · elseclause, int
stmt -> if ( expr ) stmt elifclauselist · elseclause, float
stmt -> if ( expr ) stmt elifclauselist · elseclause, double
stmt -> if ( expr ) stmt elifclauselist · elseclause, char
stmt -> if ( expr ) stmt elifclauselist · elseclause, string
stmt -> if ( expr ) stmt elifclauselist · elseclause, extern
stmt -> if ( expr ) stmt elifclauselist · elseclause, class
stmt -> if ( expr ) stmt elifclauselist · elseclause, (
stmt -> if ( expr ) stmt elifclauselist · elseclause, this
stmt -> if ( expr ) stmt elifclauselist · elseclause, new
stmt -> if ( expr ) stmt elifclauselist · elseclause, LITBOOL
stmt -> if ( expr ) stmt elifclauselist · elseclause, LITINT
stmt -> if ( expr ) stmt elifclauselist · elseclause, LITFLOAT
stmt -> if ( expr ) stmt elifclauselist · elseclause, LITDOUBLE
stmt -> if ( expr ) stmt elifclauselist · elseclause, LITCHAR
stmt -> if ( expr ) stmt elifclauselist · elseclause, LITSTRING
stmt -> if ( expr ) stmt elifclauselist · elseclause, null
stmt -> if ( expr ) stmt elifclauselist · elseclause, ++
stmt -> if ( expr ) stmt elifclauselist · elseclause, --
stmt -> if ( expr ) stmt elifclauselist · elseclause, break
stmt -> if ( expr ) stmt elifclauselist · elseclause, return
stmt -> if ( expr ) stmt elifclauselist · elseclause, delete
stmt -> if ( expr ) stmt elifclauselist · elseclause, while
stmt -> if ( expr ) stmt elifclauselist · elseclause, for
stmt -> if ( expr ) stmt elifclauselist · elseclause, if
elifclauselist -> elifclauselist · elifclause, else
elifclauselist -> elifclauselist · elifclause, $
elifclauselist -> elifclauselist · elifclause, namespace
elifclauselist -> elifclauselist · elifclause, {
elifclauselist -> elifclauselist · elifclause, ID
elifclauselist -> elifclauselist · elifclause, void
elifclauselist -> elifclauselist · elifclause, bool
elifclauselist -> elifclauselist · elifclause, int
elifclauselist -> elifclauselist · elifclause, float
elifclauselist -> elifclauselist · elifclause, double
elifclauselist -> elifclauselist · elifclause, char
elifclauselist -> elifclauselist · elifclause, string
elifclauselist -> elifclauselist · elifclause, extern
elifclauselist -> elifclauselist · elifclause, class
elifclauselist -> elifclauselist · elifclause, (
elifclauselist -> elifclauselist · elifclause, this
elifclauselist -> elifclauselist · elifclause, new
elifclauselist -> elifclauselist · elifclause, LITBOOL
elifclauselist -> elifclauselist · elifclause, LITINT
elifclauselist -> elifclauselist · elifclause, LITFLOAT
elifclauselist -> elifclauselist · elifclause, LITDOUBLE
elifclauselist -> elifclauselist · elifclause, LITCHAR
elifclauselist -> elifclauselist · elifclause, LITSTRING
elifclauselist -> elifclauselist · elifclause, null
elifclauselist -> elifclauselist · elifclause, ++
elifclauselist -> elifclauselist · elifclause, --
elifclauselist -> elifclauselist · elifclause, break
elifclauselist -> elifclauselist · elifclause, return
elifclauselist -> elifclauselist · elifclause, delete
elifclauselist -> elifclauselist · elifclause, while
elifclauselist -> elifclauselist · elifclause, for
elifclauselist -> elifclauselist · elifclause, if
elseclause -> ·, $
elseclause -> · else stmt, $
elseclause -> ·, namespace
elseclause -> · else stmt, namespace
elseclause -> ·, {
elseclause -> · else stmt, {
elseclause -> ·, ID
elseclause -> · else stmt, ID
elseclause -> ·, void
elseclause -> · else stmt, void
elseclause -> ·, bool
elseclause -> · else stmt, bool
elseclause -> ·, int
elseclause -> · else stmt, int
elseclause -> ·, float
elseclause -> · else stmt, float
elseclause -> ·, double
elseclause -> · else stmt, double
elseclause -> ·, char
elseclause -> · else stmt, char
elseclause -> ·, string
elseclause -> · else stmt, string
elseclause -> ·, extern
elseclause -> · else stmt, extern
elseclause -> ·, class
elseclause -> · else stmt, class
elseclause -> ·, (
elseclause -> · else stmt, (
elseclause -> ·, this
elseclause -> · else stmt, this
elseclause -> ·, new
elseclause -> · else stmt, new
elseclause -> ·, LITBOOL
elseclause -> · else stmt, LITBOOL
elseclause -> ·, LITINT
elseclause -> · else stmt, LITINT
elseclause -> ·, LITFLOAT
elseclause -> · else stmt, LITFLOAT
elseclause -> ·, LITDOUBLE
elseclause -> · else stmt, LITDOUBLE
elseclause -> ·, LITCHAR
elseclause -> · else stmt, LITCHAR
elseclause -> ·, LITSTRING
elseclause -> · else stmt, LITSTRING
elseclause -> ·, null
elseclause -> · else stmt, null
elseclause -> ·, ++
elseclause -> · else stmt, ++
elseclause -> ·, --
elseclause -> · else stmt, --
elseclause -> ·, break
elseclause -> · else stmt, break
elseclause -> ·, return
elseclause -> · else stmt, return
elseclause -> ·, delete
elseclause -> · else stmt, delete
elseclause -> ·, while
elseclause -> · else stmt, while
elseclause -> ·, for
elseclause -> · else stmt, for
elseclause -> ·, if
elseclause -> · else stmt, if
elifclause -> · else if ( expr ) stmt, else
elifclause -> · else if ( expr ) stmt, $
elifclause -> · else if ( expr ) stmt, namespace
elifclause -> · else if ( expr ) stmt, {
elifclause -> · else if ( expr ) stmt, ID
elifclause -> · else if ( expr ) stmt, void
elifclause -> · else if ( expr ) stmt, bool
elifclause -> · else if ( expr ) stmt, int
elifclause -> · else if ( expr ) stmt, float
elifclause -> · else if ( expr ) stmt, double
elifclause -> · else if ( expr ) stmt, char
elifclause -> · else if ( expr ) stmt, string
elifclause -> · else if ( expr ) stmt, extern
elifclause -> · else if ( expr ) stmt, class
elifclause -> · else if ( expr ) stmt, (
elifclause -> · else if ( expr ) stmt, this
elifclause -> · else if ( expr ) stmt, new
elifclause -> · else if ( expr ) stmt, LITBOOL
elifclause -> · else if ( expr ) stmt, LITINT
elifclause -> · else if ( expr ) stmt, LITFLOAT
elifclause -> · else if ( expr ) stmt, LITDOUBLE
elifclause -> · else if ( expr ) stmt, LITCHAR
elifclause -> · else if ( expr ) stmt, LITSTRING
elifclause -> · else if ( expr ) stmt, null
elifclause -> · else if ( expr ) stmt, ++
elifclause -> · else if ( expr ) stmt, --
elifclause -> · else if ( expr ) stmt, break
elifclause -> · else if ( expr ) stmt, return
elifclause -> · else if ( expr ) stmt, delete
elifclause -> · else if ( expr ) stmt, while
elifclause -> · else if ( expr ) stmt, for
elifclause -> · else if ( expr ) stmt, if
stmt -> if ( expr ) stmt elifclauselist · elseclause, }
elifclauselist -> elifclauselist · elifclause, }
elseclause -> ·, }
elseclause -> · else stmt, }
elifclause -> · else if ( expr ) stmt, }
stmt -> if ( expr ) stmt elifclauselist · elseclause, &&
stmt -> if ( expr ) stmt elifclauselist · elseclause, ||
stmt -> if ( expr ) stmt elifclauselist · elseclause, +
stmt -> if ( expr ) stmt elifclauselist · elseclause, -
stmt -> if ( expr ) stmt elifclauselist · elseclause, *
stmt -> if ( expr ) stmt elifclauselist · elseclause, /
stmt -> if ( expr ) stmt elifclauselist · elseclause, !
elifclauselist -> elifclauselist · elifclause, &&
elifclauselist -> elifclauselist · elifclause, ||
elifclauselist -> elifclauselist · elifclause, +
elifclauselist -> elifclauselist · elifclause, -
elifclauselist -> elifclauselist · elifclause, *
elifclauselist -> elifclauselist · elifclause, /
elifclauselist -> elifclauselist · elifclause, !
elseclause -> ·, &&
elseclause -> · else stmt, &&
elseclause -> ·, ||
elseclause -> · else stmt, ||
elseclause -> ·, +
elseclause -> · else stmt, +
elseclause -> ·, -
elseclause -> · else stmt, -
elseclause -> ·, *
elseclause -> · else stmt, *
elseclause -> ·, /
elseclause -> · else stmt, /
elseclause -> ·, !
elseclause -> · else stmt, !
elifclause -> · else if ( expr ) stmt, &&
elifclause -> · else if ( expr ) stmt, ||
elifclause -> · else if ( expr ) stmt, +
elifclause -> · else if ( expr ) stmt, -
elifclause -> · else if ( expr ) stmt, *
elifclause -> · else if ( expr ) stmt, /
elifclause -> · else if ( expr ) stmt, !
stmt -> if ( expr ) stmt elifclauselist · elseclause, else
elseclause -> ·, else
elseclause -> · else stmt, else
***EndSet***
***EndState***
***State***
216
I_1129_1272
***Set***
params -> params , type · ID, )
params -> params , type · ID, ,
params -> params , type ID ·, )
params -> params , type ID ·, ,
***EndSet***
***EndState***
***State***
217
I_1130_1245_1311_1413_1432_1464_1471
***Set***
declstmt -> type ID ( params ) { · statements }, $
declstmt -> type ID ( params ) { · statements }, namespace
declstmt -> type ID ( params ) { · statements }, {
declstmt -> type ID ( params ) { · statements }, ID
declstmt -> type ID ( params ) { · statements }, void
declstmt -> type ID ( params ) { · statements }, bool
declstmt -> type ID ( params ) { · statements }, int
declstmt -> type ID ( params ) { · statements }, float
declstmt -> type ID ( params ) { · statements }, double
declstmt -> type ID ( params ) { · statements }, char
declstmt -> type ID ( params ) { · statements }, string
declstmt -> type ID ( params ) { · statements }, extern
declstmt -> type ID ( params ) { · statements }, class
declstmt -> type ID ( params ) { · statements }, (
declstmt -> type ID ( params ) { · statements }, this
declstmt -> type ID ( params ) { · statements }, new
declstmt -> type ID ( params ) { · statements }, LITBOOL
declstmt -> type ID ( params ) { · statements }, LITINT
declstmt -> type ID ( params ) { · statements }, LITFLOAT
declstmt -> type ID ( params ) { · statements }, LITDOUBLE
declstmt -> type ID ( params ) { · statements }, LITCHAR
declstmt -> type ID ( params ) { · statements }, LITSTRING
declstmt -> type ID ( params ) { · statements }, null
declstmt -> type ID ( params ) { · statements }, ++
declstmt -> type ID ( params ) { · statements }, --
declstmt -> type ID ( params ) { · statements }, break
declstmt -> type ID ( params ) { · statements }, return
declstmt -> type ID ( params ) { · statements }, delete
declstmt -> type ID ( params ) { · statements }, while
declstmt -> type ID ( params ) { · statements }, for
declstmt -> type ID ( params ) { · statements }, if
statements -> · statements stmt, }
statements -> · stmt, }
statements -> ·, }
statements -> · statements stmt, namespace
statements -> · statements stmt, {
statements -> · statements stmt, ID
statements -> · statements stmt, void
statements -> · statements stmt, bool
statements -> · statements stmt, int
statements -> · statements stmt, float
statements -> · statements stmt, double
statements -> · statements stmt, char
statements -> · statements stmt, string
statements -> · statements stmt, extern
statements -> · statements stmt, class
statements -> · statements stmt, (
statements -> · statements stmt, this
statements -> · statements stmt, new
statements -> · statements stmt, LITBOOL
statements -> · statements stmt, LITINT
statements -> · statements stmt, LITFLOAT
statements -> · statements stmt, LITDOUBLE
statements -> · statements stmt, LITCHAR
statements -> · statements stmt, LITSTRING
statements -> · statements stmt, null
statements -> · statements stmt, ++
statements -> · statements stmt, --
statements -> · statements stmt, break
statements -> · statements stmt, return
statements -> · statements stmt, delete
statements -> · statements stmt, while
statements -> · statements stmt, for
statements -> · statements stmt, if
statements -> · stmt, namespace
statements -> · stmt, {
statements -> · stmt, ID
statements -> · stmt, void
statements -> · stmt, bool
statements -> · stmt, int
statements -> · stmt, float
statements -> · stmt, double
statements -> · stmt, char
statements -> · stmt, string
statements -> · stmt, extern
statements -> · stmt, class
statements -> · stmt, (
statements -> · stmt, this
statements -> · stmt, new
statements -> · stmt, LITBOOL
statements -> · stmt, LITINT
statements -> · stmt, LITFLOAT
statements -> · stmt, LITDOUBLE
statements -> · stmt, LITCHAR
statements -> · stmt, LITSTRING
statements -> · stmt, null
statements -> · stmt, ++
statements -> · stmt, --
statements -> · stmt, break
statements -> · stmt, return
statements -> · stmt, delete
statements -> · stmt, while
statements -> · stmt, for
statements -> · stmt, if
statements -> ·, namespace
statements -> ·, {
statements -> ·, ID
statements -> ·, void
statements -> ·, bool
statements -> ·, int
statements -> ·, float
statements -> ·, double
statements -> ·, char
statements -> ·, string
statements -> ·, extern
statements -> ·, class
statements -> ·, (
statements -> ·, this
statements -> ·, new
statements -> ·, LITBOOL
statements -> ·, LITINT
statements -> ·, LITFLOAT
statements -> ·, LITDOUBLE
statements -> ·, LITCHAR
statements -> ·, LITSTRING
statements -> ·, null
statements -> ·, ++
statements -> ·, --
statements -> ·, break
statements -> ·, return
statements -> ·, delete
statements -> ·, while
statements -> ·, for
statements -> ·, if
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
declstmt -> type ID ( params ) { · statements }, }
declstmt -> type ID ( params ) { · statements }, &&
declstmt -> type ID ( params ) { · statements }, ||
declstmt -> type ID ( params ) { · statements }, +
declstmt -> type ID ( params ) { · statements }, -
declstmt -> type ID ( params ) { · statements }, *
declstmt -> type ID ( params ) { · statements }, /
declstmt -> type ID ( params ) { · statements }, !
declstmt -> type ID ( params ) { · statements }, else
***EndSet***
***EndState***
***State***
218
I_1131_1324_1367_1442_1453_1477_1483
***Set***
declstmt -> extern type ID ( params ) ; ·, $
declstmt -> extern type ID ( params ) ; ·, namespace
declstmt -> extern type ID ( params ) ; ·, {
declstmt -> extern type ID ( params ) ; ·, ID
declstmt -> extern type ID ( params ) ; ·, void
declstmt -> extern type ID ( params ) ; ·, bool
declstmt -> extern type ID ( params ) ; ·, int
declstmt -> extern type ID ( params ) ; ·, float
declstmt -> extern type ID ( params ) ; ·, double
declstmt -> extern type ID ( params ) ; ·, char
declstmt -> extern type ID ( params ) ; ·, string
declstmt -> extern type ID ( params ) ; ·, extern
declstmt -> extern type ID ( params ) ; ·, class
declstmt -> extern type ID ( params ) ; ·, (
declstmt -> extern type ID ( params ) ; ·, this
declstmt -> extern type ID ( params ) ; ·, new
declstmt -> extern type ID ( params ) ; ·, LITBOOL
declstmt -> extern type ID ( params ) ; ·, LITINT
declstmt -> extern type ID ( params ) ; ·, LITFLOAT
declstmt -> extern type ID ( params ) ; ·, LITDOUBLE
declstmt -> extern type ID ( params ) ; ·, LITCHAR
declstmt -> extern type ID ( params ) ; ·, LITSTRING
declstmt -> extern type ID ( params ) ; ·, null
declstmt -> extern type ID ( params ) ; ·, ++
declstmt -> extern type ID ( params ) ; ·, --
declstmt -> extern type ID ( params ) ; ·, break
declstmt -> extern type ID ( params ) ; ·, return
declstmt -> extern type ID ( params ) ; ·, delete
declstmt -> extern type ID ( params ) ; ·, while
declstmt -> extern type ID ( params ) ; ·, for
declstmt -> extern type ID ( params ) ; ·, if
declstmt -> extern type ID ( params ) ; ·, }
declstmt -> extern type ID ( params ) ; ·, &&
declstmt -> extern type ID ( params ) ; ·, ||
declstmt -> extern type ID ( params ) ; ·, +
declstmt -> extern type ID ( params ) ; ·, -
declstmt -> extern type ID ( params ) ; ·, *
declstmt -> extern type ID ( params ) ; ·, /
declstmt -> extern type ID ( params ) ; ·, !
declstmt -> extern type ID ( params ) ; ·, else
***EndSet***
***EndState***
***State***
219
I_1196_1325_1368_1454_1478_1484
***Set***
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, $
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, namespace
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, {
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, ID
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, void
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, bool
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, int
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, float
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, double
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, char
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, string
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, extern
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, class
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, (
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, this
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, new
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, LITBOOL
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, LITINT
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, LITFLOAT
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, LITDOUBLE
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, LITCHAR
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, LITSTRING
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, null
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, ++
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, --
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, break
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, return
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, delete
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, while
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, for
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, if
stmt -> · namespaceblock, $
stmt -> · statementblock, $
stmt -> · declstmt, $
stmt -> · stmtexpr ;, $
stmt -> · break ;, $
stmt -> · return expr ;, $
stmt -> · return ;, $
stmt -> · delete expr ;, $
stmt -> · while ( expr ) stmt, $
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, $
stmt -> · if ( expr ) stmt elifclauselist elseclause, $
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, $
statementblock -> · { statements }, $
declstmt -> · type ID = expr ;, $
declstmt -> · type ID ( params ) { statements }, $
declstmt -> · extern type ID ( params ) ;, $
declstmt -> · class ID inherit { declstatements }, $
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, }
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, &&
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, ||
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, +
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, -
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, *
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, /
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, !
stmt -> · namespaceblock, &&
stmt -> · statementblock, &&
stmt -> · declstmt, &&
stmt -> · stmtexpr ;, &&
stmt -> · break ;, &&
stmt -> · return expr ;, &&
stmt -> · return ;, &&
stmt -> · delete expr ;, &&
stmt -> · while ( expr ) stmt, &&
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, &&
stmt -> · if ( expr ) stmt elifclauselist elseclause, &&
stmt -> · namespaceblock, ||
stmt -> · statementblock, ||
stmt -> · declstmt, ||
stmt -> · stmtexpr ;, ||
stmt -> · break ;, ||
stmt -> · return expr ;, ||
stmt -> · return ;, ||
stmt -> · delete expr ;, ||
stmt -> · while ( expr ) stmt, ||
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ||
stmt -> · if ( expr ) stmt elifclauselist elseclause, ||
stmt -> · namespaceblock, +
stmt -> · statementblock, +
stmt -> · declstmt, +
stmt -> · stmtexpr ;, +
stmt -> · break ;, +
stmt -> · return expr ;, +
stmt -> · return ;, +
stmt -> · delete expr ;, +
stmt -> · while ( expr ) stmt, +
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, +
stmt -> · if ( expr ) stmt elifclauselist elseclause, +
stmt -> · namespaceblock, -
stmt -> · statementblock, -
stmt -> · declstmt, -
stmt -> · stmtexpr ;, -
stmt -> · break ;, -
stmt -> · return expr ;, -
stmt -> · return ;, -
stmt -> · delete expr ;, -
stmt -> · while ( expr ) stmt, -
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, -
stmt -> · if ( expr ) stmt elifclauselist elseclause, -
stmt -> · namespaceblock, *
stmt -> · statementblock, *
stmt -> · declstmt, *
stmt -> · stmtexpr ;, *
stmt -> · break ;, *
stmt -> · return expr ;, *
stmt -> · return ;, *
stmt -> · delete expr ;, *
stmt -> · while ( expr ) stmt, *
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, *
stmt -> · if ( expr ) stmt elifclauselist elseclause, *
stmt -> · namespaceblock, /
stmt -> · statementblock, /
stmt -> · declstmt, /
stmt -> · stmtexpr ;, /
stmt -> · break ;, /
stmt -> · return expr ;, /
stmt -> · return ;, /
stmt -> · delete expr ;, /
stmt -> · while ( expr ) stmt, /
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, /
stmt -> · if ( expr ) stmt elifclauselist elseclause, /
stmt -> · namespaceblock, !
stmt -> · statementblock, !
stmt -> · declstmt, !
stmt -> · stmtexpr ;, !
stmt -> · break ;, !
stmt -> · return expr ;, !
stmt -> · return ;, !
stmt -> · delete expr ;, !
stmt -> · while ( expr ) stmt, !
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, !
stmt -> · if ( expr ) stmt elifclauselist elseclause, !
namespaceblock -> · namespace ID { statements }, &&
statementblock -> · { statements }, &&
declstmt -> · type ID = expr ;, &&
declstmt -> · type ID ( params ) { statements }, &&
declstmt -> · extern type ID ( params ) ;, &&
declstmt -> · class ID inherit { declstatements }, &&
namespaceblock -> · namespace ID { statements }, ||
statementblock -> · { statements }, ||
declstmt -> · type ID = expr ;, ||
declstmt -> · type ID ( params ) { statements }, ||
declstmt -> · extern type ID ( params ) ;, ||
declstmt -> · class ID inherit { declstatements }, ||
namespaceblock -> · namespace ID { statements }, +
statementblock -> · { statements }, +
declstmt -> · type ID = expr ;, +
declstmt -> · type ID ( params ) { statements }, +
declstmt -> · extern type ID ( params ) ;, +
declstmt -> · class ID inherit { declstatements }, +
namespaceblock -> · namespace ID { statements }, -
statementblock -> · { statements }, -
declstmt -> · type ID = expr ;, -
declstmt -> · type ID ( params ) { statements }, -
declstmt -> · extern type ID ( params ) ;, -
declstmt -> · class ID inherit { declstatements }, -
namespaceblock -> · namespace ID { statements }, *
statementblock -> · { statements }, *
declstmt -> · type ID = expr ;, *
declstmt -> · type ID ( params ) { statements }, *
declstmt -> · extern type ID ( params ) ;, *
declstmt -> · class ID inherit { declstatements }, *
namespaceblock -> · namespace ID { statements }, /
statementblock -> · { statements }, /
declstmt -> · type ID = expr ;, /
declstmt -> · type ID ( params ) { statements }, /
declstmt -> · extern type ID ( params ) ;, /
declstmt -> · class ID inherit { declstatements }, /
namespaceblock -> · namespace ID { statements }, !
statementblock -> · { statements }, !
declstmt -> · type ID = expr ;, !
declstmt -> · type ID ( params ) { statements }, !
declstmt -> · extern type ID ( params ) ;, !
declstmt -> · class ID inherit { declstatements }, !
stmt -> for ( stmt bexpr ; stmtexpr ) · stmt, else
stmt -> · namespaceblock, else
stmt -> · statementblock, else
stmt -> · declstmt, else
stmt -> · stmtexpr ;, else
stmt -> · break ;, else
stmt -> · return expr ;, else
stmt -> · return ;, else
stmt -> · delete expr ;, else
stmt -> · while ( expr ) stmt, else
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, else
stmt -> · if ( expr ) stmt elifclauselist elseclause, else
namespaceblock -> · namespace ID { statements }, else
statementblock -> · { statements }, else
declstmt -> · type ID = expr ;, else
declstmt -> · type ID ( params ) { statements }, else
declstmt -> · extern type ID ( params ) ;, else
declstmt -> · class ID inherit { declstatements }, else
***EndSet***
***EndState***
***State***
220
I_1209_1335_1378_1455_1479_1485
***Set***
elseclause -> else · stmt, $
elseclause -> else · stmt, namespace
elseclause -> else · stmt, {
elseclause -> else · stmt, ID
elseclause -> else · stmt, void
elseclause -> else · stmt, bool
elseclause -> else · stmt, int
elseclause -> else · stmt, float
elseclause -> else · stmt, double
elseclause -> else · stmt, char
elseclause -> else · stmt, string
elseclause -> else · stmt, extern
elseclause -> else · stmt, class
elseclause -> else · stmt, (
elseclause -> else · stmt, this
elseclause -> else · stmt, new
elseclause -> else · stmt, LITBOOL
elseclause -> else · stmt, LITINT
elseclause -> else · stmt, LITFLOAT
elseclause -> else · stmt, LITDOUBLE
elseclause -> else · stmt, LITCHAR
elseclause -> else · stmt, LITSTRING
elseclause -> else · stmt, null
elseclause -> else · stmt, ++
elseclause -> else · stmt, --
elseclause -> else · stmt, break
elseclause -> else · stmt, return
elseclause -> else · stmt, delete
elseclause -> else · stmt, while
elseclause -> else · stmt, for
elseclause -> else · stmt, if
elifclause -> else · if ( expr ) stmt, else
elifclause -> else · if ( expr ) stmt, $
elifclause -> else · if ( expr ) stmt, namespace
elifclause -> else · if ( expr ) stmt, {
elifclause -> else · if ( expr ) stmt, ID
elifclause -> else · if ( expr ) stmt, void
elifclause -> else · if ( expr ) stmt, bool
elifclause -> else · if ( expr ) stmt, int
elifclause -> else · if ( expr ) stmt, float
elifclause -> else · if ( expr ) stmt, double
elifclause -> else · if ( expr ) stmt, char
elifclause -> else · if ( expr ) stmt, string
elifclause -> else · if ( expr ) stmt, extern
elifclause -> else · if ( expr ) stmt, class
elifclause -> else · if ( expr ) stmt, (
elifclause -> else · if ( expr ) stmt, this
elifclause -> else · if ( expr ) stmt, new
elifclause -> else · if ( expr ) stmt, LITBOOL
elifclause -> else · if ( expr ) stmt, LITINT
elifclause -> else · if ( expr ) stmt, LITFLOAT
elifclause -> else · if ( expr ) stmt, LITDOUBLE
elifclause -> else · if ( expr ) stmt, LITCHAR
elifclause -> else · if ( expr ) stmt, LITSTRING
elifclause -> else · if ( expr ) stmt, null
elifclause -> else · if ( expr ) stmt, ++
elifclause -> else · if ( expr ) stmt, --
elifclause -> else · if ( expr ) stmt, break
elifclause -> else · if ( expr ) stmt, return
elifclause -> else · if ( expr ) stmt, delete
elifclause -> else · if ( expr ) stmt, while
elifclause -> else · if ( expr ) stmt, for
elifclause -> else · if ( expr ) stmt, if
stmt -> · namespaceblock, $
stmt -> · statementblock, $
stmt -> · declstmt, $
stmt -> · stmtexpr ;, $
stmt -> · break ;, $
stmt -> · return expr ;, $
stmt -> · return ;, $
stmt -> · delete expr ;, $
stmt -> · while ( expr ) stmt, $
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, $
stmt -> · if ( expr ) stmt elifclauselist elseclause, $
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, $
statementblock -> · { statements }, $
declstmt -> · type ID = expr ;, $
declstmt -> · type ID ( params ) { statements }, $
declstmt -> · extern type ID ( params ) ;, $
declstmt -> · class ID inherit { declstatements }, $
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
elseclause -> else · stmt, }
elifclause -> else · if ( expr ) stmt, }
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
elseclause -> else · stmt, &&
elseclause -> else · stmt, ||
elseclause -> else · stmt, +
elseclause -> else · stmt, -
elseclause -> else · stmt, *
elseclause -> else · stmt, /
elseclause -> else · stmt, !
elifclause -> else · if ( expr ) stmt, &&
elifclause -> else · if ( expr ) stmt, ||
elifclause -> else · if ( expr ) stmt, +
elifclause -> else · if ( expr ) stmt, -
elifclause -> else · if ( expr ) stmt, *
elifclause -> else · if ( expr ) stmt, /
elifclause -> else · if ( expr ) stmt, !
stmt -> · namespaceblock, &&
stmt -> · statementblock, &&
stmt -> · declstmt, &&
stmt -> · stmtexpr ;, &&
stmt -> · break ;, &&
stmt -> · return expr ;, &&
stmt -> · return ;, &&
stmt -> · delete expr ;, &&
stmt -> · while ( expr ) stmt, &&
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, &&
stmt -> · if ( expr ) stmt elifclauselist elseclause, &&
stmt -> · namespaceblock, ||
stmt -> · statementblock, ||
stmt -> · declstmt, ||
stmt -> · stmtexpr ;, ||
stmt -> · break ;, ||
stmt -> · return expr ;, ||
stmt -> · return ;, ||
stmt -> · delete expr ;, ||
stmt -> · while ( expr ) stmt, ||
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ||
stmt -> · if ( expr ) stmt elifclauselist elseclause, ||
stmt -> · namespaceblock, +
stmt -> · statementblock, +
stmt -> · declstmt, +
stmt -> · stmtexpr ;, +
stmt -> · break ;, +
stmt -> · return expr ;, +
stmt -> · return ;, +
stmt -> · delete expr ;, +
stmt -> · while ( expr ) stmt, +
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, +
stmt -> · if ( expr ) stmt elifclauselist elseclause, +
stmt -> · namespaceblock, -
stmt -> · statementblock, -
stmt -> · declstmt, -
stmt -> · stmtexpr ;, -
stmt -> · break ;, -
stmt -> · return expr ;, -
stmt -> · return ;, -
stmt -> · delete expr ;, -
stmt -> · while ( expr ) stmt, -
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, -
stmt -> · if ( expr ) stmt elifclauselist elseclause, -
stmt -> · namespaceblock, *
stmt -> · statementblock, *
stmt -> · declstmt, *
stmt -> · stmtexpr ;, *
stmt -> · break ;, *
stmt -> · return expr ;, *
stmt -> · return ;, *
stmt -> · delete expr ;, *
stmt -> · while ( expr ) stmt, *
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, *
stmt -> · if ( expr ) stmt elifclauselist elseclause, *
stmt -> · namespaceblock, /
stmt -> · statementblock, /
stmt -> · declstmt, /
stmt -> · stmtexpr ;, /
stmt -> · break ;, /
stmt -> · return expr ;, /
stmt -> · return ;, /
stmt -> · delete expr ;, /
stmt -> · while ( expr ) stmt, /
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, /
stmt -> · if ( expr ) stmt elifclauselist elseclause, /
stmt -> · namespaceblock, !
stmt -> · statementblock, !
stmt -> · declstmt, !
stmt -> · stmtexpr ;, !
stmt -> · break ;, !
stmt -> · return expr ;, !
stmt -> · return ;, !
stmt -> · delete expr ;, !
stmt -> · while ( expr ) stmt, !
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, !
stmt -> · if ( expr ) stmt elifclauselist elseclause, !
namespaceblock -> · namespace ID { statements }, &&
statementblock -> · { statements }, &&
declstmt -> · type ID = expr ;, &&
declstmt -> · type ID ( params ) { statements }, &&
declstmt -> · extern type ID ( params ) ;, &&
declstmt -> · class ID inherit { declstatements }, &&
namespaceblock -> · namespace ID { statements }, ||
statementblock -> · { statements }, ||
declstmt -> · type ID = expr ;, ||
declstmt -> · type ID ( params ) { statements }, ||
declstmt -> · extern type ID ( params ) ;, ||
declstmt -> · class ID inherit { declstatements }, ||
namespaceblock -> · namespace ID { statements }, +
statementblock -> · { statements }, +
declstmt -> · type ID = expr ;, +
declstmt -> · type ID ( params ) { statements }, +
declstmt -> · extern type ID ( params ) ;, +
declstmt -> · class ID inherit { declstatements }, +
namespaceblock -> · namespace ID { statements }, -
statementblock -> · { statements }, -
declstmt -> · type ID = expr ;, -
declstmt -> · type ID ( params ) { statements }, -
declstmt -> · extern type ID ( params ) ;, -
declstmt -> · class ID inherit { declstatements }, -
namespaceblock -> · namespace ID { statements }, *
statementblock -> · { statements }, *
declstmt -> · type ID = expr ;, *
declstmt -> · type ID ( params ) { statements }, *
declstmt -> · extern type ID ( params ) ;, *
declstmt -> · class ID inherit { declstatements }, *
namespaceblock -> · namespace ID { statements }, /
statementblock -> · { statements }, /
declstmt -> · type ID = expr ;, /
declstmt -> · type ID ( params ) { statements }, /
declstmt -> · extern type ID ( params ) ;, /
declstmt -> · class ID inherit { declstatements }, /
namespaceblock -> · namespace ID { statements }, !
statementblock -> · { statements }, !
declstmt -> · type ID = expr ;, !
declstmt -> · type ID ( params ) { statements }, !
declstmt -> · extern type ID ( params ) ;, !
declstmt -> · class ID inherit { declstatements }, !
elseclause -> else · stmt, else
stmt -> · namespaceblock, else
stmt -> · statementblock, else
stmt -> · declstmt, else
stmt -> · stmtexpr ;, else
stmt -> · break ;, else
stmt -> · return expr ;, else
stmt -> · return ;, else
stmt -> · delete expr ;, else
stmt -> · while ( expr ) stmt, else
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, else
stmt -> · if ( expr ) stmt elifclauselist elseclause, else
namespaceblock -> · namespace ID { statements }, else
statementblock -> · { statements }, else
declstmt -> · type ID = expr ;, else
declstmt -> · type ID ( params ) { statements }, else
declstmt -> · extern type ID ( params ) ;, else
declstmt -> · class ID inherit { declstatements }, else
***EndSet***
***EndState***
***State***
221
I_1210_1336_1379
***Set***
elifclauselist -> elifclauselist elifclause ·, else
elifclauselist -> elifclauselist elifclause ·, $
elifclauselist -> elifclauselist elifclause ·, namespace
elifclauselist -> elifclauselist elifclause ·, {
elifclauselist -> elifclauselist elifclause ·, ID
elifclauselist -> elifclauselist elifclause ·, void
elifclauselist -> elifclauselist elifclause ·, bool
elifclauselist -> elifclauselist elifclause ·, int
elifclauselist -> elifclauselist elifclause ·, float
elifclauselist -> elifclauselist elifclause ·, double
elifclauselist -> elifclauselist elifclause ·, char
elifclauselist -> elifclauselist elifclause ·, string
elifclauselist -> elifclauselist elifclause ·, extern
elifclauselist -> elifclauselist elifclause ·, class
elifclauselist -> elifclauselist elifclause ·, (
elifclauselist -> elifclauselist elifclause ·, this
elifclauselist -> elifclauselist elifclause ·, new
elifclauselist -> elifclauselist elifclause ·, LITBOOL
elifclauselist -> elifclauselist elifclause ·, LITINT
elifclauselist -> elifclauselist elifclause ·, LITFLOAT
elifclauselist -> elifclauselist elifclause ·, LITDOUBLE
elifclauselist -> elifclauselist elifclause ·, LITCHAR
elifclauselist -> elifclauselist elifclause ·, LITSTRING
elifclauselist -> elifclauselist elifclause ·, null
elifclauselist -> elifclauselist elifclause ·, ++
elifclauselist -> elifclauselist elifclause ·, --
elifclauselist -> elifclauselist elifclause ·, break
elifclauselist -> elifclauselist elifclause ·, return
elifclauselist -> elifclauselist elifclause ·, delete
elifclauselist -> elifclauselist elifclause ·, while
elifclauselist -> elifclauselist elifclause ·, for
elifclauselist -> elifclauselist elifclause ·, if
elifclauselist -> elifclauselist elifclause ·, }
elifclauselist -> elifclauselist elifclause ·, &&
elifclauselist -> elifclauselist elifclause ·, ||
elifclauselist -> elifclauselist elifclause ·, +
elifclauselist -> elifclauselist elifclause ·, -
elifclauselist -> elifclauselist elifclause ·, *
elifclauselist -> elifclauselist elifclause ·, /
elifclauselist -> elifclauselist elifclause ·, !
***EndSet***
***EndState***
***State***
222
I_1211_1337_1380_1456_1480_1486
***Set***
stmt -> if ( expr ) stmt elifclauselist elseclause ·, $
stmt -> if ( expr ) stmt elifclauselist elseclause ·, namespace
stmt -> if ( expr ) stmt elifclauselist elseclause ·, {
stmt -> if ( expr ) stmt elifclauselist elseclause ·, ID
stmt -> if ( expr ) stmt elifclauselist elseclause ·, void
stmt -> if ( expr ) stmt elifclauselist elseclause ·, bool
stmt -> if ( expr ) stmt elifclauselist elseclause ·, int
stmt -> if ( expr ) stmt elifclauselist elseclause ·, float
stmt -> if ( expr ) stmt elifclauselist elseclause ·, double
stmt -> if ( expr ) stmt elifclauselist elseclause ·, char
stmt -> if ( expr ) stmt elifclauselist elseclause ·, string
stmt -> if ( expr ) stmt elifclauselist elseclause ·, extern
stmt -> if ( expr ) stmt elifclauselist elseclause ·, class
stmt -> if ( expr ) stmt elifclauselist elseclause ·, (
stmt -> if ( expr ) stmt elifclauselist elseclause ·, this
stmt -> if ( expr ) stmt elifclauselist elseclause ·, new
stmt -> if ( expr ) stmt elifclauselist elseclause ·, LITBOOL
stmt -> if ( expr ) stmt elifclauselist elseclause ·, LITINT
stmt -> if ( expr ) stmt elifclauselist elseclause ·, LITFLOAT
stmt -> if ( expr ) stmt elifclauselist elseclause ·, LITDOUBLE
stmt -> if ( expr ) stmt elifclauselist elseclause ·, LITCHAR
stmt -> if ( expr ) stmt elifclauselist elseclause ·, LITSTRING
stmt -> if ( expr ) stmt elifclauselist elseclause ·, null
stmt -> if ( expr ) stmt elifclauselist elseclause ·, ++
stmt -> if ( expr ) stmt elifclauselist elseclause ·, --
stmt -> if ( expr ) stmt elifclauselist elseclause ·, break
stmt -> if ( expr ) stmt elifclauselist elseclause ·, return
stmt -> if ( expr ) stmt elifclauselist elseclause ·, delete
stmt -> if ( expr ) stmt elifclauselist elseclause ·, while
stmt -> if ( expr ) stmt elifclauselist elseclause ·, for
stmt -> if ( expr ) stmt elifclauselist elseclause ·, if
stmt -> if ( expr ) stmt elifclauselist elseclause ·, }
stmt -> if ( expr ) stmt elifclauselist elseclause ·, &&
stmt -> if ( expr ) stmt elifclauselist elseclause ·, ||
stmt -> if ( expr ) stmt elifclauselist elseclause ·, +
stmt -> if ( expr ) stmt elifclauselist elseclause ·, -
stmt -> if ( expr ) stmt elifclauselist elseclause ·, *
stmt -> if ( expr ) stmt elifclauselist elseclause ·, /
stmt -> if ( expr ) stmt elifclauselist elseclause ·, !
stmt -> if ( expr ) stmt elifclauselist elseclause ·, else
***EndSet***
***EndState***
***State***
223
I_1273_1340_1387_1443_1458_1482_1488
***Set***
declstmt -> type ID ( params ) { statements · }, $
declstmt -> type ID ( params ) { statements · }, namespace
declstmt -> type ID ( params ) { statements · }, {
declstmt -> type ID ( params ) { statements · }, ID
declstmt -> type ID ( params ) { statements · }, void
declstmt -> type ID ( params ) { statements · }, bool
declstmt -> type ID ( params ) { statements · }, int
declstmt -> type ID ( params ) { statements · }, float
declstmt -> type ID ( params ) { statements · }, double
declstmt -> type ID ( params ) { statements · }, char
declstmt -> type ID ( params ) { statements · }, string
declstmt -> type ID ( params ) { statements · }, extern
declstmt -> type ID ( params ) { statements · }, class
declstmt -> type ID ( params ) { statements · }, (
declstmt -> type ID ( params ) { statements · }, this
declstmt -> type ID ( params ) { statements · }, new
declstmt -> type ID ( params ) { statements · }, LITBOOL
declstmt -> type ID ( params ) { statements · }, LITINT
declstmt -> type ID ( params ) { statements · }, LITFLOAT
declstmt -> type ID ( params ) { statements · }, LITDOUBLE
declstmt -> type ID ( params ) { statements · }, LITCHAR
declstmt -> type ID ( params ) { statements · }, LITSTRING
declstmt -> type ID ( params ) { statements · }, null
declstmt -> type ID ( params ) { statements · }, ++
declstmt -> type ID ( params ) { statements · }, --
declstmt -> type ID ( params ) { statements · }, break
declstmt -> type ID ( params ) { statements · }, return
declstmt -> type ID ( params ) { statements · }, delete
declstmt -> type ID ( params ) { statements · }, while
declstmt -> type ID ( params ) { statements · }, for
declstmt -> type ID ( params ) { statements · }, if
statements -> statements · stmt, }
statements -> statements · stmt, namespace
statements -> statements · stmt, {
statements -> statements · stmt, ID
statements -> statements · stmt, void
statements -> statements · stmt, bool
statements -> statements · stmt, int
statements -> statements · stmt, float
statements -> statements · stmt, double
statements -> statements · stmt, char
statements -> statements · stmt, string
statements -> statements · stmt, extern
statements -> statements · stmt, class
statements -> statements · stmt, (
statements -> statements · stmt, this
statements -> statements · stmt, new
statements -> statements · stmt, LITBOOL
statements -> statements · stmt, LITINT
statements -> statements · stmt, LITFLOAT
statements -> statements · stmt, LITDOUBLE
statements -> statements · stmt, LITCHAR
statements -> statements · stmt, LITSTRING
statements -> statements · stmt, null
statements -> statements · stmt, ++
statements -> statements · stmt, --
statements -> statements · stmt, break
statements -> statements · stmt, return
statements -> statements · stmt, delete
statements -> statements · stmt, while
statements -> statements · stmt, for
statements -> statements · stmt, if
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
declstmt -> type ID ( params ) { statements · }, }
declstmt -> type ID ( params ) { statements · }, &&
declstmt -> type ID ( params ) { statements · }, ||
declstmt -> type ID ( params ) { statements · }, +
declstmt -> type ID ( params ) { statements · }, -
declstmt -> type ID ( params ) { statements · }, *
declstmt -> type ID ( params ) { statements · }, /
declstmt -> type ID ( params ) { statements · }, !
declstmt -> type ID ( params ) { statements · }, else
***EndSet***
***EndState***
***State***
224
I_1309_1397_1415_1472_1490_1495
***Set***
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, $
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, namespace
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, {
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, ID
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, void
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, bool
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, int
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, float
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, double
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, char
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, string
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, extern
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, class
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, (
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, this
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, new
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, LITBOOL
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, LITINT
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, LITFLOAT
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, LITDOUBLE
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, LITCHAR
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, LITSTRING
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, null
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, ++
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, --
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, break
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, return
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, delete
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, while
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, for
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, if
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, }
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, &&
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, ||
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, +
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, -
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, *
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, /
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, !
stmt -> for ( stmt bexpr ; stmtexpr ) stmt ·, else
***EndSet***
***EndState***
***State***
225
I_1318_1404_1422_1473_1491_1496
***Set***
elifclause -> else if · ( expr ) stmt, else
elifclause -> else if · ( expr ) stmt, $
elifclause -> else if · ( expr ) stmt, namespace
elifclause -> else if · ( expr ) stmt, {
elifclause -> else if · ( expr ) stmt, ID
elifclause -> else if · ( expr ) stmt, void
elifclause -> else if · ( expr ) stmt, bool
elifclause -> else if · ( expr ) stmt, int
elifclause -> else if · ( expr ) stmt, float
elifclause -> else if · ( expr ) stmt, double
elifclause -> else if · ( expr ) stmt, char
elifclause -> else if · ( expr ) stmt, string
elifclause -> else if · ( expr ) stmt, extern
elifclause -> else if · ( expr ) stmt, class
elifclause -> else if · ( expr ) stmt, (
elifclause -> else if · ( expr ) stmt, this
elifclause -> else if · ( expr ) stmt, new
elifclause -> else if · ( expr ) stmt, LITBOOL
elifclause -> else if · ( expr ) stmt, LITINT
elifclause -> else if · ( expr ) stmt, LITFLOAT
elifclause -> else if · ( expr ) stmt, LITDOUBLE
elifclause -> else if · ( expr ) stmt, LITCHAR
elifclause -> else if · ( expr ) stmt, LITSTRING
elifclause -> else if · ( expr ) stmt, null
elifclause -> else if · ( expr ) stmt, ++
elifclause -> else if · ( expr ) stmt, --
elifclause -> else if · ( expr ) stmt, break
elifclause -> else if · ( expr ) stmt, return
elifclause -> else if · ( expr ) stmt, delete
elifclause -> else if · ( expr ) stmt, while
elifclause -> else if · ( expr ) stmt, for
elifclause -> else if · ( expr ) stmt, if
stmt -> if · ( expr ) stmt elifclauselist elseclause, $
stmt -> if · ( expr ) stmt elifclauselist elseclause, namespace
stmt -> if · ( expr ) stmt elifclauselist elseclause, {
stmt -> if · ( expr ) stmt elifclauselist elseclause, ID
stmt -> if · ( expr ) stmt elifclauselist elseclause, void
stmt -> if · ( expr ) stmt elifclauselist elseclause, bool
stmt -> if · ( expr ) stmt elifclauselist elseclause, int
stmt -> if · ( expr ) stmt elifclauselist elseclause, float
stmt -> if · ( expr ) stmt elifclauselist elseclause, double
stmt -> if · ( expr ) stmt elifclauselist elseclause, char
stmt -> if · ( expr ) stmt elifclauselist elseclause, string
stmt -> if · ( expr ) stmt elifclauselist elseclause, extern
stmt -> if · ( expr ) stmt elifclauselist elseclause, class
stmt -> if · ( expr ) stmt elifclauselist elseclause, (
stmt -> if · ( expr ) stmt elifclauselist elseclause, this
stmt -> if · ( expr ) stmt elifclauselist elseclause, new
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> if · ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> if · ( expr ) stmt elifclauselist elseclause, null
stmt -> if · ( expr ) stmt elifclauselist elseclause, ++
stmt -> if · ( expr ) stmt elifclauselist elseclause, --
stmt -> if · ( expr ) stmt elifclauselist elseclause, break
stmt -> if · ( expr ) stmt elifclauselist elseclause, return
stmt -> if · ( expr ) stmt elifclauselist elseclause, delete
stmt -> if · ( expr ) stmt elifclauselist elseclause, while
stmt -> if · ( expr ) stmt elifclauselist elseclause, for
stmt -> if · ( expr ) stmt elifclauselist elseclause, if
elifclause -> else if · ( expr ) stmt, }
stmt -> if · ( expr ) stmt elifclauselist elseclause, }
elifclause -> else if · ( expr ) stmt, &&
elifclause -> else if · ( expr ) stmt, ||
elifclause -> else if · ( expr ) stmt, +
elifclause -> else if · ( expr ) stmt, -
elifclause -> else if · ( expr ) stmt, *
elifclause -> else if · ( expr ) stmt, /
elifclause -> else if · ( expr ) stmt, !
stmt -> if · ( expr ) stmt elifclauselist elseclause, &&
stmt -> if · ( expr ) stmt elifclauselist elseclause, ||
stmt -> if · ( expr ) stmt elifclauselist elseclause, +
stmt -> if · ( expr ) stmt elifclauselist elseclause, -
stmt -> if · ( expr ) stmt elifclauselist elseclause, *
stmt -> if · ( expr ) stmt elifclauselist elseclause, /
stmt -> if · ( expr ) stmt elifclauselist elseclause, !
stmt -> if · ( expr ) stmt elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
226
I_1319_1405_1423_1474_1492_1497
***Set***
elseclause -> else stmt ·, $
elseclause -> else stmt ·, namespace
elseclause -> else stmt ·, {
elseclause -> else stmt ·, ID
elseclause -> else stmt ·, void
elseclause -> else stmt ·, bool
elseclause -> else stmt ·, int
elseclause -> else stmt ·, float
elseclause -> else stmt ·, double
elseclause -> else stmt ·, char
elseclause -> else stmt ·, string
elseclause -> else stmt ·, extern
elseclause -> else stmt ·, class
elseclause -> else stmt ·, (
elseclause -> else stmt ·, this
elseclause -> else stmt ·, new
elseclause -> else stmt ·, LITBOOL
elseclause -> else stmt ·, LITINT
elseclause -> else stmt ·, LITFLOAT
elseclause -> else stmt ·, LITDOUBLE
elseclause -> else stmt ·, LITCHAR
elseclause -> else stmt ·, LITSTRING
elseclause -> else stmt ·, null
elseclause -> else stmt ·, ++
elseclause -> else stmt ·, --
elseclause -> else stmt ·, break
elseclause -> else stmt ·, return
elseclause -> else stmt ·, delete
elseclause -> else stmt ·, while
elseclause -> else stmt ·, for
elseclause -> else stmt ·, if
elseclause -> else stmt ·, }
elseclause -> else stmt ·, &&
elseclause -> else stmt ·, ||
elseclause -> else stmt ·, +
elseclause -> else stmt ·, -
elseclause -> else stmt ·, *
elseclause -> else stmt ·, /
elseclause -> else stmt ·, !
elseclause -> else stmt ·, else
***EndSet***
***EndState***
***State***
227
I_1355_1408_1426_1465_1476_1494_1499
***Set***
declstmt -> type ID ( params ) { statements } ·, $
declstmt -> type ID ( params ) { statements } ·, namespace
declstmt -> type ID ( params ) { statements } ·, {
declstmt -> type ID ( params ) { statements } ·, ID
declstmt -> type ID ( params ) { statements } ·, void
declstmt -> type ID ( params ) { statements } ·, bool
declstmt -> type ID ( params ) { statements } ·, int
declstmt -> type ID ( params ) { statements } ·, float
declstmt -> type ID ( params ) { statements } ·, double
declstmt -> type ID ( params ) { statements } ·, char
declstmt -> type ID ( params ) { statements } ·, string
declstmt -> type ID ( params ) { statements } ·, extern
declstmt -> type ID ( params ) { statements } ·, class
declstmt -> type ID ( params ) { statements } ·, (
declstmt -> type ID ( params ) { statements } ·, this
declstmt -> type ID ( params ) { statements } ·, new
declstmt -> type ID ( params ) { statements } ·, LITBOOL
declstmt -> type ID ( params ) { statements } ·, LITINT
declstmt -> type ID ( params ) { statements } ·, LITFLOAT
declstmt -> type ID ( params ) { statements } ·, LITDOUBLE
declstmt -> type ID ( params ) { statements } ·, LITCHAR
declstmt -> type ID ( params ) { statements } ·, LITSTRING
declstmt -> type ID ( params ) { statements } ·, null
declstmt -> type ID ( params ) { statements } ·, ++
declstmt -> type ID ( params ) { statements } ·, --
declstmt -> type ID ( params ) { statements } ·, break
declstmt -> type ID ( params ) { statements } ·, return
declstmt -> type ID ( params ) { statements } ·, delete
declstmt -> type ID ( params ) { statements } ·, while
declstmt -> type ID ( params ) { statements } ·, for
declstmt -> type ID ( params ) { statements } ·, if
declstmt -> type ID ( params ) { statements } ·, }
declstmt -> type ID ( params ) { statements } ·, &&
declstmt -> type ID ( params ) { statements } ·, ||
declstmt -> type ID ( params ) { statements } ·, +
declstmt -> type ID ( params ) { statements } ·, -
declstmt -> type ID ( params ) { statements } ·, *
declstmt -> type ID ( params ) { statements } ·, /
declstmt -> type ID ( params ) { statements } ·, !
declstmt -> type ID ( params ) { statements } ·, else
***EndSet***
***EndState***
***State***
228
I_1394_1439_1450_1489_1501_1502
***Set***
elifclause -> else if ( · expr ) stmt, else
elifclause -> else if ( · expr ) stmt, $
elifclause -> else if ( · expr ) stmt, namespace
elifclause -> else if ( · expr ) stmt, {
elifclause -> else if ( · expr ) stmt, ID
elifclause -> else if ( · expr ) stmt, void
elifclause -> else if ( · expr ) stmt, bool
elifclause -> else if ( · expr ) stmt, int
elifclause -> else if ( · expr ) stmt, float
elifclause -> else if ( · expr ) stmt, double
elifclause -> else if ( · expr ) stmt, char
elifclause -> else if ( · expr ) stmt, string
elifclause -> else if ( · expr ) stmt, extern
elifclause -> else if ( · expr ) stmt, class
elifclause -> else if ( · expr ) stmt, (
elifclause -> else if ( · expr ) stmt, this
elifclause -> else if ( · expr ) stmt, new
elifclause -> else if ( · expr ) stmt, LITBOOL
elifclause -> else if ( · expr ) stmt, LITINT
elifclause -> else if ( · expr ) stmt, LITFLOAT
elifclause -> else if ( · expr ) stmt, LITDOUBLE
elifclause -> else if ( · expr ) stmt, LITCHAR
elifclause -> else if ( · expr ) stmt, LITSTRING
elifclause -> else if ( · expr ) stmt, null
elifclause -> else if ( · expr ) stmt, ++
elifclause -> else if ( · expr ) stmt, --
elifclause -> else if ( · expr ) stmt, break
elifclause -> else if ( · expr ) stmt, return
elifclause -> else if ( · expr ) stmt, delete
elifclause -> else if ( · expr ) stmt, while
elifclause -> else if ( · expr ) stmt, for
elifclause -> else if ( · expr ) stmt, if
stmt -> if ( · expr ) stmt elifclauselist elseclause, $
stmt -> if ( · expr ) stmt elifclauselist elseclause, namespace
stmt -> if ( · expr ) stmt elifclauselist elseclause, {
stmt -> if ( · expr ) stmt elifclauselist elseclause, ID
stmt -> if ( · expr ) stmt elifclauselist elseclause, void
stmt -> if ( · expr ) stmt elifclauselist elseclause, bool
stmt -> if ( · expr ) stmt elifclauselist elseclause, int
stmt -> if ( · expr ) stmt elifclauselist elseclause, float
stmt -> if ( · expr ) stmt elifclauselist elseclause, double
stmt -> if ( · expr ) stmt elifclauselist elseclause, char
stmt -> if ( · expr ) stmt elifclauselist elseclause, string
stmt -> if ( · expr ) stmt elifclauselist elseclause, extern
stmt -> if ( · expr ) stmt elifclauselist elseclause, class
stmt -> if ( · expr ) stmt elifclauselist elseclause, (
stmt -> if ( · expr ) stmt elifclauselist elseclause, this
stmt -> if ( · expr ) stmt elifclauselist elseclause, new
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITINT
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> if ( · expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> if ( · expr ) stmt elifclauselist elseclause, null
stmt -> if ( · expr ) stmt elifclauselist elseclause, ++
stmt -> if ( · expr ) stmt elifclauselist elseclause, --
stmt -> if ( · expr ) stmt elifclauselist elseclause, break
stmt -> if ( · expr ) stmt elifclauselist elseclause, return
stmt -> if ( · expr ) stmt elifclauselist elseclause, delete
stmt -> if ( · expr ) stmt elifclauselist elseclause, while
stmt -> if ( · expr ) stmt elifclauselist elseclause, for
stmt -> if ( · expr ) stmt elifclauselist elseclause, if
expr -> · assign, )
expr -> · nexpr, )
assign -> · lvalue = expr, )
assign -> · lvalue += expr, )
assign -> · lvalue -= expr, )
assign -> · lvalue *= expr, )
assign -> · lvalue /= expr, )
assign -> · lvalue %= expr, )
nexpr -> · bexpr, )
nexpr -> · aexpr, )
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
bexpr -> · bexpr && bexpr, )
bexpr -> · bexpr || bexpr, )
bexpr -> · aexpr > aexpr, )
bexpr -> · aexpr < aexpr, )
bexpr -> · aexpr >= aexpr, )
bexpr -> · aexpr <= aexpr, )
bexpr -> · aexpr == aexpr, )
bexpr -> · aexpr != aexpr, )
bexpr -> · factor, )
aexpr -> · aexpr + term, )
aexpr -> · aexpr - term, )
aexpr -> · term, )
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
bexpr -> · bexpr && bexpr, &&
bexpr -> · bexpr || bexpr, &&
bexpr -> · aexpr > aexpr, &&
bexpr -> · aexpr < aexpr, &&
bexpr -> · aexpr >= aexpr, &&
bexpr -> · aexpr <= aexpr, &&
bexpr -> · aexpr == aexpr, &&
bexpr -> · aexpr != aexpr, &&
bexpr -> · factor, &&
bexpr -> · bexpr && bexpr, ||
bexpr -> · bexpr || bexpr, ||
bexpr -> · aexpr > aexpr, ||
bexpr -> · aexpr < aexpr, ||
bexpr -> · aexpr >= aexpr, ||
bexpr -> · aexpr <= aexpr, ||
bexpr -> · aexpr == aexpr, ||
bexpr -> · aexpr != aexpr, ||
bexpr -> · factor, ||
aexpr -> · aexpr + term, >
aexpr -> · aexpr - term, >
aexpr -> · term, >
aexpr -> · aexpr + term, <
aexpr -> · aexpr - term, <
aexpr -> · term, <
aexpr -> · aexpr + term, >=
aexpr -> · aexpr - term, >=
aexpr -> · term, >=
aexpr -> · aexpr + term, <=
aexpr -> · aexpr - term, <=
aexpr -> · term, <=
aexpr -> · aexpr + term, ==
aexpr -> · aexpr - term, ==
aexpr -> · term, ==
aexpr -> · aexpr + term, !=
aexpr -> · aexpr - term, !=
aexpr -> · term, !=
factor -> · incdec, )
factor -> · ! factor, )
factor -> · - factor, )
factor -> · cast, )
factor -> · primary, )
aexpr -> · aexpr + term, +
aexpr -> · aexpr - term, +
aexpr -> · term, +
aexpr -> · aexpr + term, -
aexpr -> · aexpr - term, -
aexpr -> · term, -
term -> · term * factor, )
term -> · term / factor, )
term -> · factor, )
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
factor -> · incdec, &&
factor -> · ! factor, &&
factor -> · - factor, &&
factor -> · cast, &&
factor -> · primary, &&
factor -> · incdec, ||
factor -> · ! factor, ||
factor -> · - factor, ||
factor -> · cast, ||
factor -> · primary, ||
term -> · term * factor, >
term -> · term / factor, >
term -> · factor, >
term -> · term * factor, <
term -> · term / factor, <
term -> · factor, <
term -> · term * factor, >=
term -> · term / factor, >=
term -> · factor, >=
term -> · term * factor, <=
term -> · term / factor, <=
term -> · factor, <=
term -> · term * factor, ==
term -> · term / factor, ==
term -> · factor, ==
term -> · term * factor, !=
term -> · term / factor, !=
term -> · factor, !=
incdec -> · ++ ID, )
incdec -> · -- ID, )
incdec -> · ID ++, )
incdec -> · ID --, )
cast -> · ( type ) factor, )
primary -> · ( expr ), )
primary -> · ID, )
primary -> · this, )
primary -> · memberaccess, )
primary -> · indexaccess, )
primary -> · call, )
primary -> · newobj, )
primary -> · newarr, )
primary -> · lit, )
term -> · term * factor, +
term -> · term / factor, +
term -> · factor, +
term -> · term * factor, -
term -> · term / factor, -
term -> · factor, -
term -> · term * factor, *
term -> · term / factor, *
term -> · factor, *
term -> · term * factor, /
term -> · term / factor, /
term -> · factor, /
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
incdec -> · ++ ID, &&
incdec -> · -- ID, &&
incdec -> · ID ++, &&
incdec -> · ID --, &&
cast -> · ( type ) factor, &&
primary -> · ( expr ), &&
primary -> · ID, &&
primary -> · this, &&
primary -> · memberaccess, &&
primary -> · indexaccess, &&
primary -> · call, &&
primary -> · newobj, &&
primary -> · newarr, &&
primary -> · lit, &&
incdec -> · ++ ID, ||
incdec -> · -- ID, ||
incdec -> · ID ++, ||
incdec -> · ID --, ||
cast -> · ( type ) factor, ||
primary -> · ( expr ), ||
primary -> · ID, ||
primary -> · this, ||
primary -> · memberaccess, ||
primary -> · indexaccess, ||
primary -> · call, ||
primary -> · newobj, ||
primary -> · newarr, ||
primary -> · lit, ||
factor -> · incdec, >
factor -> · ! factor, >
factor -> · - factor, >
factor -> · cast, >
factor -> · primary, >
factor -> · incdec, <
factor -> · ! factor, <
factor -> · - factor, <
factor -> · cast, <
factor -> · primary, <
factor -> · incdec, >=
factor -> · ! factor, >=
factor -> · - factor, >=
factor -> · cast, >=
factor -> · primary, >=
factor -> · incdec, <=
factor -> · ! factor, <=
factor -> · - factor, <=
factor -> · cast, <=
factor -> · primary, <=
factor -> · incdec, ==
factor -> · ! factor, ==
factor -> · - factor, ==
factor -> · cast, ==
factor -> · primary, ==
factor -> · incdec, !=
factor -> · ! factor, !=
factor -> · - factor, !=
factor -> · cast, !=
factor -> · primary, !=
memberaccess -> · primary . ID, )
indexaccess -> · idBracket, )
indexaccess -> · memberaccess [ aexpr ], )
call -> · ID ( args ), )
call -> · memberaccess ( args ), )
newobj -> · new ID ( ), )
newarr -> · new stypeBracket, )
lit -> · LITBOOL, )
lit -> · LITINT, )
lit -> · LITFLOAT, )
lit -> · LITDOUBLE, )
lit -> · LITCHAR, )
lit -> · LITSTRING, )
lit -> · null, )
factor -> · incdec, +
factor -> · ! factor, +
factor -> · - factor, +
factor -> · cast, +
factor -> · primary, +
factor -> · incdec, -
factor -> · ! factor, -
factor -> · - factor, -
factor -> · cast, -
factor -> · primary, -
factor -> · incdec, *
factor -> · ! factor, *
factor -> · - factor, *
factor -> · cast, *
factor -> · primary, *
factor -> · incdec, /
factor -> · ! factor, /
factor -> · - factor, /
factor -> · cast, /
factor -> · primary, /
idBracket -> · ID [ optidx ], .
memberaccess -> · primary . ID, (
memberaccess -> · primary . ID, &&
indexaccess -> · idBracket, &&
indexaccess -> · memberaccess [ aexpr ], &&
call -> · ID ( args ), &&
call -> · memberaccess ( args ), &&
newobj -> · new ID ( ), &&
newarr -> · new stypeBracket, &&
lit -> · LITBOOL, &&
lit -> · LITINT, &&
lit -> · LITFLOAT, &&
lit -> · LITDOUBLE, &&
lit -> · LITCHAR, &&
lit -> · LITSTRING, &&
lit -> · null, &&
memberaccess -> · primary . ID, ||
indexaccess -> · idBracket, ||
indexaccess -> · memberaccess [ aexpr ], ||
call -> · ID ( args ), ||
call -> · memberaccess ( args ), ||
newobj -> · new ID ( ), ||
newarr -> · new stypeBracket, ||
lit -> · LITBOOL, ||
lit -> · LITINT, ||
lit -> · LITFLOAT, ||
lit -> · LITDOUBLE, ||
lit -> · LITCHAR, ||
lit -> · LITSTRING, ||
lit -> · null, ||
incdec -> · ++ ID, >
incdec -> · -- ID, >
incdec -> · ID ++, >
incdec -> · ID --, >
cast -> · ( type ) factor, >
primary -> · ( expr ), >
primary -> · ID, >
primary -> · this, >
primary -> · memberaccess, >
primary -> · indexaccess, >
primary -> · call, >
primary -> · newobj, >
primary -> · newarr, >
primary -> · lit, >
incdec -> · ++ ID, <
incdec -> · -- ID, <
incdec -> · ID ++, <
incdec -> · ID --, <
cast -> · ( type ) factor, <
primary -> · ( expr ), <
primary -> · ID, <
primary -> · this, <
primary -> · memberaccess, <
primary -> · indexaccess, <
primary -> · call, <
primary -> · newobj, <
primary -> · newarr, <
primary -> · lit, <
incdec -> · ++ ID, >=
incdec -> · -- ID, >=
incdec -> · ID ++, >=
incdec -> · ID --, >=
cast -> · ( type ) factor, >=
primary -> · ( expr ), >=
primary -> · ID, >=
primary -> · this, >=
primary -> · memberaccess, >=
primary -> · indexaccess, >=
primary -> · call, >=
primary -> · newobj, >=
primary -> · newarr, >=
primary -> · lit, >=
incdec -> · ++ ID, <=
incdec -> · -- ID, <=
incdec -> · ID ++, <=
incdec -> · ID --, <=
cast -> · ( type ) factor, <=
primary -> · ( expr ), <=
primary -> · ID, <=
primary -> · this, <=
primary -> · memberaccess, <=
primary -> · indexaccess, <=
primary -> · call, <=
primary -> · newobj, <=
primary -> · newarr, <=
primary -> · lit, <=
incdec -> · ++ ID, ==
incdec -> · -- ID, ==
incdec -> · ID ++, ==
incdec -> · ID --, ==
cast -> · ( type ) factor, ==
primary -> · ( expr ), ==
primary -> · ID, ==
primary -> · this, ==
primary -> · memberaccess, ==
primary -> · indexaccess, ==
primary -> · call, ==
primary -> · newobj, ==
primary -> · newarr, ==
primary -> · lit, ==
incdec -> · ++ ID, !=
incdec -> · -- ID, !=
incdec -> · ID ++, !=
incdec -> · ID --, !=
cast -> · ( type ) factor, !=
primary -> · ( expr ), !=
primary -> · ID, !=
primary -> · this, !=
primary -> · memberaccess, !=
primary -> · indexaccess, !=
primary -> · call, !=
primary -> · newobj, !=
primary -> · newarr, !=
primary -> · lit, !=
idBracket -> · ID [ optidx ], )
incdec -> · ++ ID, +
incdec -> · -- ID, +
incdec -> · ID ++, +
incdec -> · ID --, +
cast -> · ( type ) factor, +
primary -> · ( expr ), +
primary -> · ID, +
primary -> · this, +
primary -> · memberaccess, +
primary -> · indexaccess, +
primary -> · call, +
primary -> · newobj, +
primary -> · newarr, +
primary -> · lit, +
incdec -> · ++ ID, -
incdec -> · -- ID, -
incdec -> · ID ++, -
incdec -> · ID --, -
cast -> · ( type ) factor, -
primary -> · ( expr ), -
primary -> · ID, -
primary -> · this, -
primary -> · memberaccess, -
primary -> · indexaccess, -
primary -> · call, -
primary -> · newobj, -
primary -> · newarr, -
primary -> · lit, -
incdec -> · ++ ID, *
incdec -> · -- ID, *
incdec -> · ID ++, *
incdec -> · ID --, *
cast -> · ( type ) factor, *
primary -> · ( expr ), *
primary -> · ID, *
primary -> · this, *
primary -> · memberaccess, *
primary -> · indexaccess, *
primary -> · call, *
primary -> · newobj, *
primary -> · newarr, *
primary -> · lit, *
incdec -> · ++ ID, /
incdec -> · -- ID, /
incdec -> · ID ++, /
incdec -> · ID --, /
cast -> · ( type ) factor, /
primary -> · ( expr ), /
primary -> · ID, /
primary -> · this, /
primary -> · memberaccess, /
primary -> · indexaccess, /
primary -> · call, /
primary -> · newobj, /
primary -> · newarr, /
primary -> · lit, /
idBracket -> · ID [ optidx ], &&
idBracket -> · ID [ optidx ], ||
memberaccess -> · primary . ID, >
indexaccess -> · idBracket, >
indexaccess -> · memberaccess [ aexpr ], >
call -> · ID ( args ), >
call -> · memberaccess ( args ), >
newobj -> · new ID ( ), >
newarr -> · new stypeBracket, >
lit -> · LITBOOL, >
lit -> · LITINT, >
lit -> · LITFLOAT, >
lit -> · LITDOUBLE, >
lit -> · LITCHAR, >
lit -> · LITSTRING, >
lit -> · null, >
memberaccess -> · primary . ID, <
indexaccess -> · idBracket, <
indexaccess -> · memberaccess [ aexpr ], <
call -> · ID ( args ), <
call -> · memberaccess ( args ), <
newobj -> · new ID ( ), <
newarr -> · new stypeBracket, <
lit -> · LITBOOL, <
lit -> · LITINT, <
lit -> · LITFLOAT, <
lit -> · LITDOUBLE, <
lit -> · LITCHAR, <
lit -> · LITSTRING, <
lit -> · null, <
memberaccess -> · primary . ID, >=
indexaccess -> · idBracket, >=
indexaccess -> · memberaccess [ aexpr ], >=
call -> · ID ( args ), >=
call -> · memberaccess ( args ), >=
newobj -> · new ID ( ), >=
newarr -> · new stypeBracket, >=
lit -> · LITBOOL, >=
lit -> · LITINT, >=
lit -> · LITFLOAT, >=
lit -> · LITDOUBLE, >=
lit -> · LITCHAR, >=
lit -> · LITSTRING, >=
lit -> · null, >=
memberaccess -> · primary . ID, <=
indexaccess -> · idBracket, <=
indexaccess -> · memberaccess [ aexpr ], <=
call -> · ID ( args ), <=
call -> · memberaccess ( args ), <=
newobj -> · new ID ( ), <=
newarr -> · new stypeBracket, <=
lit -> · LITBOOL, <=
lit -> · LITINT, <=
lit -> · LITFLOAT, <=
lit -> · LITDOUBLE, <=
lit -> · LITCHAR, <=
lit -> · LITSTRING, <=
lit -> · null, <=
memberaccess -> · primary . ID, ==
indexaccess -> · idBracket, ==
indexaccess -> · memberaccess [ aexpr ], ==
call -> · ID ( args ), ==
call -> · memberaccess ( args ), ==
newobj -> · new ID ( ), ==
newarr -> · new stypeBracket, ==
lit -> · LITBOOL, ==
lit -> · LITINT, ==
lit -> · LITFLOAT, ==
lit -> · LITDOUBLE, ==
lit -> · LITCHAR, ==
lit -> · LITSTRING, ==
lit -> · null, ==
memberaccess -> · primary . ID, !=
indexaccess -> · idBracket, !=
indexaccess -> · memberaccess [ aexpr ], !=
call -> · ID ( args ), !=
call -> · memberaccess ( args ), !=
newobj -> · new ID ( ), !=
newarr -> · new stypeBracket, !=
lit -> · LITBOOL, !=
lit -> · LITINT, !=
lit -> · LITFLOAT, !=
lit -> · LITDOUBLE, !=
lit -> · LITCHAR, !=
lit -> · LITSTRING, !=
lit -> · null, !=
memberaccess -> · primary . ID, +
indexaccess -> · idBracket, +
indexaccess -> · memberaccess [ aexpr ], +
call -> · ID ( args ), +
call -> · memberaccess ( args ), +
newobj -> · new ID ( ), +
newarr -> · new stypeBracket, +
lit -> · LITBOOL, +
lit -> · LITINT, +
lit -> · LITFLOAT, +
lit -> · LITDOUBLE, +
lit -> · LITCHAR, +
lit -> · LITSTRING, +
lit -> · null, +
memberaccess -> · primary . ID, -
indexaccess -> · idBracket, -
indexaccess -> · memberaccess [ aexpr ], -
call -> · ID ( args ), -
call -> · memberaccess ( args ), -
newobj -> · new ID ( ), -
newarr -> · new stypeBracket, -
lit -> · LITBOOL, -
lit -> · LITINT, -
lit -> · LITFLOAT, -
lit -> · LITDOUBLE, -
lit -> · LITCHAR, -
lit -> · LITSTRING, -
lit -> · null, -
memberaccess -> · primary . ID, *
indexaccess -> · idBracket, *
indexaccess -> · memberaccess [ aexpr ], *
call -> · ID ( args ), *
call -> · memberaccess ( args ), *
newobj -> · new ID ( ), *
newarr -> · new stypeBracket, *
lit -> · LITBOOL, *
lit -> · LITINT, *
lit -> · LITFLOAT, *
lit -> · LITDOUBLE, *
lit -> · LITCHAR, *
lit -> · LITSTRING, *
lit -> · null, *
memberaccess -> · primary . ID, /
indexaccess -> · idBracket, /
indexaccess -> · memberaccess [ aexpr ], /
call -> · ID ( args ), /
call -> · memberaccess ( args ), /
newobj -> · new ID ( ), /
newarr -> · new stypeBracket, /
lit -> · LITBOOL, /
lit -> · LITINT, /
lit -> · LITFLOAT, /
lit -> · LITDOUBLE, /
lit -> · LITCHAR, /
lit -> · LITSTRING, /
lit -> · null, /
idBracket -> · ID [ optidx ], >
idBracket -> · ID [ optidx ], <
idBracket -> · ID [ optidx ], >=
idBracket -> · ID [ optidx ], <=
idBracket -> · ID [ optidx ], ==
idBracket -> · ID [ optidx ], !=
idBracket -> · ID [ optidx ], +
idBracket -> · ID [ optidx ], -
idBracket -> · ID [ optidx ], *
idBracket -> · ID [ optidx ], /
elifclause -> else if ( · expr ) stmt, }
stmt -> if ( · expr ) stmt elifclauselist elseclause, }
elifclause -> else if ( · expr ) stmt, &&
elifclause -> else if ( · expr ) stmt, ||
elifclause -> else if ( · expr ) stmt, +
elifclause -> else if ( · expr ) stmt, -
elifclause -> else if ( · expr ) stmt, *
elifclause -> else if ( · expr ) stmt, /
elifclause -> else if ( · expr ) stmt, !
stmt -> if ( · expr ) stmt elifclauselist elseclause, &&
stmt -> if ( · expr ) stmt elifclauselist elseclause, ||
stmt -> if ( · expr ) stmt elifclauselist elseclause, +
stmt -> if ( · expr ) stmt elifclauselist elseclause, -
stmt -> if ( · expr ) stmt elifclauselist elseclause, *
stmt -> if ( · expr ) stmt elifclauselist elseclause, /
stmt -> if ( · expr ) stmt elifclauselist elseclause, !
stmt -> if ( · expr ) stmt elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
229
I_1431_1463_1470_1500_1504_1505
***Set***
elifclause -> else if ( expr · ) stmt, else
elifclause -> else if ( expr · ) stmt, $
elifclause -> else if ( expr · ) stmt, namespace
elifclause -> else if ( expr · ) stmt, {
elifclause -> else if ( expr · ) stmt, ID
elifclause -> else if ( expr · ) stmt, void
elifclause -> else if ( expr · ) stmt, bool
elifclause -> else if ( expr · ) stmt, int
elifclause -> else if ( expr · ) stmt, float
elifclause -> else if ( expr · ) stmt, double
elifclause -> else if ( expr · ) stmt, char
elifclause -> else if ( expr · ) stmt, string
elifclause -> else if ( expr · ) stmt, extern
elifclause -> else if ( expr · ) stmt, class
elifclause -> else if ( expr · ) stmt, (
elifclause -> else if ( expr · ) stmt, this
elifclause -> else if ( expr · ) stmt, new
elifclause -> else if ( expr · ) stmt, LITBOOL
elifclause -> else if ( expr · ) stmt, LITINT
elifclause -> else if ( expr · ) stmt, LITFLOAT
elifclause -> else if ( expr · ) stmt, LITDOUBLE
elifclause -> else if ( expr · ) stmt, LITCHAR
elifclause -> else if ( expr · ) stmt, LITSTRING
elifclause -> else if ( expr · ) stmt, null
elifclause -> else if ( expr · ) stmt, ++
elifclause -> else if ( expr · ) stmt, --
elifclause -> else if ( expr · ) stmt, break
elifclause -> else if ( expr · ) stmt, return
elifclause -> else if ( expr · ) stmt, delete
elifclause -> else if ( expr · ) stmt, while
elifclause -> else if ( expr · ) stmt, for
elifclause -> else if ( expr · ) stmt, if
stmt -> if ( expr · ) stmt elifclauselist elseclause, $
stmt -> if ( expr · ) stmt elifclauselist elseclause, namespace
stmt -> if ( expr · ) stmt elifclauselist elseclause, {
stmt -> if ( expr · ) stmt elifclauselist elseclause, ID
stmt -> if ( expr · ) stmt elifclauselist elseclause, void
stmt -> if ( expr · ) stmt elifclauselist elseclause, bool
stmt -> if ( expr · ) stmt elifclauselist elseclause, int
stmt -> if ( expr · ) stmt elifclauselist elseclause, float
stmt -> if ( expr · ) stmt elifclauselist elseclause, double
stmt -> if ( expr · ) stmt elifclauselist elseclause, char
stmt -> if ( expr · ) stmt elifclauselist elseclause, string
stmt -> if ( expr · ) stmt elifclauselist elseclause, extern
stmt -> if ( expr · ) stmt elifclauselist elseclause, class
stmt -> if ( expr · ) stmt elifclauselist elseclause, (
stmt -> if ( expr · ) stmt elifclauselist elseclause, this
stmt -> if ( expr · ) stmt elifclauselist elseclause, new
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITBOOL
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITINT
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITFLOAT
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITCHAR
stmt -> if ( expr · ) stmt elifclauselist elseclause, LITSTRING
stmt -> if ( expr · ) stmt elifclauselist elseclause, null
stmt -> if ( expr · ) stmt elifclauselist elseclause, ++
stmt -> if ( expr · ) stmt elifclauselist elseclause, --
stmt -> if ( expr · ) stmt elifclauselist elseclause, break
stmt -> if ( expr · ) stmt elifclauselist elseclause, return
stmt -> if ( expr · ) stmt elifclauselist elseclause, delete
stmt -> if ( expr · ) stmt elifclauselist elseclause, while
stmt -> if ( expr · ) stmt elifclauselist elseclause, for
stmt -> if ( expr · ) stmt elifclauselist elseclause, if
elifclause -> else if ( expr · ) stmt, }
stmt -> if ( expr · ) stmt elifclauselist elseclause, }
elifclause -> else if ( expr · ) stmt, &&
elifclause -> else if ( expr · ) stmt, ||
elifclause -> else if ( expr · ) stmt, +
elifclause -> else if ( expr · ) stmt, -
elifclause -> else if ( expr · ) stmt, *
elifclause -> else if ( expr · ) stmt, /
elifclause -> else if ( expr · ) stmt, !
stmt -> if ( expr · ) stmt elifclauselist elseclause, &&
stmt -> if ( expr · ) stmt elifclauselist elseclause, ||
stmt -> if ( expr · ) stmt elifclauselist elseclause, +
stmt -> if ( expr · ) stmt elifclauselist elseclause, -
stmt -> if ( expr · ) stmt elifclauselist elseclause, *
stmt -> if ( expr · ) stmt elifclauselist elseclause, /
stmt -> if ( expr · ) stmt elifclauselist elseclause, !
stmt -> if ( expr · ) stmt elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
230
I_1457_1481_1487_1503_1507_1508
***Set***
elifclause -> else if ( expr ) · stmt, else
elifclause -> else if ( expr ) · stmt, $
elifclause -> else if ( expr ) · stmt, namespace
elifclause -> else if ( expr ) · stmt, {
elifclause -> else if ( expr ) · stmt, ID
elifclause -> else if ( expr ) · stmt, void
elifclause -> else if ( expr ) · stmt, bool
elifclause -> else if ( expr ) · stmt, int
elifclause -> else if ( expr ) · stmt, float
elifclause -> else if ( expr ) · stmt, double
elifclause -> else if ( expr ) · stmt, char
elifclause -> else if ( expr ) · stmt, string
elifclause -> else if ( expr ) · stmt, extern
elifclause -> else if ( expr ) · stmt, class
elifclause -> else if ( expr ) · stmt, (
elifclause -> else if ( expr ) · stmt, this
elifclause -> else if ( expr ) · stmt, new
elifclause -> else if ( expr ) · stmt, LITBOOL
elifclause -> else if ( expr ) · stmt, LITINT
elifclause -> else if ( expr ) · stmt, LITFLOAT
elifclause -> else if ( expr ) · stmt, LITDOUBLE
elifclause -> else if ( expr ) · stmt, LITCHAR
elifclause -> else if ( expr ) · stmt, LITSTRING
elifclause -> else if ( expr ) · stmt, null
elifclause -> else if ( expr ) · stmt, ++
elifclause -> else if ( expr ) · stmt, --
elifclause -> else if ( expr ) · stmt, break
elifclause -> else if ( expr ) · stmt, return
elifclause -> else if ( expr ) · stmt, delete
elifclause -> else if ( expr ) · stmt, while
elifclause -> else if ( expr ) · stmt, for
elifclause -> else if ( expr ) · stmt, if
stmt -> if ( expr ) · stmt elifclauselist elseclause, $
stmt -> if ( expr ) · stmt elifclauselist elseclause, namespace
stmt -> if ( expr ) · stmt elifclauselist elseclause, {
stmt -> if ( expr ) · stmt elifclauselist elseclause, ID
stmt -> if ( expr ) · stmt elifclauselist elseclause, void
stmt -> if ( expr ) · stmt elifclauselist elseclause, bool
stmt -> if ( expr ) · stmt elifclauselist elseclause, int
stmt -> if ( expr ) · stmt elifclauselist elseclause, float
stmt -> if ( expr ) · stmt elifclauselist elseclause, double
stmt -> if ( expr ) · stmt elifclauselist elseclause, char
stmt -> if ( expr ) · stmt elifclauselist elseclause, string
stmt -> if ( expr ) · stmt elifclauselist elseclause, extern
stmt -> if ( expr ) · stmt elifclauselist elseclause, class
stmt -> if ( expr ) · stmt elifclauselist elseclause, (
stmt -> if ( expr ) · stmt elifclauselist elseclause, this
stmt -> if ( expr ) · stmt elifclauselist elseclause, new
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITBOOL
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITINT
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITFLOAT
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITDOUBLE
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITCHAR
stmt -> if ( expr ) · stmt elifclauselist elseclause, LITSTRING
stmt -> if ( expr ) · stmt elifclauselist elseclause, null
stmt -> if ( expr ) · stmt elifclauselist elseclause, ++
stmt -> if ( expr ) · stmt elifclauselist elseclause, --
stmt -> if ( expr ) · stmt elifclauselist elseclause, break
stmt -> if ( expr ) · stmt elifclauselist elseclause, return
stmt -> if ( expr ) · stmt elifclauselist elseclause, delete
stmt -> if ( expr ) · stmt elifclauselist elseclause, while
stmt -> if ( expr ) · stmt elifclauselist elseclause, for
stmt -> if ( expr ) · stmt elifclauselist elseclause, if
stmt -> · namespaceblock, else
stmt -> · statementblock, else
stmt -> · declstmt, else
stmt -> · stmtexpr ;, else
stmt -> · break ;, else
stmt -> · return expr ;, else
stmt -> · return ;, else
stmt -> · delete expr ;, else
stmt -> · while ( expr ) stmt, else
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, else
stmt -> · if ( expr ) stmt elifclauselist elseclause, else
stmt -> · namespaceblock, $
stmt -> · statementblock, $
stmt -> · declstmt, $
stmt -> · stmtexpr ;, $
stmt -> · break ;, $
stmt -> · return expr ;, $
stmt -> · return ;, $
stmt -> · delete expr ;, $
stmt -> · while ( expr ) stmt, $
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, $
stmt -> · if ( expr ) stmt elifclauselist elseclause, $
stmt -> · namespaceblock, namespace
stmt -> · statementblock, namespace
stmt -> · declstmt, namespace
stmt -> · stmtexpr ;, namespace
stmt -> · break ;, namespace
stmt -> · return expr ;, namespace
stmt -> · return ;, namespace
stmt -> · delete expr ;, namespace
stmt -> · while ( expr ) stmt, namespace
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, namespace
stmt -> · if ( expr ) stmt elifclauselist elseclause, namespace
stmt -> · namespaceblock, {
stmt -> · statementblock, {
stmt -> · declstmt, {
stmt -> · stmtexpr ;, {
stmt -> · break ;, {
stmt -> · return expr ;, {
stmt -> · return ;, {
stmt -> · delete expr ;, {
stmt -> · while ( expr ) stmt, {
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, {
stmt -> · if ( expr ) stmt elifclauselist elseclause, {
stmt -> · namespaceblock, ID
stmt -> · statementblock, ID
stmt -> · declstmt, ID
stmt -> · stmtexpr ;, ID
stmt -> · break ;, ID
stmt -> · return expr ;, ID
stmt -> · return ;, ID
stmt -> · delete expr ;, ID
stmt -> · while ( expr ) stmt, ID
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ID
stmt -> · if ( expr ) stmt elifclauselist elseclause, ID
stmt -> · namespaceblock, void
stmt -> · statementblock, void
stmt -> · declstmt, void
stmt -> · stmtexpr ;, void
stmt -> · break ;, void
stmt -> · return expr ;, void
stmt -> · return ;, void
stmt -> · delete expr ;, void
stmt -> · while ( expr ) stmt, void
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, void
stmt -> · if ( expr ) stmt elifclauselist elseclause, void
stmt -> · namespaceblock, bool
stmt -> · statementblock, bool
stmt -> · declstmt, bool
stmt -> · stmtexpr ;, bool
stmt -> · break ;, bool
stmt -> · return expr ;, bool
stmt -> · return ;, bool
stmt -> · delete expr ;, bool
stmt -> · while ( expr ) stmt, bool
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, bool
stmt -> · if ( expr ) stmt elifclauselist elseclause, bool
stmt -> · namespaceblock, int
stmt -> · statementblock, int
stmt -> · declstmt, int
stmt -> · stmtexpr ;, int
stmt -> · break ;, int
stmt -> · return expr ;, int
stmt -> · return ;, int
stmt -> · delete expr ;, int
stmt -> · while ( expr ) stmt, int
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, int
stmt -> · if ( expr ) stmt elifclauselist elseclause, int
stmt -> · namespaceblock, float
stmt -> · statementblock, float
stmt -> · declstmt, float
stmt -> · stmtexpr ;, float
stmt -> · break ;, float
stmt -> · return expr ;, float
stmt -> · return ;, float
stmt -> · delete expr ;, float
stmt -> · while ( expr ) stmt, float
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, float
stmt -> · if ( expr ) stmt elifclauselist elseclause, float
stmt -> · namespaceblock, double
stmt -> · statementblock, double
stmt -> · declstmt, double
stmt -> · stmtexpr ;, double
stmt -> · break ;, double
stmt -> · return expr ;, double
stmt -> · return ;, double
stmt -> · delete expr ;, double
stmt -> · while ( expr ) stmt, double
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, double
stmt -> · if ( expr ) stmt elifclauselist elseclause, double
stmt -> · namespaceblock, char
stmt -> · statementblock, char
stmt -> · declstmt, char
stmt -> · stmtexpr ;, char
stmt -> · break ;, char
stmt -> · return expr ;, char
stmt -> · return ;, char
stmt -> · delete expr ;, char
stmt -> · while ( expr ) stmt, char
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, char
stmt -> · if ( expr ) stmt elifclauselist elseclause, char
stmt -> · namespaceblock, string
stmt -> · statementblock, string
stmt -> · declstmt, string
stmt -> · stmtexpr ;, string
stmt -> · break ;, string
stmt -> · return expr ;, string
stmt -> · return ;, string
stmt -> · delete expr ;, string
stmt -> · while ( expr ) stmt, string
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, string
stmt -> · if ( expr ) stmt elifclauselist elseclause, string
stmt -> · namespaceblock, extern
stmt -> · statementblock, extern
stmt -> · declstmt, extern
stmt -> · stmtexpr ;, extern
stmt -> · break ;, extern
stmt -> · return expr ;, extern
stmt -> · return ;, extern
stmt -> · delete expr ;, extern
stmt -> · while ( expr ) stmt, extern
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, extern
stmt -> · if ( expr ) stmt elifclauselist elseclause, extern
stmt -> · namespaceblock, class
stmt -> · statementblock, class
stmt -> · declstmt, class
stmt -> · stmtexpr ;, class
stmt -> · break ;, class
stmt -> · return expr ;, class
stmt -> · return ;, class
stmt -> · delete expr ;, class
stmt -> · while ( expr ) stmt, class
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, class
stmt -> · if ( expr ) stmt elifclauselist elseclause, class
stmt -> · namespaceblock, (
stmt -> · statementblock, (
stmt -> · declstmt, (
stmt -> · stmtexpr ;, (
stmt -> · break ;, (
stmt -> · return expr ;, (
stmt -> · return ;, (
stmt -> · delete expr ;, (
stmt -> · while ( expr ) stmt, (
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, (
stmt -> · if ( expr ) stmt elifclauselist elseclause, (
stmt -> · namespaceblock, this
stmt -> · statementblock, this
stmt -> · declstmt, this
stmt -> · stmtexpr ;, this
stmt -> · break ;, this
stmt -> · return expr ;, this
stmt -> · return ;, this
stmt -> · delete expr ;, this
stmt -> · while ( expr ) stmt, this
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, this
stmt -> · if ( expr ) stmt elifclauselist elseclause, this
stmt -> · namespaceblock, new
stmt -> · statementblock, new
stmt -> · declstmt, new
stmt -> · stmtexpr ;, new
stmt -> · break ;, new
stmt -> · return expr ;, new
stmt -> · return ;, new
stmt -> · delete expr ;, new
stmt -> · while ( expr ) stmt, new
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, new
stmt -> · if ( expr ) stmt elifclauselist elseclause, new
stmt -> · namespaceblock, LITBOOL
stmt -> · statementblock, LITBOOL
stmt -> · declstmt, LITBOOL
stmt -> · stmtexpr ;, LITBOOL
stmt -> · break ;, LITBOOL
stmt -> · return expr ;, LITBOOL
stmt -> · return ;, LITBOOL
stmt -> · delete expr ;, LITBOOL
stmt -> · while ( expr ) stmt, LITBOOL
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITBOOL
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITBOOL
stmt -> · namespaceblock, LITINT
stmt -> · statementblock, LITINT
stmt -> · declstmt, LITINT
stmt -> · stmtexpr ;, LITINT
stmt -> · break ;, LITINT
stmt -> · return expr ;, LITINT
stmt -> · return ;, LITINT
stmt -> · delete expr ;, LITINT
stmt -> · while ( expr ) stmt, LITINT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITINT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITINT
stmt -> · namespaceblock, LITFLOAT
stmt -> · statementblock, LITFLOAT
stmt -> · declstmt, LITFLOAT
stmt -> · stmtexpr ;, LITFLOAT
stmt -> · break ;, LITFLOAT
stmt -> · return expr ;, LITFLOAT
stmt -> · return ;, LITFLOAT
stmt -> · delete expr ;, LITFLOAT
stmt -> · while ( expr ) stmt, LITFLOAT
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITFLOAT
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITFLOAT
stmt -> · namespaceblock, LITDOUBLE
stmt -> · statementblock, LITDOUBLE
stmt -> · declstmt, LITDOUBLE
stmt -> · stmtexpr ;, LITDOUBLE
stmt -> · break ;, LITDOUBLE
stmt -> · return expr ;, LITDOUBLE
stmt -> · return ;, LITDOUBLE
stmt -> · delete expr ;, LITDOUBLE
stmt -> · while ( expr ) stmt, LITDOUBLE
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITDOUBLE
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITDOUBLE
stmt -> · namespaceblock, LITCHAR
stmt -> · statementblock, LITCHAR
stmt -> · declstmt, LITCHAR
stmt -> · stmtexpr ;, LITCHAR
stmt -> · break ;, LITCHAR
stmt -> · return expr ;, LITCHAR
stmt -> · return ;, LITCHAR
stmt -> · delete expr ;, LITCHAR
stmt -> · while ( expr ) stmt, LITCHAR
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITCHAR
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITCHAR
stmt -> · namespaceblock, LITSTRING
stmt -> · statementblock, LITSTRING
stmt -> · declstmt, LITSTRING
stmt -> · stmtexpr ;, LITSTRING
stmt -> · break ;, LITSTRING
stmt -> · return expr ;, LITSTRING
stmt -> · return ;, LITSTRING
stmt -> · delete expr ;, LITSTRING
stmt -> · while ( expr ) stmt, LITSTRING
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, LITSTRING
stmt -> · if ( expr ) stmt elifclauselist elseclause, LITSTRING
stmt -> · namespaceblock, null
stmt -> · statementblock, null
stmt -> · declstmt, null
stmt -> · stmtexpr ;, null
stmt -> · break ;, null
stmt -> · return expr ;, null
stmt -> · return ;, null
stmt -> · delete expr ;, null
stmt -> · while ( expr ) stmt, null
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, null
stmt -> · if ( expr ) stmt elifclauselist elseclause, null
stmt -> · namespaceblock, ++
stmt -> · statementblock, ++
stmt -> · declstmt, ++
stmt -> · stmtexpr ;, ++
stmt -> · break ;, ++
stmt -> · return expr ;, ++
stmt -> · return ;, ++
stmt -> · delete expr ;, ++
stmt -> · while ( expr ) stmt, ++
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ++
stmt -> · if ( expr ) stmt elifclauselist elseclause, ++
stmt -> · namespaceblock, --
stmt -> · statementblock, --
stmt -> · declstmt, --
stmt -> · stmtexpr ;, --
stmt -> · break ;, --
stmt -> · return expr ;, --
stmt -> · return ;, --
stmt -> · delete expr ;, --
stmt -> · while ( expr ) stmt, --
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, --
stmt -> · if ( expr ) stmt elifclauselist elseclause, --
stmt -> · namespaceblock, break
stmt -> · statementblock, break
stmt -> · declstmt, break
stmt -> · stmtexpr ;, break
stmt -> · break ;, break
stmt -> · return expr ;, break
stmt -> · return ;, break
stmt -> · delete expr ;, break
stmt -> · while ( expr ) stmt, break
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, break
stmt -> · if ( expr ) stmt elifclauselist elseclause, break
stmt -> · namespaceblock, return
stmt -> · statementblock, return
stmt -> · declstmt, return
stmt -> · stmtexpr ;, return
stmt -> · break ;, return
stmt -> · return expr ;, return
stmt -> · return ;, return
stmt -> · delete expr ;, return
stmt -> · while ( expr ) stmt, return
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, return
stmt -> · if ( expr ) stmt elifclauselist elseclause, return
stmt -> · namespaceblock, delete
stmt -> · statementblock, delete
stmt -> · declstmt, delete
stmt -> · stmtexpr ;, delete
stmt -> · break ;, delete
stmt -> · return expr ;, delete
stmt -> · return ;, delete
stmt -> · delete expr ;, delete
stmt -> · while ( expr ) stmt, delete
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, delete
stmt -> · if ( expr ) stmt elifclauselist elseclause, delete
stmt -> · namespaceblock, while
stmt -> · statementblock, while
stmt -> · declstmt, while
stmt -> · stmtexpr ;, while
stmt -> · break ;, while
stmt -> · return expr ;, while
stmt -> · return ;, while
stmt -> · delete expr ;, while
stmt -> · while ( expr ) stmt, while
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, while
stmt -> · if ( expr ) stmt elifclauselist elseclause, while
stmt -> · namespaceblock, for
stmt -> · statementblock, for
stmt -> · declstmt, for
stmt -> · stmtexpr ;, for
stmt -> · break ;, for
stmt -> · return expr ;, for
stmt -> · return ;, for
stmt -> · delete expr ;, for
stmt -> · while ( expr ) stmt, for
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, for
stmt -> · if ( expr ) stmt elifclauselist elseclause, for
stmt -> · namespaceblock, if
stmt -> · statementblock, if
stmt -> · declstmt, if
stmt -> · stmtexpr ;, if
stmt -> · break ;, if
stmt -> · return expr ;, if
stmt -> · return ;, if
stmt -> · delete expr ;, if
stmt -> · while ( expr ) stmt, if
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, if
stmt -> · if ( expr ) stmt elifclauselist elseclause, if
namespaceblock -> · namespace ID { statements }, else
statementblock -> · { statements }, else
declstmt -> · type ID = expr ;, else
declstmt -> · type ID ( params ) { statements }, else
declstmt -> · extern type ID ( params ) ;, else
declstmt -> · class ID inherit { declstatements }, else
stmtexpr -> · assign, ;
stmtexpr -> · call, ;
stmtexpr -> · incdec, ;
stmtexpr -> · newobj, ;
namespaceblock -> · namespace ID { statements }, $
statementblock -> · { statements }, $
declstmt -> · type ID = expr ;, $
declstmt -> · type ID ( params ) { statements }, $
declstmt -> · extern type ID ( params ) ;, $
declstmt -> · class ID inherit { declstatements }, $
namespaceblock -> · namespace ID { statements }, namespace
statementblock -> · { statements }, namespace
declstmt -> · type ID = expr ;, namespace
declstmt -> · type ID ( params ) { statements }, namespace
declstmt -> · extern type ID ( params ) ;, namespace
declstmt -> · class ID inherit { declstatements }, namespace
namespaceblock -> · namespace ID { statements }, {
statementblock -> · { statements }, {
declstmt -> · type ID = expr ;, {
declstmt -> · type ID ( params ) { statements }, {
declstmt -> · extern type ID ( params ) ;, {
declstmt -> · class ID inherit { declstatements }, {
namespaceblock -> · namespace ID { statements }, ID
statementblock -> · { statements }, ID
declstmt -> · type ID = expr ;, ID
declstmt -> · type ID ( params ) { statements }, ID
declstmt -> · extern type ID ( params ) ;, ID
declstmt -> · class ID inherit { declstatements }, ID
namespaceblock -> · namespace ID { statements }, void
statementblock -> · { statements }, void
declstmt -> · type ID = expr ;, void
declstmt -> · type ID ( params ) { statements }, void
declstmt -> · extern type ID ( params ) ;, void
declstmt -> · class ID inherit { declstatements }, void
namespaceblock -> · namespace ID { statements }, bool
statementblock -> · { statements }, bool
declstmt -> · type ID = expr ;, bool
declstmt -> · type ID ( params ) { statements }, bool
declstmt -> · extern type ID ( params ) ;, bool
declstmt -> · class ID inherit { declstatements }, bool
namespaceblock -> · namespace ID { statements }, int
statementblock -> · { statements }, int
declstmt -> · type ID = expr ;, int
declstmt -> · type ID ( params ) { statements }, int
declstmt -> · extern type ID ( params ) ;, int
declstmt -> · class ID inherit { declstatements }, int
namespaceblock -> · namespace ID { statements }, float
statementblock -> · { statements }, float
declstmt -> · type ID = expr ;, float
declstmt -> · type ID ( params ) { statements }, float
declstmt -> · extern type ID ( params ) ;, float
declstmt -> · class ID inherit { declstatements }, float
namespaceblock -> · namespace ID { statements }, double
statementblock -> · { statements }, double
declstmt -> · type ID = expr ;, double
declstmt -> · type ID ( params ) { statements }, double
declstmt -> · extern type ID ( params ) ;, double
declstmt -> · class ID inherit { declstatements }, double
namespaceblock -> · namespace ID { statements }, char
statementblock -> · { statements }, char
declstmt -> · type ID = expr ;, char
declstmt -> · type ID ( params ) { statements }, char
declstmt -> · extern type ID ( params ) ;, char
declstmt -> · class ID inherit { declstatements }, char
namespaceblock -> · namespace ID { statements }, string
statementblock -> · { statements }, string
declstmt -> · type ID = expr ;, string
declstmt -> · type ID ( params ) { statements }, string
declstmt -> · extern type ID ( params ) ;, string
declstmt -> · class ID inherit { declstatements }, string
namespaceblock -> · namespace ID { statements }, extern
statementblock -> · { statements }, extern
declstmt -> · type ID = expr ;, extern
declstmt -> · type ID ( params ) { statements }, extern
declstmt -> · extern type ID ( params ) ;, extern
declstmt -> · class ID inherit { declstatements }, extern
namespaceblock -> · namespace ID { statements }, class
statementblock -> · { statements }, class
declstmt -> · type ID = expr ;, class
declstmt -> · type ID ( params ) { statements }, class
declstmt -> · extern type ID ( params ) ;, class
declstmt -> · class ID inherit { declstatements }, class
namespaceblock -> · namespace ID { statements }, (
statementblock -> · { statements }, (
declstmt -> · type ID = expr ;, (
declstmt -> · type ID ( params ) { statements }, (
declstmt -> · extern type ID ( params ) ;, (
declstmt -> · class ID inherit { declstatements }, (
namespaceblock -> · namespace ID { statements }, this
statementblock -> · { statements }, this
declstmt -> · type ID = expr ;, this
declstmt -> · type ID ( params ) { statements }, this
declstmt -> · extern type ID ( params ) ;, this
declstmt -> · class ID inherit { declstatements }, this
namespaceblock -> · namespace ID { statements }, new
statementblock -> · { statements }, new
declstmt -> · type ID = expr ;, new
declstmt -> · type ID ( params ) { statements }, new
declstmt -> · extern type ID ( params ) ;, new
declstmt -> · class ID inherit { declstatements }, new
namespaceblock -> · namespace ID { statements }, LITBOOL
statementblock -> · { statements }, LITBOOL
declstmt -> · type ID = expr ;, LITBOOL
declstmt -> · type ID ( params ) { statements }, LITBOOL
declstmt -> · extern type ID ( params ) ;, LITBOOL
declstmt -> · class ID inherit { declstatements }, LITBOOL
namespaceblock -> · namespace ID { statements }, LITINT
statementblock -> · { statements }, LITINT
declstmt -> · type ID = expr ;, LITINT
declstmt -> · type ID ( params ) { statements }, LITINT
declstmt -> · extern type ID ( params ) ;, LITINT
declstmt -> · class ID inherit { declstatements }, LITINT
namespaceblock -> · namespace ID { statements }, LITFLOAT
statementblock -> · { statements }, LITFLOAT
declstmt -> · type ID = expr ;, LITFLOAT
declstmt -> · type ID ( params ) { statements }, LITFLOAT
declstmt -> · extern type ID ( params ) ;, LITFLOAT
declstmt -> · class ID inherit { declstatements }, LITFLOAT
namespaceblock -> · namespace ID { statements }, LITDOUBLE
statementblock -> · { statements }, LITDOUBLE
declstmt -> · type ID = expr ;, LITDOUBLE
declstmt -> · type ID ( params ) { statements }, LITDOUBLE
declstmt -> · extern type ID ( params ) ;, LITDOUBLE
declstmt -> · class ID inherit { declstatements }, LITDOUBLE
namespaceblock -> · namespace ID { statements }, LITCHAR
statementblock -> · { statements }, LITCHAR
declstmt -> · type ID = expr ;, LITCHAR
declstmt -> · type ID ( params ) { statements }, LITCHAR
declstmt -> · extern type ID ( params ) ;, LITCHAR
declstmt -> · class ID inherit { declstatements }, LITCHAR
namespaceblock -> · namespace ID { statements }, LITSTRING
statementblock -> · { statements }, LITSTRING
declstmt -> · type ID = expr ;, LITSTRING
declstmt -> · type ID ( params ) { statements }, LITSTRING
declstmt -> · extern type ID ( params ) ;, LITSTRING
declstmt -> · class ID inherit { declstatements }, LITSTRING
namespaceblock -> · namespace ID { statements }, null
statementblock -> · { statements }, null
declstmt -> · type ID = expr ;, null
declstmt -> · type ID ( params ) { statements }, null
declstmt -> · extern type ID ( params ) ;, null
declstmt -> · class ID inherit { declstatements }, null
namespaceblock -> · namespace ID { statements }, ++
statementblock -> · { statements }, ++
declstmt -> · type ID = expr ;, ++
declstmt -> · type ID ( params ) { statements }, ++
declstmt -> · extern type ID ( params ) ;, ++
declstmt -> · class ID inherit { declstatements }, ++
namespaceblock -> · namespace ID { statements }, --
statementblock -> · { statements }, --
declstmt -> · type ID = expr ;, --
declstmt -> · type ID ( params ) { statements }, --
declstmt -> · extern type ID ( params ) ;, --
declstmt -> · class ID inherit { declstatements }, --
namespaceblock -> · namespace ID { statements }, break
statementblock -> · { statements }, break
declstmt -> · type ID = expr ;, break
declstmt -> · type ID ( params ) { statements }, break
declstmt -> · extern type ID ( params ) ;, break
declstmt -> · class ID inherit { declstatements }, break
namespaceblock -> · namespace ID { statements }, return
statementblock -> · { statements }, return
declstmt -> · type ID = expr ;, return
declstmt -> · type ID ( params ) { statements }, return
declstmt -> · extern type ID ( params ) ;, return
declstmt -> · class ID inherit { declstatements }, return
namespaceblock -> · namespace ID { statements }, delete
statementblock -> · { statements }, delete
declstmt -> · type ID = expr ;, delete
declstmt -> · type ID ( params ) { statements }, delete
declstmt -> · extern type ID ( params ) ;, delete
declstmt -> · class ID inherit { declstatements }, delete
namespaceblock -> · namespace ID { statements }, while
statementblock -> · { statements }, while
declstmt -> · type ID = expr ;, while
declstmt -> · type ID ( params ) { statements }, while
declstmt -> · extern type ID ( params ) ;, while
declstmt -> · class ID inherit { declstatements }, while
namespaceblock -> · namespace ID { statements }, for
statementblock -> · { statements }, for
declstmt -> · type ID = expr ;, for
declstmt -> · type ID ( params ) { statements }, for
declstmt -> · extern type ID ( params ) ;, for
declstmt -> · class ID inherit { declstatements }, for
namespaceblock -> · namespace ID { statements }, if
statementblock -> · { statements }, if
declstmt -> · type ID = expr ;, if
declstmt -> · type ID ( params ) { statements }, if
declstmt -> · extern type ID ( params ) ;, if
declstmt -> · class ID inherit { declstatements }, if
type -> · arrtype, ID
type -> · stype, ID
assign -> · lvalue = expr, ;
assign -> · lvalue += expr, ;
assign -> · lvalue -= expr, ;
assign -> · lvalue *= expr, ;
assign -> · lvalue /= expr, ;
assign -> · lvalue %= expr, ;
call -> · ID ( args ), ;
call -> · memberaccess ( args ), ;
incdec -> · ++ ID, ;
incdec -> · -- ID, ;
incdec -> · ID ++, ;
incdec -> · ID --, ;
newobj -> · new ID ( ), ;
arrtype -> · stypeBracket, ID
stype -> · primitive, ID
stype -> · ID, ID
lvalue -> · ID, =
lvalue -> · memberaccess, =
lvalue -> · indexaccess, =
lvalue -> · ID, +=
lvalue -> · memberaccess, +=
lvalue -> · indexaccess, +=
lvalue -> · ID, -=
lvalue -> · memberaccess, -=
lvalue -> · indexaccess, -=
lvalue -> · ID, *=
lvalue -> · memberaccess, *=
lvalue -> · indexaccess, *=
lvalue -> · ID, /=
lvalue -> · memberaccess, /=
lvalue -> · indexaccess, /=
lvalue -> · ID, %=
lvalue -> · memberaccess, %=
lvalue -> · indexaccess, %=
memberaccess -> · primary . ID, (
stypeBracket -> · idBracket, ID
stypeBracket -> · primitiveBracket, ID
primitive -> · void, ID
primitive -> · bool, ID
primitive -> · int, ID
primitive -> · float, ID
primitive -> · double, ID
primitive -> · char, ID
primitive -> · string, ID
memberaccess -> · primary . ID, =
indexaccess -> · idBracket, =
indexaccess -> · memberaccess [ aexpr ], =
memberaccess -> · primary . ID, +=
indexaccess -> · idBracket, +=
indexaccess -> · memberaccess [ aexpr ], +=
memberaccess -> · primary . ID, -=
indexaccess -> · idBracket, -=
indexaccess -> · memberaccess [ aexpr ], -=
memberaccess -> · primary . ID, *=
indexaccess -> · idBracket, *=
indexaccess -> · memberaccess [ aexpr ], *=
memberaccess -> · primary . ID, /=
indexaccess -> · idBracket, /=
indexaccess -> · memberaccess [ aexpr ], /=
memberaccess -> · primary . ID, %=
indexaccess -> · idBracket, %=
indexaccess -> · memberaccess [ aexpr ], %=
primary -> · ( expr ), .
primary -> · ID, .
primary -> · this, .
primary -> · memberaccess, .
primary -> · indexaccess, .
primary -> · call, .
primary -> · newobj, .
primary -> · newarr, .
primary -> · lit, .
idBracket -> · ID [ optidx ], ID
primitiveBracket -> · primitive [ optidx ], ID
idBracket -> · ID [ optidx ], =
memberaccess -> · primary . ID, [
idBracket -> · ID [ optidx ], +=
idBracket -> · ID [ optidx ], -=
idBracket -> · ID [ optidx ], *=
idBracket -> · ID [ optidx ], /=
idBracket -> · ID [ optidx ], %=
memberaccess -> · primary . ID, .
indexaccess -> · idBracket, .
indexaccess -> · memberaccess [ aexpr ], .
call -> · ID ( args ), .
call -> · memberaccess ( args ), .
newobj -> · new ID ( ), .
newarr -> · new stypeBracket, .
lit -> · LITBOOL, .
lit -> · LITINT, .
lit -> · LITFLOAT, .
lit -> · LITDOUBLE, .
lit -> · LITCHAR, .
lit -> · LITSTRING, .
lit -> · null, .
primitive -> · void, [
primitive -> · bool, [
primitive -> · int, [
primitive -> · float, [
primitive -> · double, [
primitive -> · char, [
primitive -> · string, [
idBracket -> · ID [ optidx ], .
elifclause -> else if ( expr ) · stmt, }
stmt -> if ( expr ) · stmt elifclauselist elseclause, }
stmt -> · namespaceblock, }
stmt -> · statementblock, }
stmt -> · declstmt, }
stmt -> · stmtexpr ;, }
stmt -> · break ;, }
stmt -> · return expr ;, }
stmt -> · return ;, }
stmt -> · delete expr ;, }
stmt -> · while ( expr ) stmt, }
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, }
stmt -> · if ( expr ) stmt elifclauselist elseclause, }
namespaceblock -> · namespace ID { statements }, }
statementblock -> · { statements }, }
declstmt -> · type ID = expr ;, }
declstmt -> · type ID ( params ) { statements }, }
declstmt -> · extern type ID ( params ) ;, }
declstmt -> · class ID inherit { declstatements }, }
elifclause -> else if ( expr ) · stmt, &&
elifclause -> else if ( expr ) · stmt, ||
elifclause -> else if ( expr ) · stmt, +
elifclause -> else if ( expr ) · stmt, -
elifclause -> else if ( expr ) · stmt, *
elifclause -> else if ( expr ) · stmt, /
elifclause -> else if ( expr ) · stmt, !
stmt -> if ( expr ) · stmt elifclauselist elseclause, &&
stmt -> if ( expr ) · stmt elifclauselist elseclause, ||
stmt -> if ( expr ) · stmt elifclauselist elseclause, +
stmt -> if ( expr ) · stmt elifclauselist elseclause, -
stmt -> if ( expr ) · stmt elifclauselist elseclause, *
stmt -> if ( expr ) · stmt elifclauselist elseclause, /
stmt -> if ( expr ) · stmt elifclauselist elseclause, !
stmt -> · namespaceblock, &&
stmt -> · statementblock, &&
stmt -> · declstmt, &&
stmt -> · stmtexpr ;, &&
stmt -> · break ;, &&
stmt -> · return expr ;, &&
stmt -> · return ;, &&
stmt -> · delete expr ;, &&
stmt -> · while ( expr ) stmt, &&
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, &&
stmt -> · if ( expr ) stmt elifclauselist elseclause, &&
stmt -> · namespaceblock, ||
stmt -> · statementblock, ||
stmt -> · declstmt, ||
stmt -> · stmtexpr ;, ||
stmt -> · break ;, ||
stmt -> · return expr ;, ||
stmt -> · return ;, ||
stmt -> · delete expr ;, ||
stmt -> · while ( expr ) stmt, ||
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, ||
stmt -> · if ( expr ) stmt elifclauselist elseclause, ||
stmt -> · namespaceblock, +
stmt -> · statementblock, +
stmt -> · declstmt, +
stmt -> · stmtexpr ;, +
stmt -> · break ;, +
stmt -> · return expr ;, +
stmt -> · return ;, +
stmt -> · delete expr ;, +
stmt -> · while ( expr ) stmt, +
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, +
stmt -> · if ( expr ) stmt elifclauselist elseclause, +
stmt -> · namespaceblock, -
stmt -> · statementblock, -
stmt -> · declstmt, -
stmt -> · stmtexpr ;, -
stmt -> · break ;, -
stmt -> · return expr ;, -
stmt -> · return ;, -
stmt -> · delete expr ;, -
stmt -> · while ( expr ) stmt, -
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, -
stmt -> · if ( expr ) stmt elifclauselist elseclause, -
stmt -> · namespaceblock, *
stmt -> · statementblock, *
stmt -> · declstmt, *
stmt -> · stmtexpr ;, *
stmt -> · break ;, *
stmt -> · return expr ;, *
stmt -> · return ;, *
stmt -> · delete expr ;, *
stmt -> · while ( expr ) stmt, *
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, *
stmt -> · if ( expr ) stmt elifclauselist elseclause, *
stmt -> · namespaceblock, /
stmt -> · statementblock, /
stmt -> · declstmt, /
stmt -> · stmtexpr ;, /
stmt -> · break ;, /
stmt -> · return expr ;, /
stmt -> · return ;, /
stmt -> · delete expr ;, /
stmt -> · while ( expr ) stmt, /
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, /
stmt -> · if ( expr ) stmt elifclauselist elseclause, /
stmt -> · namespaceblock, !
stmt -> · statementblock, !
stmt -> · declstmt, !
stmt -> · stmtexpr ;, !
stmt -> · break ;, !
stmt -> · return expr ;, !
stmt -> · return ;, !
stmt -> · delete expr ;, !
stmt -> · while ( expr ) stmt, !
stmt -> · for ( stmt bexpr ; stmtexpr ) stmt, !
stmt -> · if ( expr ) stmt elifclauselist elseclause, !
namespaceblock -> · namespace ID { statements }, &&
statementblock -> · { statements }, &&
declstmt -> · type ID = expr ;, &&
declstmt -> · type ID ( params ) { statements }, &&
declstmt -> · extern type ID ( params ) ;, &&
declstmt -> · class ID inherit { declstatements }, &&
namespaceblock -> · namespace ID { statements }, ||
statementblock -> · { statements }, ||
declstmt -> · type ID = expr ;, ||
declstmt -> · type ID ( params ) { statements }, ||
declstmt -> · extern type ID ( params ) ;, ||
declstmt -> · class ID inherit { declstatements }, ||
namespaceblock -> · namespace ID { statements }, +
statementblock -> · { statements }, +
declstmt -> · type ID = expr ;, +
declstmt -> · type ID ( params ) { statements }, +
declstmt -> · extern type ID ( params ) ;, +
declstmt -> · class ID inherit { declstatements }, +
namespaceblock -> · namespace ID { statements }, -
statementblock -> · { statements }, -
declstmt -> · type ID = expr ;, -
declstmt -> · type ID ( params ) { statements }, -
declstmt -> · extern type ID ( params ) ;, -
declstmt -> · class ID inherit { declstatements }, -
namespaceblock -> · namespace ID { statements }, *
statementblock -> · { statements }, *
declstmt -> · type ID = expr ;, *
declstmt -> · type ID ( params ) { statements }, *
declstmt -> · extern type ID ( params ) ;, *
declstmt -> · class ID inherit { declstatements }, *
namespaceblock -> · namespace ID { statements }, /
statementblock -> · { statements }, /
declstmt -> · type ID = expr ;, /
declstmt -> · type ID ( params ) { statements }, /
declstmt -> · extern type ID ( params ) ;, /
declstmt -> · class ID inherit { declstatements }, /
namespaceblock -> · namespace ID { statements }, !
statementblock -> · { statements }, !
declstmt -> · type ID = expr ;, !
declstmt -> · type ID ( params ) { statements }, !
declstmt -> · extern type ID ( params ) ;, !
declstmt -> · class ID inherit { declstatements }, !
stmt -> if ( expr ) · stmt elifclauselist elseclause, else
***EndSet***
***EndState***
***State***
231
I_1475_1493_1498_1506_1509_1510
***Set***
elifclause -> else if ( expr ) stmt ·, else
elifclause -> else if ( expr ) stmt ·, $
elifclause -> else if ( expr ) stmt ·, namespace
elifclause -> else if ( expr ) stmt ·, {
elifclause -> else if ( expr ) stmt ·, ID
elifclause -> else if ( expr ) stmt ·, void
elifclause -> else if ( expr ) stmt ·, bool
elifclause -> else if ( expr ) stmt ·, int
elifclause -> else if ( expr ) stmt ·, float
elifclause -> else if ( expr ) stmt ·, double
elifclause -> else if ( expr ) stmt ·, char
elifclause -> else if ( expr ) stmt ·, string
elifclause -> else if ( expr ) stmt ·, extern
elifclause -> else if ( expr ) stmt ·, class
elifclause -> else if ( expr ) stmt ·, (
elifclause -> else if ( expr ) stmt ·, this
elifclause -> else if ( expr ) stmt ·, new
elifclause -> else if ( expr ) stmt ·, LITBOOL
elifclause -> else if ( expr ) stmt ·, LITINT
elifclause -> else if ( expr ) stmt ·, LITFLOAT
elifclause -> else if ( expr ) stmt ·, LITDOUBLE
elifclause -> else if ( expr ) stmt ·, LITCHAR
elifclause -> else if ( expr ) stmt ·, LITSTRING
elifclause -> else if ( expr ) stmt ·, null
elifclause -> else if ( expr ) stmt ·, ++
elifclause -> else if ( expr ) stmt ·, --
elifclause -> else if ( expr ) stmt ·, break
elifclause -> else if ( expr ) stmt ·, return
elifclause -> else if ( expr ) stmt ·, delete
elifclause -> else if ( expr ) stmt ·, while
elifclause -> else if ( expr ) stmt ·, for
elifclause -> else if ( expr ) stmt ·, if
stmt -> if ( expr ) stmt · elifclauselist elseclause, $
stmt -> if ( expr ) stmt · elifclauselist elseclause, namespace
stmt -> if ( expr ) stmt · elifclauselist elseclause, {
stmt -> if ( expr ) stmt · elifclauselist elseclause, ID
stmt -> if ( expr ) stmt · elifclauselist elseclause, void
stmt -> if ( expr ) stmt · elifclauselist elseclause, bool
stmt -> if ( expr ) stmt · elifclauselist elseclause, int
stmt -> if ( expr ) stmt · elifclauselist elseclause, float
stmt -> if ( expr ) stmt · elifclauselist elseclause, double
stmt -> if ( expr ) stmt · elifclauselist elseclause, char
stmt -> if ( expr ) stmt · elifclauselist elseclause, string
stmt -> if ( expr ) stmt · elifclauselist elseclause, extern
stmt -> if ( expr ) stmt · elifclauselist elseclause, class
stmt -> if ( expr ) stmt · elifclauselist elseclause, (
stmt -> if ( expr ) stmt · elifclauselist elseclause, this
stmt -> if ( expr ) stmt · elifclauselist elseclause, new
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITBOOL
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITINT
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITFLOAT
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITDOUBLE
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITCHAR
stmt -> if ( expr ) stmt · elifclauselist elseclause, LITSTRING
stmt -> if ( expr ) stmt · elifclauselist elseclause, null
stmt -> if ( expr ) stmt · elifclauselist elseclause, ++
stmt -> if ( expr ) stmt · elifclauselist elseclause, --
stmt -> if ( expr ) stmt · elifclauselist elseclause, break
stmt -> if ( expr ) stmt · elifclauselist elseclause, return
stmt -> if ( expr ) stmt · elifclauselist elseclause, delete
stmt -> if ( expr ) stmt · elifclauselist elseclause, while
stmt -> if ( expr ) stmt · elifclauselist elseclause, for
stmt -> if ( expr ) stmt · elifclauselist elseclause, if
elifclauselist -> ·, else
elifclauselist -> ·, $
elifclauselist -> · elifclauselist elifclause, else
elifclauselist -> · elifclauselist elifclause, $
elifclauselist -> ·, namespace
elifclauselist -> · elifclauselist elifclause, namespace
elifclauselist -> ·, {
elifclauselist -> · elifclauselist elifclause, {
elifclauselist -> ·, ID
elifclauselist -> · elifclauselist elifclause, ID
elifclauselist -> ·, void
elifclauselist -> · elifclauselist elifclause, void
elifclauselist -> ·, bool
elifclauselist -> · elifclauselist elifclause, bool
elifclauselist -> ·, int
elifclauselist -> · elifclauselist elifclause, int
elifclauselist -> ·, float
elifclauselist -> · elifclauselist elifclause, float
elifclauselist -> ·, double
elifclauselist -> · elifclauselist elifclause, double
elifclauselist -> ·, char
elifclauselist -> · elifclauselist elifclause, char
elifclauselist -> ·, string
elifclauselist -> · elifclauselist elifclause, string
elifclauselist -> ·, extern
elifclauselist -> · elifclauselist elifclause, extern
elifclauselist -> ·, class
elifclauselist -> · elifclauselist elifclause, class
elifclauselist -> ·, (
elifclauselist -> · elifclauselist elifclause, (
elifclauselist -> ·, this
elifclauselist -> · elifclauselist elifclause, this
elifclauselist -> ·, new
elifclauselist -> · elifclauselist elifclause, new
elifclauselist -> ·, LITBOOL
elifclauselist -> · elifclauselist elifclause, LITBOOL
elifclauselist -> ·, LITINT
elifclauselist -> · elifclauselist elifclause, LITINT
elifclauselist -> ·, LITFLOAT
elifclauselist -> · elifclauselist elifclause, LITFLOAT
elifclauselist -> ·, LITDOUBLE
elifclauselist -> · elifclauselist elifclause, LITDOUBLE
elifclauselist -> ·, LITCHAR
elifclauselist -> · elifclauselist elifclause, LITCHAR
elifclauselist -> ·, LITSTRING
elifclauselist -> · elifclauselist elifclause, LITSTRING
elifclauselist -> ·, null
elifclauselist -> · elifclauselist elifclause, null
elifclauselist -> ·, ++
elifclauselist -> · elifclauselist elifclause, ++
elifclauselist -> ·, --
elifclauselist -> · elifclauselist elifclause, --
elifclauselist -> ·, break
elifclauselist -> · elifclauselist elifclause, break
elifclauselist -> ·, return
elifclauselist -> · elifclauselist elifclause, return
elifclauselist -> ·, delete
elifclauselist -> · elifclauselist elifclause, delete
elifclauselist -> ·, while
elifclauselist -> · elifclauselist elifclause, while
elifclauselist -> ·, for
elifclauselist -> · elifclauselist elifclause, for
elifclauselist -> ·, if
elifclauselist -> · elifclauselist elifclause, if
elifclause -> else if ( expr ) stmt ·, }
stmt -> if ( expr ) stmt · elifclauselist elseclause, }
elifclauselist -> ·, }
elifclauselist -> · elifclauselist elifclause, }
elifclause -> else if ( expr ) stmt ·, &&
elifclause -> else if ( expr ) stmt ·, ||
elifclause -> else if ( expr ) stmt ·, +
elifclause -> else if ( expr ) stmt ·, -
elifclause -> else if ( expr ) stmt ·, *
elifclause -> else if ( expr ) stmt ·, /
elifclause -> else if ( expr ) stmt ·, !
stmt -> if ( expr ) stmt · elifclauselist elseclause, &&
stmt -> if ( expr ) stmt · elifclauselist elseclause, ||
stmt -> if ( expr ) stmt · elifclauselist elseclause, +
stmt -> if ( expr ) stmt · elifclauselist elseclause, -
stmt -> if ( expr ) stmt · elifclauselist elseclause, *
stmt -> if ( expr ) stmt · elifclauselist elseclause, /
stmt -> if ( expr ) stmt · elifclauselist elseclause, !
elifclauselist -> ·, &&
elifclauselist -> · elifclauselist elifclause, &&
elifclauselist -> ·, ||
elifclauselist -> · elifclauselist elifclause, ||
elifclauselist -> ·, +
elifclauselist -> · elifclauselist elifclause, +
elifclauselist -> ·, -
elifclauselist -> · elifclauselist elifclause, -
elifclauselist -> ·, *
elifclauselist -> · elifclauselist elifclause, *
elifclauselist -> ·, /
elifclauselist -> · elifclauselist elifclause, /
elifclauselist -> ·, !
elifclauselist -> · elifclauselist elifclause, !
stmt -> if ( expr ) stmt · elifclauselist elseclause, else
***EndSet***
***EndState***
***Table***
ACTION_TABLE
0
r4,r4,r4,r4,,r4,r4,r4,r4,r4,r4,r4,r4,r4,,,r4,r4,r4,r4,r4,,r4,r4,r4,r4,,,,r4,,,,,,,,r4,r4,,,,,,,,,,,,,,,,,,r4,r4,r4,r4,r4,r4,r4,r4
1
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s5,,,,,,,,,,,,,,,,,,,
2
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,acc
3
s1,r8,r8,r8,,r8,r8,r8,r8,r8,r8,r8,r8,r8,,,r8,r8,r8,r8,r8,,r8,r8,r8,r8,,,,r8,,,,,,,,r8,r8,,,,,,,,,,,,,,,,,,r8,r8,r8,r8,r8,r8,r8,r8
4
r3,r3,r3,r3,,r3,r3,r3,r3,r3,r3,r3,r3,r3,,,r3,r3,r3,r3,r3,,r3,r3,r3,r3,,,,r3,,,,,,,,r3,r3,,,,,,,,,,,,,,,,,,r3,r3,r3,r3,r3,r3,r3,r3
5
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s10,,
6
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s11,
7
r2,r2,r2,r2,,r2,r2,r2,r2,r2,r2,r2,r2,r2,,,r2,r2,r2,r2,r2,,r2,r2,r2,r2,,,,r2,,,,,,,,r2,r2,,,,,,,,,,,,,,,,,,r2,r2,r2,r2,r2,r2,r2,r2
8
,s6,r12,r12,,r12,r12,r12,r12,r12,r12,r12,r12,r12,,,r12,r12,r12,r12,r12,,r12,r12,r12,r12,,,,r12,,,,,,,,r12,r12,,,,,,,,,,,,,,,,,,r12,r12,r12,r12,r12,r12,r12,r12
9
,r7,r7,r7,,r7,r7,r7,r7,r7,r7,r7,r7,r7,,,r7,r7,r7,r7,r7,,r7,r7,r7,r7,,,,r7,,,,,,,,r7,r7,,,,,,,,,,,,,,,,,,r7,r7,r7,r7,r7,r7,r7,r7
10
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s66,,,,,,,,,,,,,,,,,,,,
11
,,,,,,,,,,,,,,,s67,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
12
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s68,
13
,,,,,,s15,s16,s17,s18,s19,s20,s21,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s69,
14
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s72,
15
,,,,,,,,,,,,,,,,,,,,,,,,,,r52,r52,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r52,
16
,,,,,,,,,,,,,,,,,,,,,,,,,,r53,r53,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r53,
17
,,,,,,,,,,,,,,,,,,,,,,,,,,r54,r54,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r54,
18
,,,,,,,,,,,,,,,,,,,,,,,,,,r55,r55,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r55,
19
,,,,,,,,,,,,,,,,,,,,,,,,,,r56,r56,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r56,
20
,,,,,,,,,,,,,,,,,,,,,,,,,,r57,r57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r57,
21
,,,,,,,,,,,,,,,,,,,,,,,,,,r58,r58,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r58,
22
,,,,,,,,,,,,,,r114,r114,,,,,,,,,,,r114,,r114,,,,,,,,,,,r114,r114,r114,r114,r114,r114,r114,r114,r114,r114,,r114,r114,,,,r114,,,,,,,,
23
,,,,,,s15,s16,s17,s18,s19,s20,s21,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s73,
24
,,,,,,,,,,,,,s22,,,s23,,,,,,,,s30,s76,,,,,,,,,,,,s33,s34,,,,,,,,s77,,,,,,s78,,,,s35,s36,s37,s38,s39,s40,s79,
25
,,,,,,,,,,,,,,,,,,,,,,,,,s93,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
26
,,,,,,,,,,,,,,,,,,,,,,,,,s94,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
27
,,,,,,,,,,,,,,,,,,,,,,,,,s95,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
28
,,,,,,,,,,,,,,,s96,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
29
,,,,,,,,,,,,,s22,,s97,s23,,,,,,,,s30,s76,,,,,,,,,,,,s33,s34,,,,,,,,s77,,,,,,s78,,,,s35,s36,s37,s38,s39,s40,s79,
30
,,,,,,,,,,,,,,r89,r89,,,,,,,,,,,r89,,r89,,,,,,,,,,,r89,r89,r89,r89,r89,r89,r89,r89,r89,r89,,r89,r89,,,,r89,,,,,,,,
31
,,,,,,,,,,,,,s22,,,s23,,,,,,,,s30,s76,,,,,,,,,,,,s33,s34,,,,,,,,s77,,,,,,s78,,,,s35,s36,s37,s38,s39,s40,s79,
32
,,r12,r12,,r12,r12,r12,r12,r12,r12,r12,r12,r12,,,r12,r12,r12,r12,r12,,r12,r12,r12,r12,,,,r12,r12,,,,,,,r12,r12,,,,,,,,,,,,,,,,,,r12,r12,r12,r12,r12,r12,r12,
33
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s101,
34
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s102,
35
,,,,,,,,,,,,,,r108,r108,,,,,,,,,,,r108,,r108,,,,,,,,,,,r108,r108,r108,r108,r108,r108,r108,r108,r108,r108,,r108,r108,,,,r108,,,,,,,,
36
,,,,,,,,,,,,,,r109,r109,,,,,,,,,,,r109,,r109,,,,,,,,,,,r109,r109,r109,r109,r109,r109,r109,r109,r109,r109,,r109,r109,,,,r109,,,,,,,,
37
,,,,,,,,,,,,,,r110,r110,,,,,,,,,,,r110,,r110,,,,,,,,,,,r110,r110,r110,r110,r110,r110,r110,r110,r110,r110,,r110,r110,,,,r110,,,,,,,,
38
,,,,,,,,,,,,,,r111,r111,,,,,,,,,,,r111,,r111,,,,,,,,,,,r111,r111,r111,r111,r111,r111,r111,r111,r111,r111,,r111,r111,,,,r111,,,,,,,,
39
,,,,,,,,,,,,,,r112,r112,,,,,,,,,,,r112,,r112,,,,,,,,,,,r112,r112,r112,r112,r112,r112,r112,r112,r112,r112,,r112,r112,,,,r112,,,,,,,,
40
,,,,,,,,,,,,,,r113,r113,,,,,,,,,,,r113,,r113,,,,,,,,,,,r113,r113,r113,r113,r113,r113,r113,r113,r113,r113,,r113,r113,,,,r113,,,,,,,,
41
,,,,,,,,,,,,,,,,,,,,,,,,,s103,r51,s104,,,,r44,r44,r44,r44,r44,r44,s105,s106,r88,r88,r88,r88,r88,r88,r88,r88,r88,r88,,r88,r88,,,,r88,,,,,,,r51,
42
,r6,r6,r6,,r6,r6,r6,r6,r6,r6,r6,r6,r6,,,r6,r6,r6,r6,r6,,r6,r6,r6,r6,,,,r6,,,,,,,,r6,r6,,,,,,,,,,,,,,,,,,r6,r6,r6,r6,r6,r6,r6,r6
43
,,s12,s13,,s14,s15,s16,s17,s18,s19,s20,s21,s22,,,s23,s24,s25,s26,s27,,s28,s29,s30,s31,,,,s32,,,,,,,,s33,s34,,,,,,,,,,,,,,,,,,s35,s36,s37,s38,s39,s40,s41,r1
44
,,r18,r18,,r18,r18,r18,r18,r18,r18,r18,r18,r18,,,r18,r18,r18,r18,r18,r18,r18,r18,r18,r18,,,,r18,r18,,,,,,,r18,r18,,,,,,,r18,r18,r18,r18,,r18,r18,r18,,,,r18,r18,r18,r18,r18,r18,r18,r18
45
,,r19,r19,,r19,r19,r19,r19,r19,r19,r19,r19,r19,,,r19,r19,r19,r19,r19,r19,r19,r19,r19,r19,,,,r19,r19,,,,,,,r19,r19,,,,,,,r19,r19,r19,r19,,r19,r19,r19,,,,r19,r19,r19,r19,r19,r19,r19,r19
46
,,r11,r11,,r11,r11,r11,r11,r11,r11,r11,r11,r11,,,r11,r11,r11,r11,r11,,r11,r11,r11,r11,,,,r11,r11,,,,,,,r11,r11,,,,,,,,,,,,,,,,,,r11,r11,r11,r11,r11,r11,r11,r11
47
,,r20,r20,,r20,r20,r20,r20,r20,r20,r20,r20,r20,,,r20,r20,r20,r20,r20,r20,r20,r20,r20,r20,,,,r20,r20,,,,,,,r20,r20,,,,,,,r20,r20,r20,r20,,r20,r20,r20,,,,r20,r20,r20,r20,r20,r20,r20,r20
48
,,,,,,,,,,,,,,,s108,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
49
,,,,,,,,,,,,,,,r61,,,,,,,,,,,r61,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
50
,,,,,,,,,,,,,,,r62,,,,,,,,,,,r62,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r92,,,,,,,,
51
,,,,,,,,,,,,,,r91,r91,,,,,,,,,,,r91,,,,,r46,r46,r46,r46,r46,r46,,,r91,r91,r91,r91,r91,r91,r91,r91,r91,r91,,r91,r91,,,,r91,,,,,,,,
52
,,,,,,,,,,,,,,,r64,,,,,,,,,,,r64,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r93,,,,,,,,
53
,,,,,,,,,,,,,,r94,r94,,,,,,,,,,,r94,,r94,,,,,,,,,,,r94,r94,r94,r94,r94,r94,r94,r94,r94,r94,,r94,r94,,,,r94,,,,,,,,
54
,,,,,,,,,,,,,,,r63,,,,,,,,,,,r63,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
55
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s109,
56
,,,,,,,,,,,,,,,,,,,,,,,,,,r48,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r48,
57
,,,,,,,,,,,,,,,,,,,,,,,,,,r47,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r47,
58
,,,,,,,,,,,,,,,,,,,,,,,,,,r50,s110,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r50,
59
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s111,,,,,,,,
60
,,,,,,,,,,,,,,r95,r95,,,,,,,,,,,r95,,r95,,,,,,,,,,,r95,r95,r95,r95,r95,r95,r95,r95,r95,r95,,r95,r95,,,,r95,,,,,,,,
61
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s112,s113,s114,s115,s116,s117,,,,,,,,,,,,,,,,,,,,,,,,,,,
62
,,,,,,,,,,,,,,r90,r90,,,,,,,,,,s118,r90,s119,,,,r45,r45,r45,r45,r45,r45,,,r90,r90,r90,r90,r90,r90,r90,r90,r90,r90,,r90,r90,,,,r90,,,,,,,,
63
,,,,,,,,,,,,,,,,,,,,,,,,,,r49,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r49,
64
,,,,,,,,,,,,,,,,,,,,,,,,,,r121,,,,,r102,r102,r102,r102,r102,r102,,,r102,r102,r102,r102,r102,r102,r102,r102,r102,r102,,r102,r102,,,,r102,,,,,,,r121,
65
,,,,,,,,,,,,,,r122,r122,,,,,,,,,,,r122,,r122,,,,,,,,,,,r122,r122,r122,r122,r122,r122,r122,r122,r122,r122,,r122,r122,,,,r122,,,,,,,r122,
66
r5,r5,r5,r5,,r5,r5,r5,r5,r5,r5,r5,r5,r5,,,r5,r5,r5,r5,r5,,r5,r5,r5,r5,,,,r5,,,,,,,,r5,r5,,,,,,,,,,,,,,,,,,r5,r5,r5,r5,r5,r5,r5,r5
67
,r9,r9,r9,,r9,r9,r9,r9,r9,r9,r9,r9,r9,,,r9,r9,r9,r9,r9,,r9,r9,r9,r9,,,,r9,,,,,,,,r9,r9,,,,,,,,,,,,,,,,,,r9,r9,r9,r9,r9,r9,r9,r9
68
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s120,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
69
,,,,,,,,,,,,,,,,,,,,,,,,,,,s104,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r51,
70
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s121,
71
,,,,,,,,,,,,,,r121,r121,,,,,,,,,,,r121,,r121,,,,,,,,,,,r121,r121,r121,r121,r121,r121,r121,r121,r121,r121,,r121,r121,,,,r121,,,,,,,r121,
72
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r128,,,,,,,,,,,,,,,,,,,,,,,,s122,,,,,,,,,,
73
,,,,,,,,,,,,,,,,,,,,,,,,,s124,,s104,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
74
,,,,,,,,,,,,,,,,,,,,,,,,,,,s110,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
75
,,,,,,,,,,,,,,r105,r105,,,,,,,,,,,r105,,r105,,,,,,,,,,,r105,r105,r105,r105,r105,r105,r105,r105,r105,r105,,r105,r105,,,,r105,,,,,,,,
76
,,,,,,s15,s16,s17,s18,s19,s20,s21,s22,,,s23,,,,,,,,s30,s76,,,,,,,,,,,,s33,s34,,,,,,,,s77,,,,,,s78,,,,s35,s36,s37,s38,s39,s40,s41,
77
,,,,,,,,,,,,,s22,,,s23,,,,,,,,s30,s76,,,,,,,,,,,,s33,s34,,,,,,,,s77,,,,,,s78,,,,s35,s36,s37,s38,s39,s40,s126,
78
,,,,,,,,,,,,,s22,,,s23,,,,,,,,s30,s76,,,,,,,,,,,,s33,s34,,,,,,,,s77,,,,,,s78,,,,s35,s36,s37,s38,s39,s40,s126,
79
,,,,,,,,,,,,,,r88,r88,,,,,,,,,,s103,r88,s104,,,,r44,r44,r44,r44,r44,r44,s105,s106,r88,r88,r88,r88,r88,r88,r88,r88,r88,r88,,r88,r88,,,,r88,,,,,,,,
80
,,,,,,,,,,,,,,r59,r59,,,,,,,,,,,r59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
81
,,,,,,,,,,,,,,r92,r92,,,,,,,,,,,r92,,r92,,,,,,,,,,,r92,r92,r92,r92,r92,r92,r92,r92,r92,r92,,r92,r92,,,,r92,,,,,,,,
82
,,,,,,,,,,,,,,r93,r93,,,,,,,,,,,r93,,r93,,,,,,,,,,,r93,r93,r93,r93,r93,r93,r93,r93,r93,r93,,r93,r93,,,,r93,,,,,,,,
83
,,,,,,,,,,,,,,r82,r82,,,,,,,,,,,r82,,r82,,,,,,,,,,,r82,r82,r82,r82,r82,r82,r82,r82,r82,r82,,r82,r82,,,,,,,,,,,,
84
,,,,,,,,,,,,,,,s131,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
85
,,,,,,,,,,,,,,r60,r60,,,,,,,,,,,r60,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
86
,,,,,,,,,,,,,,r65,r65,,,,,,,,,,,r65,,,,,,,,,,,,,,,,,,,,,,,,s132,s133,,,,,,,,,,,,
87
,,,,,,,,,,,,,,r66,r66,,,,,,,,,,,r66,,,,,,,,,,,,,s134,s135,s136,s137,s138,s139,s140,s141,,,,,,,,,,,,,,,,,
88
,,,,,,,,,,,,,,r78,r78,,,,,,,,,,,r78,,r78,,,,,,,,,,,r78,r78,r78,r78,r78,r78,r78,r78,s142,s143,,r78,r78,,,,,,,,,,,,
89
,,,,,,,,,,,,,,r75,r75,,,,,,,,,,,r75,,,,,,,,,,,,,r81,r81,r81,r81,r81,r81,r81,r81,r81,r81,,r75,r75,,,,,,,,,,,,
90
,,,,,,,,,,,,,,r86,r86,,,,,,,,,,,r86,,r86,,,,,,,,,,,r86,r86,r86,r86,r86,r86,r86,r86,r86,r86,,r86,r86,,,,s111,,,,,,,,
91
,,,,,,,,,,,,,,r85,r85,,,,,,,,,,,r85,,r85,,,,,,,,,,,r85,r85,r85,r85,r85,r85,r85,r85,r85,r85,,r85,r85,,,,,,,,,,,,
92
,,,,,,,,,,,,,,r102,r102,,,,,,,,,,,r102,,r102,,,r102,r102,r102,r102,r102,r102,,,r102,r102,r102,r102,r102,r102,r102,r102,r102,r102,,r102,r102,,,,r102,,,,,,,,
93
,,,,,,,,,,,,,s22,,,s23,,,,,,,,s30,s76,,,,,,,,,,,,s33,s34,,,,,,,,s77,,,,,,s78,,,,s35,s36,s37,s38,s39,s40,s79,
94
,,s12,s13,,s14,s15,s16,s17,s18,s19,s20,s21,s22,,,s23,s24,s25,s26,s27,,s28,s29,s30,s31,,,,s32,,,,,,,,s33,s34,,,,,,,,,,,,,,,,,,s35,s36,s37,s38,s39,s40,s41,
95
,,,,,,,,,,,,,s22,,,s23,,,,,,,,s30,s76,,,,,,,,,,,,s33,s34,,,,,,,,s77,,,,,,s78,,,,s35,s36,s37,s38,s39,s40,s79,
96
,,r22,r22,,r22,r22,r22,r22,r22,r22,r22,r22,r22,,,r22,r22,r22,r22,r22,r22,r22,r22,r22,r22,,,,r22,r22,,,,,,,r22,r22,,,,,,,r22,r22,r22,r22,,r22,r22,r22,,,,r22,r22,r22,r22,r22,r22,r22,r22
97
,,r24,r24,,r24,r24,r24,r24,r24,r24,r24,r24,r24,,,r24,r24,r24,r24,r24,r24,r24,r24,r24,r24,,,,r24,r24,,,,,,,r24,r24,,,,,,,r24,r24,r24,r24,,r24,r24,r24,,,,r24,r24,r24,r24,r24,r24,r24,r24
98
,,,,,,,,,,,,,,,s147,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
99
,,,,,,,,,,,,,,,,,,,,,,,,,,s148,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100
,,s12,s13,,s14,s15,s16,s17,s18,s19,s20,s21,s22,,,s23,s24,s25,s26,s27,,s28,s29,s30,s31,,,,s32,s149,,,,,,,s33,s34,,,,,,,,,,,,,,,,,,s35,s36,s37,s38,s39,s40,s41,
101
,,,,,,,,,,,,,,r97,r97,,,,,,,,,,,r97,,r97,,,,,,,,,,,r97,r97,r97,r97,r97,r97,r97,r97,r97,r97,,r97,r97,,,,,,,,,,,,
102
,,,,,,,,,,,,,,r96,r96,,,,,,,,,,,r96,,r96,,,,,,,,,,,r96,r96,r96,r96,r96,r96,r96,r96,r96,r96,,r96,r96,,,,,,,,,,,,
103
,,,,,,,,,,,,,s22,r118,,s23,,,,,,,,s30,s76,r118,,,,,,,,,,,s33,s34,,,,,,,,s77,,,,,,s78,,,,s35,s36,s37,s38,s39,s40,s79,
104
,,,,,,,,,,,,,s22,,,s23,,,,,,,,s30,s76,,,r126,,,,,,,,,s33,s34,,,,,,,,s77,,,,,,s78,,,,s35,s36,s37,s38,s39,s40,s126,
105
,,,,,,,,,,,,,,r99,r99,,,,,,,,,,,r99,,r99,,,,,,,,,,,r99,r99,r99,r99,r99,r99,r99,r99,r99,r99,,r99,r99,,,,,,,,,,,,
106
,,,,,,,,,,,,,,r98,r98,,,,,,,,,,,r98,,r98,,,,,,,,,,,r98,r98,r98,r98,r98,r98,r98,r98,r98,r98,,r98,r98,,,,,,,,,,,,
107
,,r10,r10,,r10,r10,r10,r10,r10,r10,r10,r10,r10,,,r10,r10,r10,r10,r10,,r10,r10,r10,r10,,,,r10,r10,,,,,,,r10,r10,,,,,,,,,,,,,,,,,,r10,r10,r10,r10,r10,r10,r10,r10
108
,,r21,r21,,r21,r21,r21,r21,r21,r21,r21,r21,r21,,,r21,r21,r21,r21,r21,r21,r21,r21,r21,r21,,,,r21,r21,,,,,,,r21,r21,,,,,,,r21,r21,r21,r21,,r21,r21,r21,,,,r21,r21,r21,r21,r21,r21,r21,r21
109
,,,,,,,,,,,,,,,,,,,,,,,,,s155,,,,,,s156,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
110
,,,,,,,,,,,,,s22,,,s23,,,,,,,,s30,s76,,,r126,,,,,,,,,s33,s34,,,,,,,,s77,,,,,,s78,,,,s35,s36,s37,s38,s39,s40,s126,
111
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s158,
112
,,,,,,,,,,,,,s22,,,s23,,,,,,,,s30,s76,,,,,,,,,,,,s33,s34,,,,,,,,s77,,,,,,s78,,,,s35,s36,s37,s38,s39,s40,s79,
113
,,,,,,,,,,,,,s22,,,s23,,,,,,,,s30,s76,,,,,,,,,,,,s33,s34,,,,,,,,s77,,,,,,s78,,,,s35,s36,s37,s38,s39,s40,s79,
114
,,,,,,,,,,,,,s22,,,s23,,,,,,,,s30,s76,,,,,,,,,,,,s33,s34,,,,,,,,s77,,,,,,s78,,,,s35,s36,s37,s38,s39,s40,s79,
115
,,,,,,,,,,,,,s22,,,s23,,,,,,,,s30,s76,,,,,,,,,,,,s33,s34,,,,,,,,s77,,,,,,s78,,,,s35,s36,s37,s38,s39,s40,s79,
116
,,,,,,,,,,,,,s22,,,s23,,,,,,,,s30,s76,,,,,,,,,,,,s33,s34,,,,,,,,s77,,,,,,s78,,,,s35,s36,s37,s38,s39,s40,s79,
117
,,,,,,,,,,,,,s22,,,s23,,,,,,,,s30,s76,,,,,,,,,,,,s33,s34,,,,,,,,s77,,,,,,s78,,,,s35,s36,s37,s38,s39,s40,s79,
118
,,,,,,,,,,,,,s22,r118,,s23,,,,,,,,s30,s76,r118,,,,,,,,,,,s33,s34,,,,,,,,s77,,,,,,s78,,,,s35,s36,s37,s38,s39,s40,s79,
119
,,,,,,,,,,,,,s22,,,s23,,,,,,,,s30,s76,,,,,,,,,,,,s33,s34,,,,,,,,s77,,,,,,s78,,,,s35,s36,s37,s38,s39,s40,s126,
120
,,r12,r12,,r12,r12,r12,r12,r12,r12,r12,r12,r12,,,r12,r12,r12,r12,r12,,r12,r12,r12,r12,,,,r12,r12,,,,,,,r12,r12,,,,,,,,,,,,,,,,,,r12,r12,r12,r12,r12,r12,r12,
121
,,,,,,,,,,,,,,,,,,,,,,,,,s168,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
122
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s169,
123
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s170,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
124
,,,,,,,,,,,,,,,,,,,,,,,,,,s171,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
125
,,,,,,,,,,,,,,,,,,,,,,,,,,s172,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
126
,,,,,,,,,,,,,,r88,r88,,,,,,,,,,s103,r88,s104,r88,,,,,,,,,s105,s106,r88,r88,r88,r88,r88,r88,r88,r88,r88,r88,,r88,r88,,,,r88,,,,,,,,
127
,,,,,,,,,,,,,,r91,r91,,,,,,,,,,,r91,,r91,,,,,,,,,,,r91,r91,r91,r91,r91,r91,r91,r91,r91,r91,,r91,r91,,,,r91,,,,,,,,
128
,,,,,,,,,,,,,,r84,r84,,,,,,,,,,,r84,,r84,,,,,,,,,,,r84,r84,r84,r84,r84,r84,r84,r84,r84,r84,,r84,r84,,,,,,,,,,,,
129
,,,,,,,,,,,,,,r90,r90,,,,,,,,,,s118,r90,s119,r90,,,,,,,,,,,r90,r90,r90,r90,r90,r90,r90,r90,r90,r90,,r90,r90,,,,r90,,,,,,,,
130
,,,,,,,,,,,,,,r83,r83,,,,,,,,,,,r83,,r83,,,,,,,,,,,r83,r83,r83,r83,r83,r83,r83,r83,r83,r83,,r83,r83,,,,,,,,,,,,
131
,,r25,r25,,r25,r25,r25,r25,r25,r25,r25,r25,r25,,,r25,r25,r25,r25,r25,r25,r25,r25,r25,r25,,,,r25,r25,,,,,,,r25,r25,,,,,,,r25,r25,r25,r25,,r25,r25,r25,,,,r25,r25,r25,r25,r25,r25,r25,r25
132
,,,,,,,,,,,,,s22,,,s23,,,,,,,,s30,s76,,,,,,,,,,,,s33,s34,,,,,,,,s77,,,,,,s78,,,,s35,s36,s37,s38,s39,s40,s126,
133
,,,,,,,,,,,,,s22,,,s23,,,,,,,,s30,s76,,,,,,,,,,,,s33,s34,,,,,,,,s77,,,,,,s78,,,,s35,s36,s37,s38,s39,s40,s126,
134
,,,,,,,,,,,,,s22,,,s23,,,,,,,,s30,s76,,,,,,,,,,,,s33,s34,,,,,,,,s77,,,,,,s78,,,,s35,s36,s37,s38,s39,s40,s126,
135
,,,,,,,,,,,,,s22,,,s23,,,,,,,,s30,s76,,,,,,,,,,,,s33,s34,,,,,,,,s77,,,,,,s78,,,,s35,s36,s37,s38,s39,s40,s126,
136
,,,,,,,,,,,,,s22,,,s23,,,,,,,,s30,s76,,,,,,,,,,,,s33,s34,,,,,,,,s77,,,,,,s78,,,,s35,s36,s37,s38,s39,s40,s126,
137
,,,,,,,,,,,,,s22,,,s23,,,,,,,,s30,s76,,,,,,,,,,,,s33,s34,,,,,,,,s77,,,,,,s78,,,,s35,s36,s37,s38,s39,s40,s126,
138
,,,,,,,,,,,,,s22,,,s23,,,,,,,,s30,s76,,,,,,,,,,,,s33,s34,,,,,,,,s77,,,,,,s78,,,,s35,s36,s37,s38,s39,s40,s126,
139
,,,,,,,,,,,,,s22,,,s23,,,,,,,,s30,s76,,,,,,,,,,,,s33,s34,,,,,,,,s77,,,,,,s78,,,,s35,s36,s37,s38,s39,s40,s126,
140
,,,,,,,,,,,,,s22,,,s23,,,,,,,,s30,s76,,,,,,,,,,,,s33,s34,,,,,,,,s77,,,,,,s78,,,,s35,s36,s37,s38,s39,s40,s126,
141
,,,,,,,,,,,,,s22,,,s23,,,,,,,,s30,s76,,,,,,,,,,,,s33,s34,,,,,,,,s77,,,,,,s78,,,,s35,s36,s37,s38,s39,s40,s126,
142
,,,,,,,,,,,,,s22,,,s23,,,,,,,,s30,s76,,,,,,,,,,,,s33,s34,,,,,,,,s77,,,,,,s78,,,,s35,s36,s37,s38,s39,s40,s126,
143
,,,,,,,,,,,,,s22,,,s23,,,,,,,,s30,s76,,,,,,,,,,,,s33,s34,,,,,,,,s77,,,,,,s78,,,,s35,s36,s37,s38,s39,s40,s126,
144
,,,,,,,,,,,,,,,,,,,,,,,,,,s186,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
145
,,,,,,,,,,,,,s22,,,s23,,,,,,,,s30,s76,,,,,,,,,,,,s33,s34,,,,,,,,s77,,,,,,s78,,,,s35,s36,s37,s38,s39,s40,s126,
146
,,,,,,,,,,,,,,,,,,,,,,,,,,s188,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
147
,,r23,r23,,r23,r23,r23,r23,r23,r23,r23,r23,r23,,,r23,r23,r23,r23,r23,r23,r23,r23,r23,r23,,,,r23,r23,,,,,,,r23,r23,,,,,,,r23,r23,r23,r23,,r23,r23,r23,,,,r23,r23,r23,r23,r23,r23,r23,r23
148
,,,,,,,,,,,,,,r87,r87,,,,,,,,,,,r87,,r87,,,,,,,,,,,r87,r87,r87,r87,r87,r87,r87,r87,r87,r87,,r87,r87,,,,r87,,,,,,,,
149
,,r14,r14,,r14,r14,r14,r14,r14,r14,r14,r14,r14,,,r14,r14,r14,r14,r14,r14,r14,r14,r14,r14,,,,r14,r14,,,,,,,r14,r14,,,,,,,r14,r14,r14,r14,,r14,r14,r14,,,,r14,r14,r14,r14,r14,r14,r14,r14
150
,,,,,,,,,,,,,,r119,,,,,,,,,,,,r119,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
151
,,,,,,,,,,,,,,s189,,,,,,,,,,,,s190,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
152
,,,,,,,,,,,,,,,,,,,,,,,,,,,,r125,,,,,,,,,,,,,,,,,s140,s141,,,,,,,,,,,,,,,,,
153
,,,,,,,,,,,,,,r81,r81,,,,,,,,,,,r81,,r81,,,,,,,,,,,r81,r81,r81,r81,r81,r81,r81,r81,r81,r81,,r81,r81,,,,,,,,,,,,
154
,,,,,,,,,,,,,,,,,,,,,,,,,,,,s191,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
155
,,,,,,s15,s16,s17,s18,s19,s20,s21,,r115,,,,,,,,,,,,r115,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s69,
156
,,,,,,,,,,,,,s22,,,s23,,,,,,,,s30,s76,,,,,,,,,,,,s33,s34,,,,,,,,s77,,,,,,s78,,,,s35,s36,s37,s38,s39,s40,s79,
157
,,,,,,,,,,,,,,,,,,,,,,,,,,,,s195,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
158
,,,,,,,,,,,,,,r107,r107,,,,,,,,,,r107,r107,r107,r107,,,r107,r107,r107,r107,r107,r107,,,r107,r107,r107,r107,r107,r107,r107,r107,r107,r107,,r107,r107,,,,r107,,,,,,,,
159
,,,,,,,,,,,,,,r38,r38,,,,,,,,,,,r38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
160
,,,,,,,,,,,,,,r39,r39,,,,,,,,,,,r39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
161
,,,,,,,,,,,,,,r40,r40,,,,,,,,,,,r40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
162
,,,,,,,,,,,,,,r41,r41,,,,,,,,,,,r41,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
163
,,,,,,,,,,,,,,r42,r42,,,,,,,,,,,r42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
164
,,,,,,,,,,,,,,r43,r43,,,,,,,,,,,r43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
165
,,,,,,,,,,,,,,s189,,,,,,,,,,,,s196,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
166
,,,,,,,,,,,,,,,,,,,,,,,,,,,,s197,,,,,,,,,,,,,,,,,s140,s141,,,,,,,,,,,,,,,,,
167
,,s12,s13,,s14,s15,s16,s17,s18,s19,s20,s21,s22,,,s23,s24,s25,s26,s27,,s28,s29,s30,s31,,,,s32,s198,,,,,,,s33,s34,,,,,,,,,,,,,,,,,,s35,s36,s37,s38,s39,s40,s41,
168
,,,,,,s15,s16,s17,s18,s19,s20,s21,,r115,,,,,,,,,,,,r115,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s69,
169
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r127,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
170
,,,r17,,r17,r17,r17,r17,r17,r17,r17,r17,,,,,,,,,,,,,,,,,,r17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r17,
171
,,,,,,,,,,,,,,r104,r104,,,,,,,,,,,r104,,r104,,,,,,,,,,,r104,r104,r104,r104,r104,r104,r104,r104,r104,r104,,r104,r104,,,,r104,,,,,,,,
172
,,,,,,,,,,,,,s22,,,s23,,,,,,,,s30,s76,,,,,,,,,,,,s33,s34,,,,,,,,s77,,,,,,s78,,,,s35,s36,s37,s38,s39,s40,s126,
173
,,,,,,,,,,,,,,r68,r68,,,,,,,,,,,r68,,,,,,,,,,,,,,,,,,,,,,,,r68,r68,,,,,,,,,,,,
174
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s134,s135,s136,s137,s138,s139,s140,s141,,,,,,,,,,,,,,,,,
175
,,,,,,,,,,,,,,r67,r67,,,,,,,,,,,r67,,,,,,,,,,,,,,,,,,,,,,,,r67,r67,,,,,,,,,,,,
176
,,,,,,,,,,,,,,r73,r73,,,,,,,,,,,r73,,,,,,,,,,,,,,,,,,,s140,s141,,,,r73,r73,,,,,,,,,,,,
177
,,,,,,,,,,,,,,r74,r74,,,,,,,,,,,r74,,,,,,,,,,,,,,,,,,,s140,s141,,,,r74,r74,,,,,,,,,,,,
178
,,,,,,,,,,,,,,r72,r72,,,,,,,,,,,r72,,,,,,,,,,,,,,,,,,,s140,s141,,,,r72,r72,,,,,,,,,,,,
179
,,,,,,,,,,,,,,r71,r71,,,,,,,,,,,r71,,,,,,,,,,,,,,,,,,,s140,s141,,,,r71,r71,,,,,,,,,,,,
180
,,,,,,,,,,,,,,r69,r69,,,,,,,,,,,r69,,,,,,,,,,,,,,,,,,,s140,s141,,,,r69,r69,,,,,,,,,,,,
181
,,,,,,,,,,,,,,r70,r70,,,,,,,,,,,r70,,,,,,,,,,,,,,,,,,,s140,s141,,,,r70,r70,,,,,,,,,,,,
182
,,,,,,,,,,,,,,r76,r76,,,,,,,,,,,r76,,r76,,,,,,,,,,,r76,r76,r76,r76,r76,r76,r76,r76,s142,s143,,r76,r76,,,,,,,,,,,,
183
,,,,,,,,,,,,,,r77,r77,,,,,,,,,,,r77,,r77,,,,,,,,,,,r77,r77,r77,r77,r77,r77,r77,r77,s142,s143,,r77,r77,,,,,,,,,,,,
184
,,,,,,,,,,,,,,r79,r79,,,,,,,,,,,r79,,r79,,,,,,,,,,,r79,r79,r79,r79,r79,r79,r79,r79,r79,r79,,r79,r79,,,,,,,,,,,,
185
,,,,,,,,,,,,,,r80,r80,,,,,,,,,,,r80,,r80,,,,,,,,,,,r80,r80,r80,r80,r80,r80,r80,r80,r80,r80,,r80,r80,,,,,,,,,,,,
186
,,s12,s13,,s14,s15,s16,s17,s18,s19,s20,s21,s22,,,s23,s24,s25,s26,s27,,s28,s29,s30,s31,,,,s32,,,,,,,,s33,s34,,,,,,,,,,,,,,,,,,s35,s36,s37,s38,s39,s40,s41,
187
,,,,,,,,,,,,,,,s204,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s132,s133,,,,,,,,,,,,
188
,,s12,s13,,s14,s15,s16,s17,s18,s19,s20,s21,s22,,,s23,s24,s25,s26,s27,,s28,s29,s30,s31,,,,s32,,,,,,,,s33,s34,,,,,,,,,,,,,,,,,,s35,s36,s37,s38,s39,s40,s41,
189
,,,,,,,,,,,,,s22,,,s23,,,,,,,,s30,s76,,,,,,,,,,,,s33,s34,,,,,,,,s77,,,,,,s78,,,,s35,s36,s37,s38,s39,s40,s79,
190
,,,,,,,,,,,,,,r100,r100,,,,,,,,,,,r100,,r100,,,,,,,,,,,r100,r100,r100,r100,r100,r100,r100,r100,r100,r100,,r100,r100,,,,r100,,,,,,,,
191
,,,,,,,,,,,,,,r123,r123,,,,,,,,,,,r123,,r123,,,r123,r123,r123,r123,r123,r123,,,r123,r123,r123,r123,r123,r123,r123,r123,r123,r123,,r123,r123,,,,r123,,,,,,,r123,
192
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s207,
193
,,,,,,,,,,,,,,s208,,,,,,,,,,,,s209,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
194
,,,,,,,,,,,,,,,s210,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
195
,,,,,,,,,,,,,,r124,r124,,,,,,,,,,,r124,,r124,,,,,,,,,,,r124,r124,r124,r124,r124,r124,r124,r124,r124,r124,,r124,r124,,,,r124,,,,,,,r124,
196
,,,,,,,,,,,,,,r101,r101,,,,,,,,,,,r101,,r101,,,,,,,,,,,r101,r101,r101,r101,r101,r101,r101,r101,r101,r101,,r101,r101,,,,r101,,,,,,,,
197
,,,,,,,,,,,,,,r103,r103,,,,,,,,,,,r103,,r103,,,r103,r103,r103,r103,r103,r103,,,r103,r103,r103,r103,r103,r103,r103,r103,r103,r103,,r103,r103,,,,r103,,,,,,,,
198
,,r13,r13,,r13,r13,r13,r13,r13,r13,r13,r13,r13,,,r13,r13,r13,r13,r13,r13,r13,r13,r13,r13,,,,r13,r13,,,,,,,r13,r13,,,,,,,r13,r13,r13,r13,,r13,r13,r13,,,,r13,r13,r13,r13,r13,r13,r13,r13
199
,,,,,,,,,,,,,,s208,,,,,,,,,,,,s211,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
200
,,,s13,,s14,s15,s16,s17,s18,s19,s20,s21,,,,,,,,,,,,,,,,,,s212,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s69,
201
,,,r16,,r16,r16,r16,r16,r16,r16,r16,r16,,,,,,,,,,,,,,,,,,r16,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r16,
202
,,,,,,,,,,,,,,r106,r106,,,,,,,,,,,r106,,r106,,,,,,,,,,,r106,r106,r106,r106,r106,r106,r106,r106,r106,r106,,r106,r106,,,,,,,,,,,,
203
,,r26,r26,,r26,r26,r26,r26,r26,r26,r26,r26,r26,,,r26,r26,r26,r26,r26,r26,r26,r26,r26,r26,,,,r26,r26,,,,,,,r26,r26,,,,,,,r26,r26,r26,r26,,r26,r26,r26,,,,r26,r26,r26,r26,r26,r26,r26,r26
204
,,,,,,,,,,,,,s22,,,s23,,,,,,,,s30,s31,,,,,,,,,,,,s33,s34,,,,,,,,,,,,,,,,,,s35,s36,s37,s38,s39,s40,s79,
205
,,r33,r33,,r33,r33,r33,r33,r33,r33,r33,r33,r33,,,r33,r33,r33,r33,r33,r33,r33,r33,r33,r33,,,,r33,r33,,,,,,,r33,r33,,,,,,,r33,r33,r33,r33,,r33,r33,r33,,,,r33,r33,r33,r33,r33,r33,r33,r33
206
,,,,,,,,,,,,,,r120,,,,,,,,,,,,r120,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
207
,,,,,,,,,,,,,,r116,,,,,,,,,,,,r116,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
208
,,,,,,s15,s16,s17,s18,s19,s20,s21,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s69,
209
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s217,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
210
,,r29,r29,,r29,r29,r29,r29,r29,r29,r29,r29,r29,,,r29,r29,r29,r29,r29,r29,r29,r29,r29,r29,,,,r29,r29,,,,,,,r29,r29,,,,,,,r29,r29,r29,r29,,r29,r29,r29,,,,r29,r29,r29,r29,r29,r29,r29,r29
211
,,,,,,,,,,,,,,,s218,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
212
,,r32,r32,,r32,r32,r32,r32,r32,r32,r32,r32,r32,,,r32,r32,r32,r32,r32,r32,r32,r32,r32,r32,,,,r32,r32,,,,,,,r32,r32,,,,,,,r32,r32,r32,r32,,r32,r32,r32,,,,r32,r32,r32,r32,r32,r32,r32,r32
213
,,,r15,,r15,r15,r15,r15,r15,r15,r15,r15,,,,,,,,,,,,,,,,,,r15,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,r15,
214
,,,,,,,,,,,,,,,,,,,,,,,,,,s219,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
215
,,r36,r36,,r36,r36,r36,r36,r36,r36,r36,r36,r36,,,r36,r36,r36,r36,r36,s220,r36,r36,r36,r36,,,,r36,r36,,,,,,,r36,r36,,,,,,,r36,r36,r36,r36,,r36,r36,r36,,,,r36,r36,r36,r36,r36,r36,r36,r36
216
,,,,,,,,,,,,,,r117,,,,,,,,,,,,r117,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,s216,
217
,,r12,r12,,r12,r12,r12,r12,r12,r12,r12,r12,r12,,,r12,r12,r12,r12,r12,,r12,r12,r12,r12,,,,r12,r12,,,,,,,r12,r12,,,,,,,,,,,,,,,,,,r12,r12,r12,r12,r12,r12,r12,
218
,,r31,r31,,r31,r31,r31,r31,r31,r31,r31,r31,r31,,,r31,r31,r31,r31,r31,r31,r31,r31,r31,r31,,,,r31,r31,,,,,,,r31,r31,,,,,,,r31,r31,r31,r31,,r31,r31,r31,,,,r31,r31,r31,r31,r31,r31,r31,r31
219
,,s12,s13,,s14,s15,s16,s17,s18,s19,s20,s21,s22,,,s23,s24,s25,s26,s27,,s28,s29,s30,s31,,,,s32,,,,,,,,s33,s34,,,,,,,,,,,,,,,,,,s35,s36,s37,s38,s39,s40,s41,
220
,,s12,s13,,s14,s15,s16,s17,s18,s19,s20,s21,s22,,,s23,s24,s25,s26,s225,,s28,s29,s30,s31,,,,s32,,,,,,,,s33,s34,,,,,,,,,,,,,,,,,,s35,s36,s37,s38,s39,s40,s41,
221
,,r34,r34,,r34,r34,r34,r34,r34,r34,r34,r34,r34,,,r34,r34,r34,r34,r34,r34,r34,r34,r34,r34,,,,r34,r34,,,,,,,r34,r34,,,,,,,r34,r34,r34,r34,,r34,r34,r34,,,,r34,r34,r34,r34,r34,r34,r34,r34
222
,,r28,r28,,r28,r28,r28,r28,r28,r28,r28,r28,r28,,,r28,r28,r28,r28,r28,r28,r28,r28,r28,r28,,,,r28,r28,,,,,,,r28,r28,,,,,,,r28,r28,r28,r28,,r28,r28,r28,,,,r28,r28,r28,r28,r28,r28,r28,r28
223
,,s12,s13,,s14,s15,s16,s17,s18,s19,s20,s21,s22,,,s23,s24,s25,s26,s27,,s28,s29,s30,s31,,,,s32,s227,,,,,,,s33,s34,,,,,,,,,,,,,,,,,,s35,s36,s37,s38,s39,s40,s41,
224
,,r27,r27,,r27,r27,r27,r27,r27,r27,r27,r27,r27,,,r27,r27,r27,r27,r27,r27,r27,r27,r27,r27,,,,r27,r27,,,,,,,r27,r27,,,,,,,r27,r27,r27,r27,,r27,r27,r27,,,,r27,r27,r27,r27,r27,r27,r27,r27
225
,,,,,,,,,,,,,,,,,,,,,,,,,s228,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
226
,,r37,r37,,r37,r37,r37,r37,r37,r37,r37,r37,r37,,,r37,r37,r37,r37,r37,r37,r37,r37,r37,r37,,,,r37,r37,,,,,,,r37,r37,,,,,,,r37,r37,r37,r37,,r37,r37,r37,,,,r37,r37,r37,r37,r37,r37,r37,r37
227
,,r30,r30,,r30,r30,r30,r30,r30,r30,r30,r30,r30,,,r30,r30,r30,r30,r30,r30,r30,r30,r30,r30,,,,r30,r30,,,,,,,r30,r30,,,,,,,r30,r30,r30,r30,,r30,r30,r30,,,,r30,r30,r30,r30,r30,r30,r30,r30
228
,,,,,,,,,,,,,s22,,,s23,,,,,,,,s30,s76,,,,,,,,,,,,s33,s34,,,,,,,,s77,,,,,,s78,,,,s35,s36,s37,s38,s39,s40,s79,
229
,,,,,,,,,,,,,,,,,,,,,,,,,,s230,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
230
,,s12,s13,,s14,s15,s16,s17,s18,s19,s20,s21,s22,,,s23,s24,s25,s26,s27,,s28,s29,s30,s31,,,,s32,,,,,,,,s33,s34,,,,,,,,,,,,,,,,,,s35,s36,s37,s38,s39,s40,s41,
231
,,r35,r35,,r35,r35,r35,r35,r35,r35,r35,r35,r35,,,r35,r35,r35,r35,r35,r35,r35,r35,r35,r35,,,,r35,r35,,,,,,,r35,r35,,,,,,,r35,r35,r35,r35,,r35,r35,r35,,,,r35,r35,r35,r35,r35,r35,r35,r35
GOTO_TABLE
0
1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2,3,4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
1
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
3
1,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,7,8,9,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
5
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,10,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
6
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,11,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
8
,6,12,13,,14,15,16,17,18,19,20,21,22,,,23,24,25,26,27,,28,29,30,31,,,,32,,,,,,,,33,34,,,,,,,,,,,,,,,,,,35,36,37,38,39,40,41,,,,,,42,43,44,45,,46,47,,,,48,49,50,51,52,53,54,55,56,57,58,,,,,,,59,60,,61,62,,,63,64,65,,,
10
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,66,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
11
,,,,,,,,,,,,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
12
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,68,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
13
,,,,,,15,16,17,18,19,20,21,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,69,,,,,,,,,,,,,,,,,,,,,,,70,56,57,58,,,,,,,,,,,,,,63,71,65,,,
14
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,72,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
23
,,,,,,15,16,17,18,19,20,21,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,73,,,,,,,,,,,,,,,,,,,,,,,,,,74,,,,,,,,,,,,,,75,71,65,,,
24
,,,,,,,,,,,,,22,,,23,,,,,,,,30,76,,,,,,,,,,,,33,34,,,,,,,,77,,,,,,78,,,,35,36,37,38,39,40,79,,,,,,,,,,,,,,,,,80,81,51,82,53,83,,,,,84,85,86,87,88,89,90,60,91,61,62,,,,92,,,,
25
,,,,,,,,,,,,,,,,,,,,,,,,,93,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
26
,,,,,,,,,,,,,,,,,,,,,,,,,94,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
27
,,,,,,,,,,,,,,,,,,,,,,,,,95,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
28
,,,,,,,,,,,,,,,96,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
29
,,,,,,,,,,,,,22,,97,23,,,,,,,,30,76,,,,,,,,,,,,33,34,,,,,,,,77,,,,,,78,,,,35,36,37,38,39,40,79,,,,,,,,,,,,,,,,,80,81,51,82,53,83,,,,,98,85,86,87,88,89,90,60,91,61,62,,,,92,,,,
31
,,,,,,,,,,,,,22,,,23,,,,,,,,30,76,,,,,,,,,,,,33,34,,,,,,,,77,,,,,,78,,,,35,36,37,38,39,40,79,,,,,,,,,,,,,,,,,80,81,51,82,53,83,,,,,99,85,86,87,88,89,90,60,91,61,62,,,,92,,,,
32
,,12,13,,14,15,16,17,18,19,20,21,22,,,23,24,25,26,27,,28,29,30,31,,,,32,,,,,,,,33,34,,,,,,,,,,,,,,,,,,35,36,37,38,39,40,41,,,,,,,100,44,45,,46,47,,,,48,49,50,51,52,53,54,55,56,57,58,,,,,,,59,60,,61,62,,,63,64,65,,,
33
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,101,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
34
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,102,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
41
,,,,,,,,,,,,,,,,,,,,,,,,,103,,104,,,,,,,,,,105,106,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
43
,,12,13,,14,15,16,17,18,19,20,21,22,,,23,24,25,26,27,,28,29,30,31,,,,32,,,,,,,,33,34,,,,,,,,,,,,,,,,,,35,36,37,38,39,40,41,,,,,,,,44,45,,107,47,,,,48,49,50,51,52,53,54,55,56,57,58,,,,,,,59,60,,61,62,,,63,64,65,,,
48
,,,,,,,,,,,,,,,108,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
55
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,109,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
58
,,,,,,,,,,,,,,,,,,,,,,,,,,,110,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
59
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,111,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
61
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,112,113,114,115,116,117,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
62
,,,,,,,,,,,,,,,,,,,,,,,,,118,,119,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
68
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,120,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
69
,,,,,,,,,,,,,,,,,,,,,,,,,,,104,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
70
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,121,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
72
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,122,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,123,
73
,,,,,,,,,,,,,,,,,,,,,,,,,124,,104,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
74
,,,,,,,,,,,,,,,,,,,,,,,,,,,110,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
76
,,,,,,15,16,17,18,19,20,21,22,,,23,,,,,,,,30,76,,,,,,,,,,,,33,34,,,,,,,,77,,,,,,78,,,,35,36,37,38,39,40,41,,,,,,,,,,,,,,,,,80,81,51,82,53,83,125,56,57,58,99,85,86,87,88,89,90,60,91,61,62,,,63,64,65,,,
77
,,,,,,,,,,,,,22,,,23,,,,,,,,30,76,,,,,,,,,,,,33,34,,,,,,,,77,,,,,,78,,,,35,36,37,38,39,40,126,,,,,,,,,,,,,,,,,,81,127,82,53,83,,,,,,,,,,128,90,60,91,,129,,,,92,,,,
78
,,,,,,,,,,,,,22,,,23,,,,,,,,30,76,,,,,,,,,,,,33,34,,,,,,,,77,,,,,,78,,,,35,36,37,38,39,40,126,,,,,,,,,,,,,,,,,,81,127,82,53,83,,,,,,,,,,130,90,60,91,,129,,,,92,,,,
79
,,,,,,,,,,,,,,,,,,,,,,,,,103,,104,,,,,,,,,,105,106,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
84
,,,,,,,,,,,,,,,131,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
86
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,132,133,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
87
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,134,135,136,137,138,139,140,141,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
88
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,142,143,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
90
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,111,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
93
,,,,,,,,,,,,,22,,,23,,,,,,,,30,76,,,,,,,,,,,,33,34,,,,,,,,77,,,,,,78,,,,35,36,37,38,39,40,79,,,,,,,,,,,,,,,,,80,81,51,82,53,83,,,,,144,85,86,87,88,89,90,60,91,61,62,,,,92,,,,
94
,,12,13,,14,15,16,17,18,19,20,21,22,,,23,24,25,26,27,,28,29,30,31,,,,32,,,,,,,,33,34,,,,,,,,,,,,,,,,,,35,36,37,38,39,40,41,,,,,,,,44,45,,145,47,,,,48,49,50,51,52,53,54,55,56,57,58,,,,,,,59,60,,61,62,,,63,64,65,,,
95
,,,,,,,,,,,,,22,,,23,,,,,,,,30,76,,,,,,,,,,,,33,34,,,,,,,,77,,,,,,78,,,,35,36,37,38,39,40,79,,,,,,,,,,,,,,,,,80,81,51,82,53,83,,,,,146,85,86,87,88,89,90,60,91,61,62,,,,92,,,,
98
,,,,,,,,,,,,,,,147,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
99
,,,,,,,,,,,,,,,,,,,,,,,,,,148,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100
,,12,13,,14,15,16,17,18,19,20,21,22,,,23,24,25,26,27,,28,29,30,31,,,,32,149,,,,,,,33,34,,,,,,,,,,,,,,,,,,35,36,37,38,39,40,41,,,,,,,,44,45,,107,47,,,,48,49,50,51,52,53,54,55,56,57,58,,,,,,,59,60,,61,62,,,63,64,65,,,
103
,,,,,,,,,,,,,22,,,23,,,,,,,,30,76,,,,,,,,,,,,33,34,,,,,,,,77,,,,,,78,,,,35,36,37,38,39,40,79,,,,,,,,,,,,,,,,,80,81,51,82,53,83,,,,,150,85,86,87,88,89,90,60,91,61,62,,151,,92,,,,
104
,,,,,,,,,,,,,22,,,23,,,,,,,,30,76,,,,,,,,,,,,33,34,,,,,,,,77,,,,,,78,,,,35,36,37,38,39,40,126,,,,,,,,,,,,,,,,,,81,127,82,53,83,,,,,,,,152,88,153,90,60,91,,129,,,,92,,154,,
109
,,,,,,,,,,,,,,,,,,,,,,,,,155,,,,,,156,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
110
,,,,,,,,,,,,,22,,,23,,,,,,,,30,76,,,,,,,,,,,,33,34,,,,,,,,77,,,,,,78,,,,35,36,37,38,39,40,126,,,,,,,,,,,,,,,,,,81,127,82,53,83,,,,,,,,152,88,153,90,60,91,,129,,,,92,,157,,
111
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,158,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
112
,,,,,,,,,,,,,22,,,23,,,,,,,,30,76,,,,,,,,,,,,33,34,,,,,,,,77,,,,,,78,,,,35,36,37,38,39,40,79,,,,,,,,,,,,,,,,,80,81,51,82,53,83,,,,,159,85,86,87,88,89,90,60,91,61,62,,,,92,,,,
113
,,,,,,,,,,,,,22,,,23,,,,,,,,30,76,,,,,,,,,,,,33,34,,,,,,,,77,,,,,,78,,,,35,36,37,38,39,40,79,,,,,,,,,,,,,,,,,80,81,51,82,53,83,,,,,160,85,86,87,88,89,90,60,91,61,62,,,,92,,,,
114
,,,,,,,,,,,,,22,,,23,,,,,,,,30,76,,,,,,,,,,,,33,34,,,,,,,,77,,,,,,78,,,,35,36,37,38,39,40,79,,,,,,,,,,,,,,,,,80,81,51,82,53,83,,,,,161,85,86,87,88,89,90,60,91,61,62,,,,92,,,,
115
,,,,,,,,,,,,,22,,,23,,,,,,,,30,76,,,,,,,,,,,,33,34,,,,,,,,77,,,,,,78,,,,35,36,37,38,39,40,79,,,,,,,,,,,,,,,,,80,81,51,82,53,83,,,,,162,85,86,87,88,89,90,60,91,61,62,,,,92,,,,
116
,,,,,,,,,,,,,22,,,23,,,,,,,,30,76,,,,,,,,,,,,33,34,,,,,,,,77,,,,,,78,,,,35,36,37,38,39,40,79,,,,,,,,,,,,,,,,,80,81,51,82,53,83,,,,,163,85,86,87,88,89,90,60,91,61,62,,,,92,,,,
117
,,,,,,,,,,,,,22,,,23,,,,,,,,30,76,,,,,,,,,,,,33,34,,,,,,,,77,,,,,,78,,,,35,36,37,38,39,40,79,,,,,,,,,,,,,,,,,80,81,51,82,53,83,,,,,164,85,86,87,88,89,90,60,91,61,62,,,,92,,,,
118
,,,,,,,,,,,,,22,,,23,,,,,,,,30,76,,,,,,,,,,,,33,34,,,,,,,,77,,,,,,78,,,,35,36,37,38,39,40,79,,,,,,,,,,,,,,,,,80,81,51,82,53,83,,,,,150,85,86,87,88,89,90,60,91,61,62,,165,,92,,,,
119
,,,,,,,,,,,,,22,,,23,,,,,,,,30,76,,,,,,,,,,,,33,34,,,,,,,,77,,,,,,78,,,,35,36,37,38,39,40,126,,,,,,,,,,,,,,,,,,81,127,82,53,83,,,,,,,,166,88,153,90,60,91,,129,,,,92,,,,
120
,,12,13,,14,15,16,17,18,19,20,21,22,,,23,24,25,26,27,,28,29,30,31,,,,32,,,,,,,,33,34,,,,,,,,,,,,,,,,,,35,36,37,38,39,40,41,,,,,,,167,44,45,,46,47,,,,48,49,50,51,52,53,54,55,56,57,58,,,,,,,59,60,,61,62,,,63,64,65,,,
121
,,,,,,,,,,,,,,,,,,,,,,,,,168,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
122
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,169,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
123
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,170,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
124
,,,,,,,,,,,,,,,,,,,,,,,,,,171,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
125
,,,,,,,,,,,,,,,,,,,,,,,,,,172,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
126
,,,,,,,,,,,,,,,,,,,,,,,,,103,,104,,,,,,,,,,105,106,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
129
,,,,,,,,,,,,,,,,,,,,,,,,,118,,119,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
132
,,,,,,,,,,,,,22,,,23,,,,,,,,30,76,,,,,,,,,,,,33,34,,,,,,,,77,,,,,,78,,,,35,36,37,38,39,40,126,,,,,,,,,,,,,,,,,,81,127,82,53,83,,,,,,,173,174,88,89,90,60,91,,129,,,,92,,,,
133
,,,,,,,,,,,,,22,,,23,,,,,,,,30,76,,,,,,,,,,,,33,34,,,,,,,,77,,,,,,78,,,,35,36,37,38,39,40,126,,,,,,,,,,,,,,,,,,81,127,82,53,83,,,,,,,175,174,88,89,90,60,91,,129,,,,92,,,,
134
,,,,,,,,,,,,,22,,,23,,,,,,,,30,76,,,,,,,,,,,,33,34,,,,,,,,77,,,,,,78,,,,35,36,37,38,39,40,126,,,,,,,,,,,,,,,,,,81,127,82,53,83,,,,,,,,176,88,153,90,60,91,,129,,,,92,,,,
135
,,,,,,,,,,,,,22,,,23,,,,,,,,30,76,,,,,,,,,,,,33,34,,,,,,,,77,,,,,,78,,,,35,36,37,38,39,40,126,,,,,,,,,,,,,,,,,,81,127,82,53,83,,,,,,,,177,88,153,90,60,91,,129,,,,92,,,,
136
,,,,,,,,,,,,,22,,,23,,,,,,,,30,76,,,,,,,,,,,,33,34,,,,,,,,77,,,,,,78,,,,35,36,37,38,39,40,126,,,,,,,,,,,,,,,,,,81,127,82,53,83,,,,,,,,178,88,153,90,60,91,,129,,,,92,,,,
137
,,,,,,,,,,,,,22,,,23,,,,,,,,30,76,,,,,,,,,,,,33,34,,,,,,,,77,,,,,,78,,,,35,36,37,38,39,40,126,,,,,,,,,,,,,,,,,,81,127,82,53,83,,,,,,,,179,88,153,90,60,91,,129,,,,92,,,,
138
,,,,,,,,,,,,,22,,,23,,,,,,,,30,76,,,,,,,,,,,,33,34,,,,,,,,77,,,,,,78,,,,35,36,37,38,39,40,126,,,,,,,,,,,,,,,,,,81,127,82,53,83,,,,,,,,180,88,153,90,60,91,,129,,,,92,,,,
139
,,,,,,,,,,,,,22,,,23,,,,,,,,30,76,,,,,,,,,,,,33,34,,,,,,,,77,,,,,,78,,,,35,36,37,38,39,40,126,,,,,,,,,,,,,,,,,,81,127,82,53,83,,,,,,,,181,88,153,90,60,91,,129,,,,92,,,,
140
,,,,,,,,,,,,,22,,,23,,,,,,,,30,76,,,,,,,,,,,,33,34,,,,,,,,77,,,,,,78,,,,35,36,37,38,39,40,126,,,,,,,,,,,,,,,,,,81,127,82,53,83,,,,,,,,,182,153,90,60,91,,129,,,,92,,,,
141
,,,,,,,,,,,,,22,,,23,,,,,,,,30,76,,,,,,,,,,,,33,34,,,,,,,,77,,,,,,78,,,,35,36,37,38,39,40,126,,,,,,,,,,,,,,,,,,81,127,82,53,83,,,,,,,,,183,153,90,60,91,,129,,,,92,,,,
142
,,,,,,,,,,,,,22,,,23,,,,,,,,30,76,,,,,,,,,,,,33,34,,,,,,,,77,,,,,,78,,,,35,36,37,38,39,40,126,,,,,,,,,,,,,,,,,,81,127,82,53,83,,,,,,,,,,184,90,60,91,,129,,,,92,,,,
143
,,,,,,,,,,,,,22,,,23,,,,,,,,30,76,,,,,,,,,,,,33,34,,,,,,,,77,,,,,,78,,,,35,36,37,38,39,40,126,,,,,,,,,,,,,,,,,,81,127,82,53,83,,,,,,,,,,185,90,60,91,,129,,,,92,,,,
144
,,,,,,,,,,,,,,,,,,,,,,,,,,186,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
145
,,,,,,,,,,,,,22,,,23,,,,,,,,30,76,,,,,,,,,,,,33,34,,,,,,,,77,,,,,,78,,,,35,36,37,38,39,40,126,,,,,,,,,,,,,,,,,,81,127,82,53,83,,,,,,,187,174,88,89,90,60,91,,129,,,,92,,,,
146
,,,,,,,,,,,,,,,,,,,,,,,,,,188,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
151
,,,,,,,,,,,,,,189,,,,,,,,,,,,190,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
152
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,140,141,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
154
,,,,,,,,,,,,,,,,,,,,,,,,,,,,191,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
155
,,,,,,15,16,17,18,19,20,21,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,69,,,,,,,,,,,,,,,,,,,,,,,192,56,57,58,,,,,,,,,,,,193,,63,71,65,,,
156
,,,,,,,,,,,,,22,,,23,,,,,,,,30,76,,,,,,,,,,,,33,34,,,,,,,,77,,,,,,78,,,,35,36,37,38,39,40,79,,,,,,,,,,,,,,,,,80,81,51,82,53,83,,,,,194,85,86,87,88,89,90,60,91,61,62,,,,92,,,,
157
,,,,,,,,,,,,,,,,,,,,,,,,,,,,195,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
165
,,,,,,,,,,,,,,189,,,,,,,,,,,,196,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
166
,,,,,,,,,,,,,,,,,,,,,,,,,,,,197,,,,,,,,,,,,,,,,,140,141,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
167
,,12,13,,14,15,16,17,18,19,20,21,22,,,23,24,25,26,27,,28,29,30,31,,,,32,198,,,,,,,33,34,,,,,,,,,,,,,,,,,,35,36,37,38,39,40,41,,,,,,,,44,45,,107,47,,,,48,49,50,51,52,53,54,55,56,57,58,,,,,,,59,60,,61,62,,,63,64,65,,,
168
,,,,,,15,16,17,18,19,20,21,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,69,,,,,,,,,,,,,,,,,,,,,,,192,56,57,58,,,,,,,,,,,,199,,63,71,65,,,
170
,,,13,,14,15,16,17,18,19,20,21,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,69,,,,,,,,,,200,,201,,,,,,,,,,,55,56,57,58,,,,,,,,,,,,,,63,71,65,,,
172
,,,,,,,,,,,,,22,,,23,,,,,,,,30,76,,,,,,,,,,,,33,34,,,,,,,,77,,,,,,78,,,,35,36,37,38,39,40,126,,,,,,,,,,,,,,,,,,81,127,82,53,83,,,,,,,,,,202,90,60,91,,129,,,,92,,,,
173
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,132,133,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
174
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,134,135,136,137,138,139,140,141,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
175
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,132,133,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
176
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,140,141,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
177
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,140,141,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
178
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,140,141,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
179
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,140,141,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
180
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,140,141,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
181
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,140,141,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
182
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,142,143,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
183
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,142,143,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
186
,,12,13,,14,15,16,17,18,19,20,21,22,,,23,24,25,26,27,,28,29,30,31,,,,32,,,,,,,,33,34,,,,,,,,,,,,,,,,,,35,36,37,38,39,40,41,,,,,,,,44,45,,203,47,,,,48,49,50,51,52,53,54,55,56,57,58,,,,,,,59,60,,61,62,,,63,64,65,,,
187
,,,,,,,,,,,,,,,204,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,132,133,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
188
,,12,13,,14,15,16,17,18,19,20,21,22,,,23,24,25,26,27,,28,29,30,31,,,,32,,,,,,,,33,34,,,,,,,,,,,,,,,,,,35,36,37,38,39,40,41,,,,,,,,44,45,,205,47,,,,48,49,50,51,52,53,54,55,56,57,58,,,,,,,59,60,,61,62,,,63,64,65,,,
189
,,,,,,,,,,,,,22,,,23,,,,,,,,30,76,,,,,,,,,,,,33,34,,,,,,,,77,,,,,,78,,,,35,36,37,38,39,40,79,,,,,,,,,,,,,,,,,80,81,51,82,53,83,,,,,206,85,86,87,88,89,90,60,91,61,62,,,,92,,,,
192
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,207,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
193
,,,,,,,,,,,,,,208,,,,,,,,,,,,209,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
194
,,,,,,,,,,,,,,,210,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
199
,,,,,,,,,,,,,,208,,,,,,,,,,,,211,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
200
,,,13,,14,15,16,17,18,19,20,21,,,,,,,,,,,,,,,,,,212,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,69,,,,,,,,,,,,213,,,,,,,,,,,55,56,57,58,,,,,,,,,,,,,,63,71,65,,,
204
,,,,,,,,,,,,,22,,,23,,,,,,,,30,31,,,,,,,,,,,,33,34,,,,,,,,,,,,,,,,,,35,36,37,38,39,40,79,,,,,,,,,,,,,,,,214,49,50,51,52,53,54,,,,,,,,,,,59,60,,61,62,,,,92,,,,
205
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,215,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
208
,,,,,,15,16,17,18,19,20,21,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,69,,,,,,,,,,,,,,,,,,,,,,,216,56,57,58,,,,,,,,,,,,,,63,71,65,,,
209
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,217,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
211
,,,,,,,,,,,,,,,218,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
214
,,,,,,,,,,,,,,,,,,,,,,,,,,219,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
215
,,,,,,,,,,,,,,,,,,,,,220,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,221,222,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
216
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,216,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
217
,,12,13,,14,15,16,17,18,19,20,21,22,,,23,24,25,26,27,,28,29,30,31,,,,32,,,,,,,,33,34,,,,,,,,,,,,,,,,,,35,36,37,38,39,40,41,,,,,,,223,44,45,,46,47,,,,48,49,50,51,52,53,54,55,56,57,58,,,,,,,59,60,,61,62,,,63,64,65,,,
219
,,12,13,,14,15,16,17,18,19,20,21,22,,,23,24,25,26,27,,28,29,30,31,,,,32,,,,,,,,33,34,,,,,,,,,,,,,,,,,,35,36,37,38,39,40,41,,,,,,,,44,45,,224,47,,,,48,49,50,51,52,53,54,55,56,57,58,,,,,,,59,60,,61,62,,,63,64,65,,,
220
,,12,13,,14,15,16,17,18,19,20,21,22,,,23,24,25,26,225,,28,29,30,31,,,,32,,,,,,,,33,34,,,,,,,,,,,,,,,,,,35,36,37,38,39,40,41,,,,,,,,44,45,,226,47,,,,48,49,50,51,52,53,54,55,56,57,58,,,,,,,59,60,,61,62,,,63,64,65,,,
223
,,12,13,,14,15,16,17,18,19,20,21,22,,,23,24,25,26,27,,28,29,30,31,,,,32,227,,,,,,,33,34,,,,,,,,,,,,,,,,,,35,36,37,38,39,40,41,,,,,,,,44,45,,107,47,,,,48,49,50,51,52,53,54,55,56,57,58,,,,,,,59,60,,61,62,,,63,64,65,,,
225
,,,,,,,,,,,,,,,,,,,,,,,,,228,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
228
,,,,,,,,,,,,,22,,,23,,,,,,,,30,76,,,,,,,,,,,,33,34,,,,,,,,77,,,,,,78,,,,35,36,37,38,39,40,79,,,,,,,,,,,,,,,,,80,81,51,82,53,83,,,,,229,85,86,87,88,89,90,60,91,61,62,,,,92,,,,
229
,,,,,,,,,,,,,,,,,,,,,,,,,,230,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
230
,,12,13,,14,15,16,17,18,19,20,21,22,,,23,24,25,26,27,,28,29,30,31,,,,32,,,,,,,,33,34,,,,,,,,,,,,,,,,,,35,36,37,38,39,40,41,,,,,,,,44,45,,231,47,,,,48,49,50,51,52,53,54,55,56,57,58,,,,,,,59,60,,61,62,,,63,64,65,,,
231
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,215,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ENDTABLE
